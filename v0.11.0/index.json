{
  "api/BenchmarkDotNet.Environments.Runtime.html": {
    "href": "api/BenchmarkDotNet.Environments.Runtime.html",
    "title": "Class Runtime | BenchmarkDotNet",
    "keywords": "Class Runtime Inheritance System.Object Runtime ClrRuntime CoreRtRuntime CoreRuntime MonoRuntime Implements System.IEquatable < Runtime > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public abstract class Runtime : IEquatable<Runtime> Constructors Runtime(String) Declaration protected Runtime(string name) Parameters Type Name Description System.String name Fields Clr Full .NET Framework (Windows only) Declaration public static readonly Runtime Clr Field Value Type Description Runtime Core Cross-platform Core CLR runtime See also: https://docs.microsoft.com/en-us/dotnet/ Declaration public static readonly Runtime Core Field Value Type Description Runtime CoreRT Cross-platform .NET Core runtime optimized for ahead of time compilation See also: https://github.com/dotnet/corert Declaration public static readonly Runtime CoreRT Field Value Type Description Runtime Mono Mono See also: http://www.mono-project.com/ Declaration public static readonly Runtime Mono Field Value Type Description Runtime Properties Name Declaration public string Name { get; } Property Value Type Description System.String Methods Equals(Runtime) Declaration public bool Equals(Runtime other) Parameters Type Name Description Runtime other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/BenchmarkDotNet.Environments.html": {
    "href": "api/BenchmarkDotNet.Environments.html",
    "title": "Namespace BenchmarkDotNet.Environments | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Environments Classes BenchmarkEnvironmentInfo ClrRuntime CoreRtRuntime CoreRuntime EnvResolver GcResolver HostEnvironmentInfo InfrastructureResolver MonoRuntime OsBrandStringHelper ProcessorBrandStringHelper Runtime Enums Jit Platform"
  },
  "api/BenchmarkDotNet.Extensions.ConfigurationExtensions.html": {
    "href": "api/BenchmarkDotNet.Extensions.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions | BenchmarkDotNet",
    "keywords": "Class ConfigurationExtensions Inheritance System.Object ConfigurationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Extensions Assembly : BenchmarkDotNet.dll Syntax public static class ConfigurationExtensions Methods ToConfig(Jit) Declaration public static string ToConfig(this Jit jit) Parameters Type Name Description Jit jit Returns Type Description System.String ToConfig(Platform) Declaration public static string ToConfig(this Platform platform) Parameters Type Name Description Platform platform Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Extensions.ReportExtensions.html": {
    "href": "api/BenchmarkDotNet.Extensions.ReportExtensions.html",
    "title": "Class ReportExtensions | BenchmarkDotNet",
    "keywords": "Class ReportExtensions Inheritance System.Object ReportExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Extensions Assembly : BenchmarkDotNet.dll Syntax public static class ReportExtensions Methods GetReportFor<T>(Summary, Expression<Action<T>>) Declaration public static BenchmarkReport GetReportFor<T>(this Summary summary, Expression<Action<T>> actionExp) Parameters Type Name Description Summary summary System.Linq.Expressions.Expression < System.Action <T>> actionExp Returns Type Description BenchmarkReport Type Parameters Name Description T GetRunsFor<T>(Summary, Expression<Action<T>>) Declaration public static IList<Measurement> GetRunsFor<T>(this Summary summary, Expression<Action<T>> actionExp) Parameters Type Name Description Summary summary System.Linq.Expressions.Expression < System.Action <T>> actionExp Returns Type Description System.Collections.Generic.IList < Measurement > Type Parameters Name Description T GetStatistics(IEnumerable<Measurement>) Declaration public static Statistics GetStatistics(this IEnumerable<Measurement> runs) Parameters Type Name Description System.Collections.Generic.IEnumerable < Measurement > runs Returns Type Description Statistics GetStatistics(IReadOnlyCollection<Measurement>) Declaration public static Statistics GetStatistics(this IReadOnlyCollection<Measurement> runs) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < Measurement > runs Returns Type Description Statistics"
  },
  "api/BenchmarkDotNet.Extensions.StatisticsExtensions.html": {
    "href": "api/BenchmarkDotNet.Extensions.StatisticsExtensions.html",
    "title": "Class StatisticsExtensions | BenchmarkDotNet",
    "keywords": "Class StatisticsExtensions Inheritance System.Object StatisticsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Extensions Assembly : BenchmarkDotNet.dll Syntax public static class StatisticsExtensions Methods ToStr(Statistics) Declaration public static string ToStr(this Statistics s) Parameters Type Name Description Statistics s Returns Type Description System.String ToTimeStr(Statistics, Encoding, TimeUnit, Boolean) Declaration public static string ToTimeStr(this Statistics s, Encoding encoding, TimeUnit unit = null, bool calcHistogram = false) Parameters Type Name Description Statistics s System.Text.Encoding encoding TimeUnit unit System.Boolean calcHistogram Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Extensions.StringAndTextExtensions.html": {
    "href": "api/BenchmarkDotNet.Extensions.StringAndTextExtensions.html",
    "title": "Class StringAndTextExtensions | BenchmarkDotNet",
    "keywords": "Class StringAndTextExtensions Inheritance System.Object StringAndTextExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Extensions Assembly : BenchmarkDotNet.dll Syntax public static class StringAndTextExtensions"
  },
  "api/BenchmarkDotNet.Engines.IEngine.html": {
    "href": "api/BenchmarkDotNet.Engines.IEngine.html",
    "title": "Interface IEngine | BenchmarkDotNet",
    "keywords": "Interface IEngine Inherited Members System.IDisposable.Dispose() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public interface IEngine : IDisposable Properties GlobalCleanupAction Declaration Action GlobalCleanupAction { get; } Property Value Type Description System.Action GlobalSetupAction Declaration Action GlobalSetupAction { get; } Property Value Type Description System.Action Host Declaration IHost Host { get; } Property Value Type Description IHost IdleAction Declaration Action<long> IdleAction { get; } Property Value Type Description System.Action < System.Int64 > MainAction Declaration Action<long> MainAction { get; } Property Value Type Description System.Action < System.Int64 > OperationsPerInvoke Declaration long OperationsPerInvoke { get; } Property Value Type Description System.Int64 Resolver Declaration IResolver Resolver { get; } Property Value Type Description IResolver TargetJob Declaration Job TargetJob { get; } Property Value Type Description Job Methods Run() Declaration RunResults Run() Returns Type Description RunResults RunIteration(IterationData) Declaration Measurement RunIteration(IterationData data) Parameters Type Name Description IterationData data Returns Type Description Measurement WriteLine() Declaration void WriteLine() WriteLine(String) Declaration void WriteLine(string line) Parameters Type Name Description System.String line"
  },
  "api/BenchmarkDotNet.Exporters.Csv.CsvExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.Csv.CsvExporter.html",
    "title": "Class CsvExporter | BenchmarkDotNet",
    "keywords": "Class CsvExporter Inheritance System.Object ExporterBase CsvExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Csv Assembly : BenchmarkDotNet.dll Syntax public class CsvExporter : ExporterBase, IExporter Constructors CsvExporter(CsvSeparator) Declaration public CsvExporter(CsvSeparator separator) Parameters Type Name Description CsvSeparator separator CsvExporter(CsvSeparator, ISummaryStyle) Declaration public CsvExporter(CsvSeparator separator, ISummaryStyle style) Parameters Type Name Description CsvSeparator separator ISummaryStyle style Fields Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Properties FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.Csv.CsvHelper.html": {
    "href": "api/BenchmarkDotNet.Exporters.Csv.CsvHelper.html",
    "title": "Class CsvHelper | BenchmarkDotNet",
    "keywords": "Class CsvHelper Inheritance System.Object CsvHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Csv Assembly : BenchmarkDotNet.dll Syntax public static class CsvHelper Methods Escape(String, String) Declaration public static string Escape(string value, string currentListSeparator) Parameters Type Name Description System.String value System.String currentListSeparator Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Exporters.Csv.CsvMeasurementsExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.Csv.CsvMeasurementsExporter.html",
    "title": "Class CsvMeasurementsExporter | BenchmarkDotNet",
    "keywords": "Class CsvMeasurementsExporter Inheritance System.Object ExporterBase CsvMeasurementsExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Csv Assembly : BenchmarkDotNet.dll Syntax public class CsvMeasurementsExporter : ExporterBase, IExporter Constructors CsvMeasurementsExporter(CsvSeparator, ISummaryStyle) Declaration public CsvMeasurementsExporter(CsvSeparator separator, ISummaryStyle style = null) Parameters Type Name Description CsvSeparator separator ISummaryStyle style Fields Default Declaration public static readonly CsvMeasurementsExporter Default Field Value Type Description CsvMeasurementsExporter Properties FileCaption Declaration protected override string FileCaption { get; } Property Value Type Description System.String Overrides ExporterBase.FileCaption FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Separator Declaration public string Separator { get; } Property Value Type Description System.String Style Declaration public ISummaryStyle Style { get; } Property Value Type Description ISummaryStyle Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) GetJobs(Summary) Declaration public static Job[] GetJobs(Summary summary) Parameters Type Name Description Summary summary Returns Type Description Job [] WithStyle(SummaryStyle) Declaration public static CsvMeasurementsExporter WithStyle(SummaryStyle style) Parameters Type Name Description SummaryStyle style Returns Type Description CsvMeasurementsExporter Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.Csv.CsvSeparator.html": {
    "href": "api/BenchmarkDotNet.Exporters.Csv.CsvSeparator.html",
    "title": "Enum CsvSeparator | BenchmarkDotNet",
    "keywords": "Enum CsvSeparator Namespace : BenchmarkDotNet.Exporters.Csv Assembly : BenchmarkDotNet.dll Syntax public enum CsvSeparator Fields Name Description Comma ',' will be used as the CSV separator. CurrentCulture Semicolon ';' will be used as the CSV separator. Extension Methods CsvSeparatorExtensions.ToRealSeparator()"
  },
  "api/BenchmarkDotNet.Filters.DisjunctionFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.DisjunctionFilter.html",
    "title": "Class DisjunctionFilter | BenchmarkDotNet",
    "keywords": "Class DisjunctionFilter Inheritance System.Object DisjunctionFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class DisjunctionFilter : IFilter Constructors DisjunctionFilter(IFilter[]) Declaration public DisjunctionFilter(params IFilter[] filters) Parameters Type Name Description IFilter [] filters Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.IFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.IFilter.html",
    "title": "Interface IFilter | BenchmarkDotNet",
    "keywords": "Interface IFilter Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public interface IFilter Methods Predicate(Benchmark) Declaration bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Filters.MethodNamesFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.MethodNamesFilter.html",
    "title": "Class MethodNamesFilter | BenchmarkDotNet",
    "keywords": "Class MethodNamesFilter filters benchmarks by provided method names Inheritance System.Object MethodNamesFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class MethodNamesFilter : IFilter Constructors MethodNamesFilter(String[]) Declaration public MethodNamesFilter(string[] methodNames) Parameters Type Name Description System.String [] methodNames Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.NameFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.NameFilter.html",
    "title": "Class NameFilter | BenchmarkDotNet",
    "keywords": "Class NameFilter Inheritance System.Object SimpleFilter NameFilter Implements IFilter Inherited Members SimpleFilter.Predicate(Benchmark) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class NameFilter : SimpleFilter, IFilter Constructors NameFilter(Func<String, Boolean>) Declaration public NameFilter(Func<string, bool> predicate) Parameters Type Name Description System.Func < System.String , System.Boolean > predicate Implements IFilter"
  },
  "api/BenchmarkDotNet.Jobs.Job.html": {
    "href": "api/BenchmarkDotNet.Jobs.Job.html",
    "title": "Class Job | BenchmarkDotNet",
    "keywords": "Class Job Inheritance System.Object CharacteristicObject CharacteristicObject < Job > JobMode < Job > Job Inherited Members JobMode<Job>.Default JobMode<Job>.Job CharacteristicObject<Job>.Apply(CharacteristicObject) CharacteristicObject<Job>.Apply(CharacteristicObject[]) CharacteristicObject<Job>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<Job>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<Job>.Freeze() CharacteristicObject<Job>.UnfreezeCopy() CharacteristicObject<Job>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public sealed class Job : JobMode<Job> Constructors Job() Declaration public Job() Job(CharacteristicObject) Declaration public Job(CharacteristicObject other) Parameters Type Name Description CharacteristicObject other Job(CharacteristicObject[]) Declaration public Job(params CharacteristicObject[] others) Parameters Type Name Description CharacteristicObject [] others Job(String) Declaration public Job(string id) Parameters Type Name Description System.String id Job(String, CharacteristicObject) Declaration public Job(string id, CharacteristicObject other) Parameters Type Name Description System.String id CharacteristicObject other Job(String, CharacteristicObject[]) Declaration public Job(string id, params CharacteristicObject[] others) Parameters Type Name Description System.String id CharacteristicObject [] others Fields AccuracyCharacteristic Declaration public static readonly Characteristic<AccuracyMode> AccuracyCharacteristic Field Value Type Description Characteristic < AccuracyMode > Clr Declaration public static readonly Job Clr Field Value Type Description Job Core Declaration public static readonly Job Core Field Value Type Description Job CoreRT Declaration public static readonly Job CoreRT Field Value Type Description Job Dry Declaration public static readonly Job Dry Field Value Type Description Job DryClr Declaration public static readonly Job DryClr Field Value Type Description Job DryCore Declaration public static readonly Job DryCore Field Value Type Description Job DryCoreRT Declaration public static readonly Job DryCoreRT Field Value Type Description Job DryMono Declaration public static readonly Job DryMono Field Value Type Description Job EnvCharacteristic Declaration public static readonly Characteristic<EnvMode> EnvCharacteristic Field Value Type Description Characteristic < EnvMode > InfrastructureCharacteristic Declaration public static readonly Characteristic<InfrastructureMode> InfrastructureCharacteristic Field Value Type Description Characteristic < InfrastructureMode > InProcess Declaration public static readonly Job InProcess Field Value Type Description Job InProcessDontLogOutput Declaration public static readonly Job InProcessDontLogOutput Field Value Type Description Job LegacyJitX64 Declaration public static readonly Job LegacyJitX64 Field Value Type Description Job LegacyJitX86 Declaration public static readonly Job LegacyJitX86 Field Value Type Description Job LongRun Declaration public static readonly Job LongRun Field Value Type Description Job MediumRun Declaration public static readonly Job MediumRun Field Value Type Description Job MetaCharacteristic Declaration public static readonly Characteristic<MetaMode> MetaCharacteristic Field Value Type Description Characteristic < MetaMode > Mono Declaration public static readonly Job Mono Field Value Type Description Job RunCharacteristic Declaration public static readonly Characteristic<RunMode> RunCharacteristic Field Value Type Description Characteristic < RunMode > RyuJitX64 Declaration public static readonly Job RyuJitX64 Field Value Type Description Job RyuJitX86 Declaration public static readonly Job RyuJitX86 Field Value Type Description Job ShortRun Declaration public static readonly Job ShortRun Field Value Type Description Job VeryLongRun Declaration public static readonly Job VeryLongRun Field Value Type Description Job Properties Accuracy Declaration public AccuracyMode Accuracy { get; } Property Value Type Description AccuracyMode DisplayInfo Declaration public string DisplayInfo { get; } Property Value Type Description System.String Env Declaration public EnvMode Env { get; } Property Value Type Description EnvMode FolderInfo Declaration public string FolderInfo { get; } Property Value Type Description System.String Infrastructure Declaration public InfrastructureMode Infrastructure { get; } Property Value Type Description InfrastructureMode Meta Declaration public MetaMode Meta { get; } Property Value Type Description MetaMode ResolvedId Declaration public string ResolvedId { get; } Property Value Type Description System.String Run Declaration public RunMode Run { get; } Property Value Type Description RunMode Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject) JobExtensions.With(Job, Platform) JobExtensions.WithId(Job, String) JobExtensions.With(Job, Jit) JobExtensions.With(Job, Runtime) JobExtensions.WithAffinity(Job, IntPtr) JobExtensions.WithGcServer(Job, Boolean) JobExtensions.WithGcConcurrent(Job, Boolean) JobExtensions.WithGcCpuGroups(Job, Boolean) JobExtensions.WithGcForce(Job, Boolean) JobExtensions.WithGcAllowVeryLargeObjects(Job, Boolean) JobExtensions.WithGcRetainVm(Job, Boolean) JobExtensions.With(Job, GcMode) JobExtensions.With(Job, RunStrategy) JobExtensions.WithLaunchCount(Job, Int32) JobExtensions.WithWarmupCount(Job, Int32) JobExtensions.WithTargetCount(Job, Int32) JobExtensions.WithIterationTime(Job, TimeInterval) JobExtensions.WithInvocationCount(Job, Int32) JobExtensions.WithUnrollFactor(Job, Int32) JobExtensions.RunOncePerIteration(Job) JobExtensions.WithMinTargetIterationCount(Job, Int32) JobExtensions.WithMaxTargetIterationCount(Job, Int32) JobExtensions.With(Job, IToolchain) JobExtensions.With(Job, IClock) JobExtensions.With(Job, IEngineFactory) JobExtensions.WithCustomBuildConfiguration(Job, String) JobExtensions.With(Job, IReadOnlyList<EnvironmentVariable>) JobExtensions.With(Job, IReadOnlyList<Argument>) JobExtensions.WithMaxRelativeError(Job, Double) JobExtensions.WithMaxAbsoluteError(Job, TimeInterval) JobExtensions.WithMinIterationTime(Job, TimeInterval) JobExtensions.WithMinInvokeCount(Job, Int32) JobExtensions.WithEvaluateOverhead(Job, Boolean) JobExtensions.WithOutlierMode(Job, OutlierMode) JobExtensions.WithRemoveOutliers(Job, Boolean) JobExtensions.WithAnalyzeLaunchVariance(Job, Boolean) JobExtensions.AsBaseline(Job) JobExtensions.WithIsBaseline(Job, Boolean)"
  },
  "api/BenchmarkDotNet.Jobs.JobExtensions.html": {
    "href": "api/BenchmarkDotNet.Jobs.JobExtensions.html",
    "title": "Class JobExtensions | BenchmarkDotNet",
    "keywords": "Class JobExtensions Inheritance System.Object JobExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public static class JobExtensions Methods AsBaseline(Job) Declaration public static Job AsBaseline(this Job job) Parameters Type Name Description Job job Returns Type Description Job RunOncePerIteration(Job) Declaration public static Job RunOncePerIteration(this Job job) Parameters Type Name Description Job job Returns Type Description Job With(Job, IEngineFactory) Declaration public static Job With(this Job job, IEngineFactory engineFactory) Parameters Type Name Description Job job IEngineFactory engineFactory Returns Type Description Job With(Job, RunStrategy) Declaration public static Job With(this Job job, RunStrategy strategy) Parameters Type Name Description Job job RunStrategy strategy Returns Type Description Job With(Job, Jit) Declaration public static Job With(this Job job, Jit jit) Parameters Type Name Description Job job Jit jit Returns Type Description Job With(Job, Platform) Declaration public static Job With(this Job job, Platform platform) Parameters Type Name Description Job job Platform platform Returns Type Description Job With(Job, Runtime) Declaration public static Job With(this Job job, Runtime runtime) Parameters Type Name Description Job job Runtime runtime Returns Type Description Job With(Job, IClock) Declaration public static Job With(this Job job, IClock clock) Parameters Type Name Description Job job IClock clock Returns Type Description Job With(Job, GcMode) Declaration public static Job With(this Job job, GcMode gc) Parameters Type Name Description Job job GcMode gc Returns Type Description Job With(Job, IToolchain) Declaration public static Job With(this Job job, IToolchain toolchain) Parameters Type Name Description Job job IToolchain toolchain Returns Type Description Job With(Job, IReadOnlyList<Argument>) Declaration public static Job With(this Job job, IReadOnlyList<Argument> arguments) Parameters Type Name Description Job job System.Collections.Generic.IReadOnlyList < Argument > arguments Returns Type Description Job With(Job, IReadOnlyList<EnvironmentVariable>) Declaration public static Job With(this Job job, IReadOnlyList<EnvironmentVariable> environmentVariables) Parameters Type Name Description Job job System.Collections.Generic.IReadOnlyList < EnvironmentVariable > environmentVariables Returns Type Description Job WithAffinity(Job, IntPtr) Declaration public static Job WithAffinity(this Job job, IntPtr affinity) Parameters Type Name Description Job job System.IntPtr affinity Returns Type Description Job WithAnalyzeLaunchVariance(Job, Boolean) Declaration public static Job WithAnalyzeLaunchVariance(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithCustomBuildConfiguration(Job, String) Declaration public static Job WithCustomBuildConfiguration(this Job job, string buildConfiguration) Parameters Type Name Description Job job System.String buildConfiguration Returns Type Description Job WithEvaluateOverhead(Job, Boolean) Declaration public static Job WithEvaluateOverhead(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithGcAllowVeryLargeObjects(Job, Boolean) Declaration public static Job WithGcAllowVeryLargeObjects(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithGcConcurrent(Job, Boolean) Declaration public static Job WithGcConcurrent(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithGcCpuGroups(Job, Boolean) Declaration public static Job WithGcCpuGroups(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithGcForce(Job, Boolean) Declaration public static Job WithGcForce(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithGcRetainVm(Job, Boolean) Declaration public static Job WithGcRetainVm(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithGcServer(Job, Boolean) Declaration public static Job WithGcServer(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithId(Job, String) Declaration public static Job WithId(this Job job, string id) Parameters Type Name Description Job job System.String id Returns Type Description Job WithInvocationCount(Job, Int32) Declaration public static Job WithInvocationCount(this Job job, int count) Parameters Type Name Description Job job System.Int32 count Returns Type Description Job WithIsBaseline(Job, Boolean) Declaration public static Job WithIsBaseline(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithIterationTime(Job, TimeInterval) Declaration public static Job WithIterationTime(this Job job, TimeInterval time) Parameters Type Name Description Job job TimeInterval time Returns Type Description Job WithLaunchCount(Job, Int32) Declaration public static Job WithLaunchCount(this Job job, int count) Parameters Type Name Description Job job System.Int32 count Returns Type Description Job WithMaxAbsoluteError(Job, TimeInterval) Declaration public static Job WithMaxAbsoluteError(this Job job, TimeInterval value) Parameters Type Name Description Job job TimeInterval value Returns Type Description Job WithMaxRelativeError(Job, Double) Declaration public static Job WithMaxRelativeError(this Job job, double value) Parameters Type Name Description Job job System.Double value Returns Type Description Job WithMaxTargetIterationCount(Job, Int32) Declaration public static Job WithMaxTargetIterationCount(this Job job, int count) Parameters Type Name Description Job job System.Int32 count Returns Type Description Job WithMinInvokeCount(Job, Int32) Declaration public static Job WithMinInvokeCount(this Job job, int value) Parameters Type Name Description Job job System.Int32 value Returns Type Description Job WithMinIterationTime(Job, TimeInterval) Declaration public static Job WithMinIterationTime(this Job job, TimeInterval value) Parameters Type Name Description Job job TimeInterval value Returns Type Description Job WithMinTargetIterationCount(Job, Int32) Declaration public static Job WithMinTargetIterationCount(this Job job, int count) Parameters Type Name Description Job job System.Int32 count Returns Type Description Job WithOutlierMode(Job, OutlierMode) Declaration public static Job WithOutlierMode(this Job job, OutlierMode value) Parameters Type Name Description Job job OutlierMode value Returns Type Description Job WithRemoveOutliers(Job, Boolean) Declaration [Obsolete(\"Please use the new WithOutlierMode instead\")] public static Job WithRemoveOutliers(this Job job, bool value) Parameters Type Name Description Job job System.Boolean value Returns Type Description Job WithTargetCount(Job, Int32) Declaration public static Job WithTargetCount(this Job job, int count) Parameters Type Name Description Job job System.Int32 count Returns Type Description Job WithUnrollFactor(Job, Int32) Declaration public static Job WithUnrollFactor(this Job job, int factor) Parameters Type Name Description Job job System.Int32 factor Returns Type Description Job WithWarmupCount(Job, Int32) Declaration public static Job WithWarmupCount(this Job job, int count) Parameters Type Name Description Job job System.Int32 count Returns Type Description Job"
  },
  "api/BenchmarkDotNet.Jobs.JobIdGenerator.html": {
    "href": "api/BenchmarkDotNet.Jobs.JobIdGenerator.html",
    "title": "Class JobIdGenerator | BenchmarkDotNet",
    "keywords": "Class JobIdGenerator Inheritance System.Object JobIdGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public static class JobIdGenerator Methods GenerateRandomId(Job) Declaration public static string GenerateRandomId(Job job) Parameters Type Name Description Job job Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Jobs.JobMode-1.html": {
    "href": "api/BenchmarkDotNet.Jobs.JobMode-1.html",
    "title": "Class JobMode<T> | BenchmarkDotNet",
    "keywords": "Class JobMode<T> Inheritance System.Object CharacteristicObject CharacteristicObject <T> JobMode<T> AccuracyMode EnvMode GcMode InfrastructureMode Job MetaMode RunMode Inherited Members CharacteristicObject<T>.Apply(CharacteristicObject) CharacteristicObject<T>.Apply(CharacteristicObject[]) CharacteristicObject<T>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<T>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<T>.Freeze() CharacteristicObject<T>.UnfreezeCopy() CharacteristicObject<T>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public abstract class JobMode<T> : CharacteristicObject<T> where T : JobMode<T>, new() Type Parameters Name Description T Constructors JobMode() Declaration protected JobMode() JobMode(String) Declaration protected JobMode(string id) Parameters Type Name Description System.String id Fields Default Declaration public static readonly T Default Field Value Type Description T Properties Job Declaration public Job Job { get; } Property Value Type Description Job Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Mathematics.NumeralSystemExtensions.html": {
    "href": "api/BenchmarkDotNet.Mathematics.NumeralSystemExtensions.html",
    "title": "Class NumeralSystemExtensions | BenchmarkDotNet",
    "keywords": "Class NumeralSystemExtensions Inheritance System.Object NumeralSystemExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public static class NumeralSystemExtensions Methods ToPresentation(NumeralSystem, Int32) Declaration public static string ToPresentation(this NumeralSystem system, int value) Parameters Type Name Description NumeralSystem system System.Int32 value Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Mathematics.OutlierMode.html": {
    "href": "api/BenchmarkDotNet.Mathematics.OutlierMode.html",
    "title": "Enum OutlierMode | BenchmarkDotNet",
    "keywords": "Enum OutlierMode The enum is design to remove some outliers from the distribution. Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public enum OutlierMode Fields Name Description All Remove all outliers. None Don't remove outliers. OnlyLower Remove only lower outliers (which is smaller than lowerFence). OnlyUpper Remove only upper outliers (which is bigger than upperFence)."
  },
  "api/BenchmarkDotNet.Mathematics.PercentileValues.html": {
    "href": "api/BenchmarkDotNet.Mathematics.PercentileValues.html",
    "title": "Class PercentileValues | BenchmarkDotNet",
    "keywords": "Class PercentileValues Inheritance System.Object PercentileValues Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public class PercentileValues Properties P0 Declaration public double P0 { get; } Property Value Type Description System.Double P100 Declaration public double P100 { get; } Property Value Type Description System.Double P25 Declaration public double P25 { get; } Property Value Type Description System.Double P50 Declaration public double P50 { get; } Property Value Type Description System.Double P67 Declaration public double P67 { get; } Property Value Type Description System.Double P80 Declaration public double P80 { get; } Property Value Type Description System.Double P85 Declaration public double P85 { get; } Property Value Type Description System.Double P90 Declaration public double P90 { get; } Property Value Type Description System.Double P95 Declaration public double P95 { get; } Property Value Type Description System.Double Methods Percentile(Int32) Declaration public double Percentile(int percentile) Parameters Type Name Description System.Int32 percentile Returns Type Description System.Double ToStr(Boolean) Declaration public string ToStr(bool showLevel = true) Parameters Type Name Description System.Boolean showLevel Returns Type Description System.String ToTimeStr(TimeUnit, Boolean, Encoding) Declaration public string ToTimeStr(TimeUnit unit = null, bool showLevel = true, Encoding encoding = null) Parameters Type Name Description TimeUnit unit System.Boolean showLevel System.Text.Encoding encoding Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Jobs.MonoArgument.html": {
    "href": "api/BenchmarkDotNet.Jobs.MonoArgument.html",
    "title": "Class MonoArgument | BenchmarkDotNet",
    "keywords": "Class MonoArgument Argument passed directly to mono when executing benchmarks (mono [options]) example: new MonoArgument(\"--gc=sgen\") Inheritance System.Object Argument MonoArgument Inherited Members Argument.TextRepresentation Argument.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public class MonoArgument : Argument Constructors MonoArgument(String) Declaration public MonoArgument(string value) Parameters Type Name Description System.String value"
  },
  "api/BenchmarkDotNet.Jobs.MsBuildArgument.html": {
    "href": "api/BenchmarkDotNet.Jobs.MsBuildArgument.html",
    "title": "Class MsBuildArgument | BenchmarkDotNet",
    "keywords": "Class MsBuildArgument Argument passed to dotnet cli when restoring and building the project example: new MsBuildArgument(\"/p:MyCustomSetting=123\") Inheritance System.Object Argument MsBuildArgument Inherited Members Argument.TextRepresentation Argument.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public class MsBuildArgument : Argument Constructors MsBuildArgument(String) Declaration public MsBuildArgument(string value) Parameters Type Name Description System.String value"
  },
  "api/BenchmarkDotNet.Jobs.RunMode.html": {
    "href": "api/BenchmarkDotNet.Jobs.RunMode.html",
    "title": "Class RunMode | BenchmarkDotNet",
    "keywords": "Class RunMode Inheritance System.Object CharacteristicObject CharacteristicObject < RunMode > JobMode < RunMode > RunMode Inherited Members JobMode<RunMode>.Default JobMode<RunMode>.Job CharacteristicObject<RunMode>.Apply(CharacteristicObject) CharacteristicObject<RunMode>.Apply(CharacteristicObject[]) CharacteristicObject<RunMode>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<RunMode>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<RunMode>.Freeze() CharacteristicObject<RunMode>.UnfreezeCopy() CharacteristicObject<RunMode>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public sealed class RunMode : JobMode<RunMode> Constructors RunMode() Declaration public RunMode() RunMode(String) Declaration public RunMode(string id) Parameters Type Name Description System.String id Fields Dry Declaration public static readonly RunMode Dry Field Value Type Description RunMode InvocationCountCharacteristic Declaration public static readonly Characteristic<int> InvocationCountCharacteristic Field Value Type Description Characteristic < System.Int32 > IterationTimeCharacteristic Declaration public static readonly Characteristic<TimeInterval> IterationTimeCharacteristic Field Value Type Description Characteristic < TimeInterval > LaunchCountCharacteristic Declaration public static readonly Characteristic<int> LaunchCountCharacteristic Field Value Type Description Characteristic < System.Int32 > Long Declaration public static readonly RunMode Long Field Value Type Description RunMode MaxTargetIterationCountCharacteristic Declaration public static readonly Characteristic<int> MaxTargetIterationCountCharacteristic Field Value Type Description Characteristic < System.Int32 > Medium Declaration public static readonly RunMode Medium Field Value Type Description RunMode MinTargetIterationCountCharacteristic Declaration public static readonly Characteristic<int> MinTargetIterationCountCharacteristic Field Value Type Description Characteristic < System.Int32 > RunStrategyCharacteristic Declaration public static readonly Characteristic<RunStrategy> RunStrategyCharacteristic Field Value Type Description Characteristic < RunStrategy > Short Declaration public static readonly RunMode Short Field Value Type Description RunMode TargetCountCharacteristic Declaration public static readonly Characteristic<int> TargetCountCharacteristic Field Value Type Description Characteristic < System.Int32 > UnrollFactorCharacteristic Declaration public static readonly Characteristic<int> UnrollFactorCharacteristic Field Value Type Description Characteristic < System.Int32 > VeryLong Declaration public static readonly RunMode VeryLong Field Value Type Description RunMode WarmupCountCharacteristic Declaration public static readonly Characteristic<int> WarmupCountCharacteristic Field Value Type Description Characteristic < System.Int32 > Properties InvocationCount Invocation count in a single iteration. If specified, IterationTime will be ignored. If specified, it must be a multiple of UnrollFactor . Declaration public int InvocationCount { get; set; } Property Value Type Description System.Int32 IterationTime Desired time of execution of an iteration. Declaration public TimeInterval IterationTime { get; set; } Property Value Type Description TimeInterval LaunchCount How many times we should launch process with target benchmark. Declaration public int LaunchCount { get; set; } Property Value Type Description System.Int32 MaxTargetIterationCount Maximum count of target iterations that should be performed The default value is 100 If you set this value to below 15, then MultimodalDistributionAnalyzer is not going to work Declaration public int MaxTargetIterationCount { get; set; } Property Value Type Description System.Int32 MinTargetIterationCount Minimum count of target iterations that should be performed The default value is 15 If you set this value to below 15, then MultimodalDistributionAnalyzer is not going to work Declaration public int MinTargetIterationCount { get; set; } Property Value Type Description System.Int32 RunStrategy Available values: Throughput and ColdStart. Throughput: default strategy which allows to get good precision level. ColdStart: should be used only for measuring cold start of the application or testing purpose. Declaration public RunStrategy RunStrategy { get; set; } Property Value Type Description RunStrategy TargetCount How many target iterations should be performed If specified, MinTargetIterationCount will be ignored. If specified, MaxTargetIterationCount will be ignored. Declaration public int TargetCount { get; set; } Property Value Type Description System.Int32 UnrollFactor How many times the benchmark method will be invoked per one iteration of a generated loop. Declaration public int UnrollFactor { get; set; } Property Value Type Description System.Int32 WarmupCount How many warmup iterations should be performed. Declaration public int WarmupCount { get; set; } Property Value Type Description System.Int32 Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Order.MethodOrderPolicy.html": {
    "href": "api/BenchmarkDotNet.Order.MethodOrderPolicy.html",
    "title": "Enum MethodOrderPolicy | BenchmarkDotNet",
    "keywords": "Enum MethodOrderPolicy Namespace : BenchmarkDotNet.Order Assembly : BenchmarkDotNet.dll Syntax public enum MethodOrderPolicy Fields Name Description Alphabetical Declared"
  },
  "api/BenchmarkDotNet.Order.SummaryOrderPolicy.html": {
    "href": "api/BenchmarkDotNet.Order.SummaryOrderPolicy.html",
    "title": "Enum SummaryOrderPolicy | BenchmarkDotNet",
    "keywords": "Enum SummaryOrderPolicy Namespace : BenchmarkDotNet.Order Assembly : BenchmarkDotNet.dll Syntax public enum SummaryOrderPolicy Fields Name Description Declared Default FastestToSlowest Method SlowestToFastest"
  },
  "api/BenchmarkDotNet.Order.html": {
    "href": "api/BenchmarkDotNet.Order.html",
    "title": "Namespace BenchmarkDotNet.Order | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Order Classes DefaultOrderProvider Interfaces IOrderProvider Enums MethodOrderPolicy SummaryOrderPolicy"
  },
  "api/BenchmarkDotNet.Parameters.ParameterDefinition.html": {
    "href": "api/BenchmarkDotNet.Parameters.ParameterDefinition.html",
    "title": "Class ParameterDefinition | BenchmarkDotNet",
    "keywords": "Class ParameterDefinition Inheritance System.Object ParameterDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Parameters Assembly : BenchmarkDotNet.dll Syntax public class ParameterDefinition Constructors ParameterDefinition(String, Boolean, Object[], Boolean) Declaration public ParameterDefinition(string name, bool isStatic, object[] values, bool isArgument) Parameters Type Name Description System.String name System.Boolean isStatic System.Object [] values System.Boolean isArgument Properties IsArgument Declaration public bool IsArgument { get; } Property Value Type Description System.Boolean IsStatic Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean Name Declaration public string Name { get; } Property Value Type Description System.String Values Declaration public object[] Values { get; } Property Value Type Description System.Object []"
  },
  "api/BenchmarkDotNet.Running.Benchmark.html": {
    "href": "api/BenchmarkDotNet.Running.Benchmark.html",
    "title": "Class Benchmark | BenchmarkDotNet",
    "keywords": "Class Benchmark Inheritance System.Object Benchmark Implements System.IComparable < Benchmark > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class Benchmark : IComparable<Benchmark> Properties DisplayInfo Declaration public string DisplayInfo { get; } Property Value Type Description System.String FolderInfo Declaration public string FolderInfo { get; } Property Value Type Description System.String HasArguments Declaration public bool HasArguments { get; } Property Value Type Description System.Boolean Job Declaration public Job Job { get; } Property Value Type Description Job Parameters Declaration public ParameterInstances Parameters { get; } Property Value Type Description ParameterInstances Target Declaration public Target Target { get; } Property Value Type Description Target Methods CompareTo(Benchmark) Declaration public int CompareTo(Benchmark other) Parameters Type Name Description Benchmark other Returns Type Description System.Int32 Create(Target, Job, ParameterInstances) Declaration public static Benchmark Create(Target target, Job job, ParameterInstances parameters) Parameters Type Name Description Target target Job job ParameterInstances parameters Returns Type Description Benchmark IsBaseline() Declaration public bool IsBaseline() Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IComparable<T>"
  },
  "api/BenchmarkDotNet.Running.BenchmarkBuildInfo.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkBuildInfo.html",
    "title": "Class BenchmarkBuildInfo | BenchmarkDotNet",
    "keywords": "Class BenchmarkBuildInfo Inheritance System.Object BenchmarkBuildInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class BenchmarkBuildInfo Constructors BenchmarkBuildInfo(Benchmark, ReadOnlyConfig, Int32) Declaration public BenchmarkBuildInfo(Benchmark benchmark, ReadOnlyConfig config, int id) Parameters Type Name Description Benchmark benchmark ReadOnlyConfig config System.Int32 id Properties Benchmark Declaration public Benchmark Benchmark { get; } Property Value Type Description Benchmark Config Declaration public ReadOnlyConfig Config { get; } Property Value Type Description ReadOnlyConfig Id Declaration public BenchmarkId Id { get; } Property Value Type Description BenchmarkId"
  },
  "api/BenchmarkDotNet.Running.BenchmarkConverter.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkConverter.html",
    "title": "Class BenchmarkConverter | BenchmarkDotNet",
    "keywords": "Class BenchmarkConverter Inheritance System.Object BenchmarkConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public static class BenchmarkConverter Methods GetFullConfig(Type, IConfig) Declaration public static ReadOnlyConfig GetFullConfig(Type type, IConfig config) Parameters Type Name Description System.Type type IConfig config Returns Type Description ReadOnlyConfig MethodsToBenchmarks(Type, MethodInfo[], IConfig) Declaration public static BenchmarkRunInfo MethodsToBenchmarks(Type containingType, MethodInfo[] benchmarkMethods, IConfig config = null) Parameters Type Name Description System.Type containingType System.Reflection.MethodInfo [] benchmarkMethods IConfig config Returns Type Description BenchmarkRunInfo SourceToBenchmarks(String, IConfig) Declaration public static BenchmarkRunInfo[] SourceToBenchmarks(string source, IConfig config = null) Parameters Type Name Description System.String source IConfig config Returns Type Description BenchmarkRunInfo [] TypeToBenchmarks(Type, IConfig) Declaration public static BenchmarkRunInfo TypeToBenchmarks(Type type, IConfig config = null) Parameters Type Name Description System.Type type IConfig config Returns Type Description BenchmarkRunInfo UrlToBenchmarks(String, IConfig) Declaration public static BenchmarkRunInfo[] UrlToBenchmarks(string url, IConfig config = null) Parameters Type Name Description System.String url IConfig config Returns Type Description BenchmarkRunInfo []"
  },
  "api/BenchmarkDotNet.Running.BenchmarkId.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkId.html",
    "title": "Struct BenchmarkId | BenchmarkDotNet",
    "keywords": "Struct BenchmarkId represents an internal entity used to identify a benchmark within an executable with multiple benchmarks Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public struct BenchmarkId Constructors BenchmarkId(Int32) Declaration public BenchmarkId(int value) Parameters Type Name Description System.Int32 value Properties Value Declaration public int Value { get; } Property Value Type Description System.Int32 Methods Equals(BenchmarkId) Declaration public bool Equals(BenchmarkId other) Parameters Type Name Description BenchmarkId other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() ToArgument() Declaration public string ToArgument() Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/BenchmarkDotNet.Toolchains.Executor.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Executor.html",
    "title": "Class Executor | BenchmarkDotNet",
    "keywords": "Class Executor Inheritance System.Object Executor Implements IExecutor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public class Executor : IExecutor Methods Execute(ExecuteParameters) Declaration public ExecuteResult Execute(ExecuteParameters executeParameters) Parameters Type Name Description ExecuteParameters executeParameters Returns Type Description ExecuteResult Implements IExecutor"
  },
  "api/BenchmarkDotNet.Toolchains.GeneratorBase.html": {
    "href": "api/BenchmarkDotNet.Toolchains.GeneratorBase.html",
    "title": "Class GeneratorBase | BenchmarkDotNet",
    "keywords": "Class GeneratorBase Inheritance System.Object GeneratorBase DotNetCliGenerator Generator Implements IGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public abstract class GeneratorBase : IGenerator Methods CopyAllRequiredFiles(ArtifactsPaths) Declaration protected virtual void CopyAllRequiredFiles(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths GenerateBuildScript(BuildPartition, ArtifactsPaths) Declaration protected abstract void GenerateBuildScript(BuildPartition buildPartition, ArtifactsPaths artifactsPaths) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths GenerateNuGetConfig(ArtifactsPaths) Declaration protected virtual void GenerateNuGetConfig(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths GenerateProject(BuildPartition, ILogger, String) Declaration public GenerateResult GenerateProject(BuildPartition buildPartition, ILogger logger, string rootArtifactsFolderPath) Parameters Type Name Description BuildPartition buildPartition ILogger logger System.String rootArtifactsFolderPath Returns Type Description GenerateResult GenerateProject(BuildPartition, ArtifactsPaths, ILogger) Declaration protected virtual void GenerateProject(BuildPartition buildPartition, ArtifactsPaths artifactsPaths, ILogger logger) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths ILogger logger GetArtifactsToCleanup(ArtifactsPaths) Declaration protected abstract string[] GetArtifactsToCleanup(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Returns Type Description System.String [] GetBinariesDirectoryPath(String, String) Declaration protected virtual string GetBinariesDirectoryPath(string buildArtifactsDirectoryPath, string configuration) Parameters Type Name Description System.String buildArtifactsDirectoryPath System.String configuration Returns Type Description System.String GetBuildArtifactsDirectoryPath(BuildPartition, String) Declaration protected abstract string GetBuildArtifactsDirectoryPath(BuildPartition assemblyLocation, string programName) Parameters Type Name Description BuildPartition assemblyLocation System.String programName Returns Type Description System.String GetExecutableExtension() Declaration protected virtual string GetExecutableExtension() Returns Type Description System.String GetPackagesDirectoryPath(String) Declaration protected virtual string GetPackagesDirectoryPath(string buildArtifactsDirectoryPath) Parameters Type Name Description System.String buildArtifactsDirectoryPath Returns Type Description System.String GetProjectFilePath(String) Declaration protected virtual string GetProjectFilePath(string binariesDirectoryPath) Parameters Type Name Description System.String binariesDirectoryPath Returns Type Description System.String Implements IGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.IBuilder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.IBuilder.html",
    "title": "Interface IBuilder | BenchmarkDotNet",
    "keywords": "Interface IBuilder Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public interface IBuilder Methods Build(GenerateResult, BuildPartition, ILogger) Declaration BuildResult Build(GenerateResult generateResult, BuildPartition buildPartition, ILogger logger) Parameters Type Name Description GenerateResult generateResult BuildPartition buildPartition ILogger logger Returns Type Description BuildResult"
  },
  "api/BenchmarkDotNet.Toolchains.IExecutor.html": {
    "href": "api/BenchmarkDotNet.Toolchains.IExecutor.html",
    "title": "Interface IExecutor | BenchmarkDotNet",
    "keywords": "Interface IExecutor Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public interface IExecutor Methods Execute(ExecuteParameters) Declaration ExecuteResult Execute(ExecuteParameters executeParameters) Parameters Type Name Description ExecuteParameters executeParameters Returns Type Description ExecuteResult"
  },
  "api/BenchmarkDotNet.Validators.BaselineValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.BaselineValidator.html",
    "title": "Class BaselineValidator | BenchmarkDotNet",
    "keywords": "Class BaselineValidator Inheritance System.Object BaselineValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class BaselineValidator : IValidator Fields FailOnError Declaration public static readonly BaselineValidator FailOnError Field Value Type Description BaselineValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters input) Parameters Type Name Description ValidationParameters input Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.CompilationValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.CompilationValidator.html",
    "title": "Class CompilationValidator | BenchmarkDotNet",
    "keywords": "Class CompilationValidator Inheritance System.Object CompilationValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class CompilationValidator : IValidator Fields Default Declaration public static readonly IValidator Default Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.ConfigValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.ConfigValidator.html",
    "title": "Class ConfigValidator | BenchmarkDotNet",
    "keywords": "Class ConfigValidator Inheritance System.Object ConfigValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class ConfigValidator : IValidator Fields Default Declaration public static readonly IValidator Default Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.DiagnosersValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.DiagnosersValidator.html",
    "title": "Class DiagnosersValidator | BenchmarkDotNet",
    "keywords": "Class DiagnosersValidator Inheritance System.Object DiagnosersValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class DiagnosersValidator : IValidator Fields Default Declaration public static readonly IValidator Default Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Analysers.IAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.IAnalyser.html",
    "title": "Interface IAnalyser | BenchmarkDotNet",
    "keywords": "Interface IAnalyser Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public interface IAnalyser Properties Id Declaration string Id { get; } Property Value Type Description System.String Methods Analyse(Summary) Declaration IEnumerable<Conclusion> Analyse(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion >"
  },
  "api/BenchmarkDotNet.Attributes.AllCategoriesFilterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.AllCategoriesFilterAttribute.html",
    "title": "Class AllCategoriesFilterAttribute | BenchmarkDotNet",
    "keywords": "Class AllCategoriesFilterAttribute Inheritance System.Object System.Attribute FilterConfigBaseAttribute AllCategoriesFilterAttribute Implements IConfigSource Inherited Members FilterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class AllCategoriesFilterAttribute : FilterConfigBaseAttribute, IConfigSource Constructors AllCategoriesFilterAttribute() Declaration public AllCategoriesFilterAttribute() AllCategoriesFilterAttribute(String[]) Declaration public AllCategoriesFilterAttribute(params string[] targetCategories) Parameters Type Name Description System.String [] targetCategories Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.BenchmarkAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.BenchmarkAttribute.html",
    "title": "Class BenchmarkAttribute | BenchmarkDotNet",
    "keywords": "Class BenchmarkAttribute Inheritance System.Object System.Attribute BenchmarkAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class BenchmarkAttribute : Attribute Properties Baseline Declaration public bool Baseline { get; set; } Property Value Type Description System.Boolean Description Declaration public string Description { get; set; } Property Value Type Description System.String OperationsPerInvoke Declaration public int OperationsPerInvoke { get; set; } Property Value Type Description System.Int32"
  },
  "api/BenchmarkDotNet.Attributes.CoreJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.CoreJobAttribute.html",
    "title": "Class CoreJobAttribute | BenchmarkDotNet",
    "keywords": "Class CoreJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute CoreJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class CoreJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors CoreJobAttribute(Boolean) Declaration public CoreJobAttribute(bool isBaseline = false) Parameters Type Name Description System.Boolean isBaseline Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.DryJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.DryJobAttribute.html",
    "title": "Class DryJobAttribute | BenchmarkDotNet",
    "keywords": "Class DryJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute DryJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class DryJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors DryJobAttribute() Declaration public DryJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.GenericTypeArgumentsAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.GenericTypeArgumentsAttribute.html",
    "title": "Class GenericTypeArgumentsAttribute | BenchmarkDotNet",
    "keywords": "Class GenericTypeArgumentsAttribute Inheritance System.Object System.Attribute GenericTypeArgumentsAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class GenericTypeArgumentsAttribute : Attribute Constructors GenericTypeArgumentsAttribute() Declaration public GenericTypeArgumentsAttribute() GenericTypeArgumentsAttribute(Type[]) Declaration public GenericTypeArgumentsAttribute(params Type[] genericTypeArguments) Parameters Type Name Description System.Type [] genericTypeArguments Properties GenericTypeArguments Declaration public Type[] GenericTypeArguments { get; } Property Value Type Description System.Type []"
  },
  "api/BenchmarkDotNet.Attributes.IterationCleanupAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.IterationCleanupAttribute.html",
    "title": "Class IterationCleanupAttribute | BenchmarkDotNet",
    "keywords": "Class IterationCleanupAttribute Marks method to be executed after each benchmark iteration. Inheritance System.Object System.Attribute TargetedAttribute IterationCleanupAttribute Inherited Members TargetedAttribute.Target System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class IterationCleanupAttribute : TargetedAttribute"
  },
  "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.html",
    "title": "Class JsonExporterAttribute | BenchmarkDotNet",
    "keywords": "Class JsonExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute JsonExporterAttribute JsonExporterAttribute.BriefAttribute JsonExporterAttribute.BriefCompressed JsonExporterAttribute.Full JsonExporterAttribute.FullCompressed Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class JsonExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors JsonExporterAttribute(IExporter) Declaration protected JsonExporterAttribute(IExporter exporter) Parameters Type Name Description IExporter exporter JsonExporterAttribute(String, Boolean, Boolean) Declaration public JsonExporterAttribute(string fileNameSuffix = \"\", bool indentJson = false, bool excludeMeasurements = false) Parameters Type Name Description System.String fileNameSuffix System.Boolean indentJson System.Boolean excludeMeasurements Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MaxColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MaxColumnAttribute.html",
    "title": "Class MaxColumnAttribute | BenchmarkDotNet",
    "keywords": "Class MaxColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute MaxColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MaxColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors MaxColumnAttribute() Declaration public MaxColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MeanColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MeanColumnAttribute.html",
    "title": "Class MeanColumnAttribute | BenchmarkDotNet",
    "keywords": "Class MeanColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute MeanColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MeanColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors MeanColumnAttribute() Declaration public MeanColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ReturnValueValidatorAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ReturnValueValidatorAttribute.html",
    "title": "Class ReturnValueValidatorAttribute | BenchmarkDotNet",
    "keywords": "Class ReturnValueValidatorAttribute Inheritance System.Object System.Attribute ValidatorConfigBaseAttribute ReturnValueValidatorAttribute Implements IConfigSource Inherited Members ValidatorConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ReturnValueValidatorAttribute : ValidatorConfigBaseAttribute, IConfigSource Constructors ReturnValueValidatorAttribute() Declaration public ReturnValueValidatorAttribute() ReturnValueValidatorAttribute(Boolean) Declaration public ReturnValueValidatorAttribute(bool failOnError) Parameters Type Name Description System.Boolean failOnError Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.RPlotExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.RPlotExporterAttribute.html",
    "title": "Class RPlotExporterAttribute | BenchmarkDotNet",
    "keywords": "Class RPlotExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute RPlotExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class RPlotExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors RPlotExporterAttribute() Declaration public RPlotExporterAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.Full.html": {
    "href": "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.Full.html",
    "title": "Class XmlExporterAttribute.Full | BenchmarkDotNet",
    "keywords": "Class XmlExporterAttribute.Full Inheritance System.Object System.Attribute ExporterConfigBaseAttribute XmlExporterAttribute XmlExporterAttribute.Full Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Full : XmlExporterAttribute, IConfigSource Constructors Full() Declaration public Full() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Toolchains.CustomCoreClr.Generator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CustomCoreClr.Generator.html",
    "title": "Class Generator | BenchmarkDotNet",
    "keywords": "Class Generator generates new csproj file for self-contained .NET Core app which uses given CoreCLR NuGet packages based on https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingDotNetCli.md and https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md Inheritance System.Object GeneratorBase DotNetCliGenerator CsProjGenerator Generator Implements IGenerator Inherited Members CsProjGenerator.RuntimeFrameworkVersion CsProjGenerator.GetProjectFilePath(String) CsProjGenerator.GetRuntimeSettings(GcMode, IResolver) CsProjGenerator.GetProjectFilePath(Type, ILogger) DotNetCliGenerator.TargetFrameworkMoniker DotNetCliGenerator.PlatformProvider DotNetCliGenerator.Runtime DotNetCliGenerator.ExtraDependencies DotNetCliGenerator.Imports DotNetCliGenerator.CopyAllRequiredFiles(ArtifactsPaths) DotNetCliGenerator.SetPlatform(String, String) DotNetCliGenerator.SetCodeFileName(String, String) DotNetCliGenerator.SetTargetFrameworkMoniker(String, String) GeneratorBase.GenerateProject(BuildPartition, ILogger, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.CustomCoreClr Assembly : BenchmarkDotNet.dll Syntax public class Generator : CsProjGenerator, IGenerator Methods GenerateBuildScript(BuildPartition, ArtifactsPaths) Declaration protected override void GenerateBuildScript(BuildPartition buildPartition, ArtifactsPaths artifactsPaths) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths Overrides DotNetCliGenerator.GenerateBuildScript(BuildPartition, ArtifactsPaths) GenerateNuGetConfig(ArtifactsPaths) Declaration protected override void GenerateNuGetConfig(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Overrides GeneratorBase.GenerateNuGetConfig(ArtifactsPaths) GenerateProject(BuildPartition, ArtifactsPaths, ILogger) Declaration protected override void GenerateProject(BuildPartition buildPartition, ArtifactsPaths artifactsPaths, ILogger logger) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths ILogger logger Overrides CsProjGenerator.GenerateProject(BuildPartition, ArtifactsPaths, ILogger) GetArtifactsToCleanup(ArtifactsPaths) Declaration protected override string[] GetArtifactsToCleanup(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Returns Type Description System.String [] Overrides DotNetCliGenerator.GetArtifactsToCleanup(ArtifactsPaths) GetBinariesDirectoryPath(String, String) Declaration protected override string GetBinariesDirectoryPath(string buildArtifactsDirectoryPath, string configuration) Parameters Type Name Description System.String buildArtifactsDirectoryPath System.String configuration Returns Type Description System.String Overrides CsProjGenerator.GetBinariesDirectoryPath(String, String) GetBuildArtifactsDirectoryPath(BuildPartition, String) Declaration protected override string GetBuildArtifactsDirectoryPath(BuildPartition buildPartition, string programName) Parameters Type Name Description BuildPartition buildPartition System.String programName Returns Type Description System.String Overrides CsProjGenerator.GetBuildArtifactsDirectoryPath(BuildPartition, String) GetExecutableExtension() Declaration protected override string GetExecutableExtension() Returns Type Description System.String Overrides DotNetCliGenerator.GetExecutableExtension() GetPackagesDirectoryPath(String) Declaration protected override string GetPackagesDirectoryPath(string buildArtifactsDirectoryPath) Parameters Type Name Description System.String buildArtifactsDirectoryPath Returns Type Description System.String Overrides GeneratorBase.GetPackagesDirectoryPath(String) Implements IGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.Results.GenerateResult.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Results.GenerateResult.html",
    "title": "Class GenerateResult | BenchmarkDotNet",
    "keywords": "Class GenerateResult Inheritance System.Object GenerateResult BuildResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.Results Assembly : BenchmarkDotNet.dll Syntax public class GenerateResult Constructors GenerateResult(ArtifactsPaths, Boolean, Exception, IReadOnlyCollection<String>) Declaration public GenerateResult(ArtifactsPaths artifactsPaths, bool isGenerateSuccess, Exception generateException, IReadOnlyCollection<string> artifactsToCleanup) Parameters Type Name Description ArtifactsPaths artifactsPaths System.Boolean isGenerateSuccess System.Exception generateException System.Collections.Generic.IReadOnlyCollection < System.String > artifactsToCleanup Properties ArtifactsPaths Declaration public ArtifactsPaths ArtifactsPaths { get; } Property Value Type Description ArtifactsPaths ArtifactsToCleanup Declaration public IReadOnlyCollection<string> ArtifactsToCleanup { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.String > GenerateException Declaration public Exception GenerateException { get; } Property Value Type Description System.Exception IsGenerateSuccess Declaration public bool IsGenerateSuccess { get; } Property Value Type Description System.Boolean Methods Failure(ArtifactsPaths, IReadOnlyCollection<String>, Exception) Declaration public static GenerateResult Failure(ArtifactsPaths artifactsPaths, IReadOnlyCollection<string> artifactsToCleanup, Exception exception = null) Parameters Type Name Description ArtifactsPaths artifactsPaths System.Collections.Generic.IReadOnlyCollection < System.String > artifactsToCleanup System.Exception exception Returns Type Description GenerateResult Success(ArtifactsPaths, IReadOnlyCollection<String>) Declaration public static GenerateResult Success(ArtifactsPaths artifactsPaths, IReadOnlyCollection<string> artifactsToCleanup) Parameters Type Name Description ArtifactsPaths artifactsPaths System.Collections.Generic.IReadOnlyCollection < System.String > artifactsToCleanup Returns Type Description GenerateResult ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Toolchains.Results.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Results.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.Results | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.Results Classes BuildResult ExecuteResult GenerateResult"
  },
  "api/BenchmarkDotNet.Toolchains.Roslyn.Builder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Roslyn.Builder.html",
    "title": "Class Builder | BenchmarkDotNet",
    "keywords": "Class Builder Inheritance System.Object Builder Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.Roslyn Assembly : BenchmarkDotNet.dll Syntax public class Builder : IBuilder Methods Build(GenerateResult, BuildPartition, ILogger) Declaration public BuildResult Build(GenerateResult generateResult, BuildPartition buildPartition, ILogger logger) Parameters Type Name Description GenerateResult generateResult BuildPartition buildPartition ILogger logger Returns Type Description BuildResult Implements IBuilder"
  },
  "api/BenchmarkDotNet.Toolchains.Roslyn.Generator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Roslyn.Generator.html",
    "title": "Class Generator | BenchmarkDotNet",
    "keywords": "Class Generator Inheritance System.Object GeneratorBase Generator Implements IGenerator Inherited Members GeneratorBase.GenerateProject(BuildPartition, ILogger, String) GeneratorBase.GetBinariesDirectoryPath(String, String) GeneratorBase.GetExecutableExtension() GeneratorBase.GetProjectFilePath(String) GeneratorBase.CopyAllRequiredFiles(ArtifactsPaths) GeneratorBase.GenerateNuGetConfig(ArtifactsPaths) GeneratorBase.GenerateProject(BuildPartition, ArtifactsPaths, ILogger) GeneratorBase.GetPackagesDirectoryPath(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.Roslyn Assembly : BenchmarkDotNet.dll Syntax public class Generator : GeneratorBase, IGenerator Methods GenerateBuildScript(BuildPartition, ArtifactsPaths) Declaration protected override void GenerateBuildScript(BuildPartition buildPartition, ArtifactsPaths artifactsPaths) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths Overrides GeneratorBase.GenerateBuildScript(BuildPartition, ArtifactsPaths) GetArtifactsToCleanup(ArtifactsPaths) Declaration protected override string[] GetArtifactsToCleanup(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Returns Type Description System.String [] Overrides GeneratorBase.GetArtifactsToCleanup(ArtifactsPaths) GetBuildArtifactsDirectoryPath(BuildPartition, String) Declaration protected override string GetBuildArtifactsDirectoryPath(BuildPartition buildPartition, string programName) Parameters Type Name Description BuildPartition buildPartition System.String programName Returns Type Description System.String Overrides GeneratorBase.GetBuildArtifactsDirectoryPath(BuildPartition, String) Implements IGenerator"
  },
  "api/BenchmarkDotNet.Analysers.EnvironmentAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.EnvironmentAnalyser.html",
    "title": "Class EnvironmentAnalyser | BenchmarkDotNet",
    "keywords": "Class EnvironmentAnalyser Inheritance System.Object AnalyserBase EnvironmentAnalyser Implements IAnalyser Inherited Members AnalyserBase.Analyse(Summary) AnalyserBase.CreateHint(String, BenchmarkReport) AnalyserBase.CreateWarning(String, BenchmarkReport) AnalyserBase.CreateError(String, BenchmarkReport) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class EnvironmentAnalyser : AnalyserBase, IAnalyser Fields Default Declaration public static readonly IAnalyser Default Field Value Type Description IAnalyser Properties Id Declaration public override string Id { get; } Property Value Type Description System.String Overrides AnalyserBase.Id Methods AnalyseReport(BenchmarkReport, Summary) Declaration public override IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseReport(BenchmarkReport, Summary) AnalyseSummary(Summary) Declaration public override IEnumerable<Conclusion> AnalyseSummary(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseSummary(Summary) Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Attributes.AllStatisticsColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.AllStatisticsColumnAttribute.html",
    "title": "Class AllStatisticsColumnAttribute | BenchmarkDotNet",
    "keywords": "Class AllStatisticsColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute AllStatisticsColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class AllStatisticsColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors AllStatisticsColumnAttribute() Declaration public AllStatisticsColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.BenchmarkCategoryAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.BenchmarkCategoryAttribute.html",
    "title": "Class BenchmarkCategoryAttribute | BenchmarkDotNet",
    "keywords": "Class BenchmarkCategoryAttribute Inheritance System.Object System.Attribute BenchmarkCategoryAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)] public class BenchmarkCategoryAttribute : Attribute Constructors BenchmarkCategoryAttribute() Declaration protected BenchmarkCategoryAttribute() BenchmarkCategoryAttribute(String[]) Declaration public BenchmarkCategoryAttribute(params string[] categories) Parameters Type Name Description System.String [] categories Properties Categories Declaration public string[] Categories { get; } Property Value Type Description System.String []"
  },
  "api/BenchmarkDotNet.Attributes.CoreRtJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.CoreRtJobAttribute.html",
    "title": "Class CoreRtJobAttribute | BenchmarkDotNet",
    "keywords": "Class CoreRtJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute CoreRtJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class CoreRtJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors CoreRtJobAttribute(Boolean) Declaration public CoreRtJobAttribute(bool isBaseline = false) Parameters Type Name Description System.Boolean isBaseline Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.DryMonoJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.DryMonoJobAttribute.html",
    "title": "Class DryMonoJobAttribute | BenchmarkDotNet",
    "keywords": "Class DryMonoJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute DryMonoJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class DryMonoJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors DryMonoJobAttribute() Declaration public DryMonoJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.GlobalCleanupAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.GlobalCleanupAttribute.html",
    "title": "Class GlobalCleanupAttribute | BenchmarkDotNet",
    "keywords": "Class GlobalCleanupAttribute Marks method to be executed after all benchmark iterations. It's going to be executed only once, after all benchmark runs. Inheritance System.Object System.Attribute TargetedAttribute GlobalCleanupAttribute CleanupAttribute Inherited Members TargetedAttribute.Target System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class GlobalCleanupAttribute : TargetedAttribute"
  },
  "api/BenchmarkDotNet.Attributes.IterationsColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.IterationsColumnAttribute.html",
    "title": "Class IterationsColumnAttribute | BenchmarkDotNet",
    "keywords": "Class IterationsColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute IterationsColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class IterationsColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors IterationsColumnAttribute() Declaration public IterationsColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.KeepBenchmarkFilesAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.KeepBenchmarkFilesAttribute.html",
    "title": "Class KeepBenchmarkFilesAttribute | BenchmarkDotNet",
    "keywords": "Class KeepBenchmarkFilesAttribute Inheritance System.Object System.Attribute KeepBenchmarkFilesAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class KeepBenchmarkFilesAttribute : Attribute, IConfigSource Constructors KeepBenchmarkFilesAttribute(Boolean) Declaration public KeepBenchmarkFilesAttribute(bool value = true) Parameters Type Name Description System.Boolean value Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Value Declaration public bool Value { get; } Property Value Type Description System.Boolean Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MedianColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MedianColumnAttribute.html",
    "title": "Class MedianColumnAttribute | BenchmarkDotNet",
    "keywords": "Class MedianColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute MedianColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MedianColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors MedianColumnAttribute() Declaration public MedianColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MediumRunJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MediumRunJobAttribute.html",
    "title": "Class MediumRunJobAttribute | BenchmarkDotNet",
    "keywords": "Class MediumRunJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute MediumRunJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MediumRunJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors MediumRunJobAttribute() Declaration public MediumRunJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.RyuJitX64JobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.RyuJitX64JobAttribute.html",
    "title": "Class RyuJitX64JobAttribute | BenchmarkDotNet",
    "keywords": "Class RyuJitX64JobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute RyuJitX64JobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class RyuJitX64JobAttribute : JobConfigBaseAttribute, IConfigSource Constructors RyuJitX64JobAttribute() Declaration public RyuJitX64JobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.RyuJitX86JobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.RyuJitX86JobAttribute.html",
    "title": "Class RyuJitX86JobAttribute | BenchmarkDotNet",
    "keywords": "Class RyuJitX86JobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute RyuJitX86JobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class RyuJitX86JobAttribute : JobConfigBaseAttribute, IConfigSource Constructors RyuJitX86JobAttribute() Declaration public RyuJitX86JobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.html",
    "title": "Class XmlExporterAttribute | BenchmarkDotNet",
    "keywords": "Class XmlExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute XmlExporterAttribute XmlExporterAttribute.Brief XmlExporterAttribute.BriefCompressed XmlExporterAttribute.Full XmlExporterAttribute.FullCompressed Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class XmlExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors XmlExporterAttribute(IExporter) Declaration public XmlExporterAttribute(IExporter exporter) Parameters Type Name Description IExporter exporter XmlExporterAttribute(String, Boolean, Boolean) Declaration public XmlExporterAttribute(string fileNameSuffix = \"\", bool indentXml = false, bool excludeMeasurements = false) Parameters Type Name Description System.String fileNameSuffix System.Boolean indentXml System.Boolean excludeMeasurements Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.html": {
    "href": "api/BenchmarkDotNet.Attributes.html",
    "title": "Namespace BenchmarkDotNet.Attributes | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Attributes Classes AllCategoriesFilterAttribute AllStatisticsColumnAttribute AnyCategoriesFilterAttribute ArgumentsAttribute ArgumentsSourceAttribute ArtifactsPathAttribute AsciiDocExporterAttribute BenchmarkAttribute BenchmarkCategoryAttribute CategoriesColumnAttribute CleanupAttribute Marks method to be executed after all benchmark iterations. It's going to be executed only once, after all benchmark runs. ClrJobAttribute ColumnConfigBaseAttribute ConfidenceIntervalErrorColumnAttribute ConfigAttribute CoreJobAttribute CoreRtJobAttribute CsvExporterAttribute CsvMeasurementsExporterAttribute DisassemblyDiagnoserAttribute DryClrJobAttribute DryCoreJobAttribute DryCoreRtJobAttribute DryJobAttribute DryMonoJobAttribute EncodingAttribute EncodingAttribute.ASCII EncodingAttribute.Unicode ExecutionValidatorAttribute ExporterConfigBaseAttribute FilterConfigBaseAttribute GenericTypeArgumentsAttribute GlobalCleanupAttribute Marks method to be executed after all benchmark iterations. It's going to be executed only once, after all benchmark runs. GlobalSetupAttribute Marks method to be executed before all benchmark iterations. It's going to be executed only once, just before warm up. GroupBenchmarksByAttribute HardwareCountersAttribute HtmlExporterAttribute InProcessAttribute IsBaselineColumnAttribute IterationCleanupAttribute Marks method to be executed after each benchmark iteration. IterationsColumnAttribute IterationSetupAttribute Marks method to be executed before each benchmark iteration. JobConfigBaseAttribute JsonExporterAttribute JsonExporterAttribute.BriefAttribute JsonExporterAttribute.BriefCompressed JsonExporterAttribute.Full JsonExporterAttribute.FullCompressed KeepBenchmarkFilesAttribute KurtosisColumnAttribute LegacyJitX64JobAttribute LegacyJitX86JobAttribute LogicalGroupColumnAttribute LongRunJobAttribute MarkdownExporterAttribute MarkdownExporterAttribute.Atlassian MarkdownExporterAttribute.Default MarkdownExporterAttribute.GitHub MarkdownExporterAttribute.StackOverflow MaxColumnAttribute MeanColumnAttribute MedianColumnAttribute MediumRunJobAttribute MemoryDiagnoserAttribute MinColumnAttribute MonoJobAttribute MValueColumnAttribute Prints mvalue. See http://www.brendangregg.com/FrequencyTrails/modes.html NamespaceColumnAttribute Add a column with the target method namespace. OrderProviderAttribute ParamsAttribute ParamsSourceAttribute PlainExporterAttribute Q1ColumnAttribute Q3ColumnAttribute RankColumnAttribute ReturnValueValidatorAttribute RPlotExporterAttribute RyuJitX64JobAttribute RyuJitX86JobAttribute SetupAttribute Marks method to be executed before all benchmark iterations. It's going to be executed only once, just before warm up. ShortRunJobAttribute SimpleJobAttribute SkewnessColumnAttribute StdDevColumnAttribute StdErrorColumnAttribute TargetedAttribute Base class for attributes that are targeted at one method ValidatorConfigBaseAttribute VeryLongRunJobAttribute WelchTTestPValueColumnAttribute XmlExporterAttribute XmlExporterAttribute.Brief XmlExporterAttribute.BriefCompressed XmlExporterAttribute.Full XmlExporterAttribute.FullCompressed"
  },
  "api/BenchmarkDotNet.Code.html": {
    "href": "api/BenchmarkDotNet.Code.html",
    "title": "Namespace BenchmarkDotNet.Code | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Code Classes ArrayParam<T> Interfaces IParam"
  },
  "api/BenchmarkDotNet.Columns.BaselineScaledColumn.DiffKind.html": {
    "href": "api/BenchmarkDotNet.Columns.BaselineScaledColumn.DiffKind.html",
    "title": "Enum BaselineScaledColumn.DiffKind | BenchmarkDotNet",
    "keywords": "Enum BaselineScaledColumn.DiffKind Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public enum DiffKind Fields Name Description Mean StdDev WelchTTestPValue"
  },
  "api/BenchmarkDotNet.Columns.SimpleColumnProvider.html": {
    "href": "api/BenchmarkDotNet.Columns.SimpleColumnProvider.html",
    "title": "Class SimpleColumnProvider | BenchmarkDotNet",
    "keywords": "Class SimpleColumnProvider Inheritance System.Object SimpleColumnProvider Implements IColumnProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class SimpleColumnProvider : IColumnProvider Constructors SimpleColumnProvider(IColumn[]) Declaration public SimpleColumnProvider(params IColumn[] columns) Parameters Type Name Description IColumn [] columns Methods GetColumns(Summary) Declaration public IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < IColumn > Implements IColumnProvider"
  },
  "api/BenchmarkDotNet.Columns.SizeUnit.html": {
    "href": "api/BenchmarkDotNet.Columns.SizeUnit.html",
    "title": "Class SizeUnit | BenchmarkDotNet",
    "keywords": "Class SizeUnit Inheritance System.Object SizeUnit Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class SizeUnit Constructors SizeUnit(String, String, Int64) Declaration public SizeUnit(string name, string description, long byteAmount) Parameters Type Name Description System.String name System.String description System.Int64 byteAmount Fields All Declaration public static readonly SizeUnit[] All Field Value Type Description SizeUnit [] B Declaration public static readonly SizeUnit B Field Value Type Description SizeUnit BytesInKiloByte Declaration public const long BytesInKiloByte = 1024L Field Value Type Description System.Int64 GB Declaration public static readonly SizeUnit GB Field Value Type Description SizeUnit KB Declaration public static readonly SizeUnit KB Field Value Type Description SizeUnit MB Declaration public static readonly SizeUnit MB Field Value Type Description SizeUnit TB Declaration public static readonly SizeUnit TB Field Value Type Description SizeUnit Properties ByteAmount Declaration public long ByteAmount { get; } Property Value Type Description System.Int64 Description Declaration public string Description { get; } Property Value Type Description System.String Name Declaration public string Name { get; } Property Value Type Description System.String Methods Convert(Int64, SizeUnit, SizeUnit) Declaration public static double Convert(long value, SizeUnit from, SizeUnit to) Parameters Type Name Description System.Int64 value SizeUnit from SizeUnit to Returns Type Description System.Double GetBestSizeUnit(Int64[]) Declaration public static SizeUnit GetBestSizeUnit(params long[] values) Parameters Type Name Description System.Int64 [] values Returns Type Description SizeUnit"
  },
  "api/BenchmarkDotNet.Configs.ReadOnlyConfig.html": {
    "href": "api/BenchmarkDotNet.Configs.ReadOnlyConfig.html",
    "title": "Class ReadOnlyConfig | BenchmarkDotNet",
    "keywords": "Class ReadOnlyConfig Inheritance System.Object ReadOnlyConfig Implements IConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public class ReadOnlyConfig : IConfig Constructors ReadOnlyConfig(IConfig) Declaration public ReadOnlyConfig(IConfig config) Parameters Type Name Description IConfig config Properties ArtifactsPath Declaration public string ArtifactsPath { get; } Property Value Type Description System.String Encoding Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding KeepBenchmarkFiles Declaration public bool KeepBenchmarkFiles { get; } Property Value Type Description System.Boolean UnionRule Declaration public ConfigUnionRule UnionRule { get; } Property Value Type Description ConfigUnionRule Methods GetAnalysers() Declaration public IEnumerable<IAnalyser> GetAnalysers() Returns Type Description System.Collections.Generic.IEnumerable < IAnalyser > GetColumnProviders() Declaration public IEnumerable<IColumnProvider> GetColumnProviders() Returns Type Description System.Collections.Generic.IEnumerable < IColumnProvider > GetDiagnosers() Declaration public IEnumerable<IDiagnoser> GetDiagnosers() Returns Type Description System.Collections.Generic.IEnumerable < IDiagnoser > GetExporters() Declaration public IEnumerable<IExporter> GetExporters() Returns Type Description System.Collections.Generic.IEnumerable < IExporter > GetFilters() Declaration public IEnumerable<IFilter> GetFilters() Returns Type Description System.Collections.Generic.IEnumerable < IFilter > GetHardwareCounters() Declaration public IEnumerable<HardwareCounter> GetHardwareCounters() Returns Type Description System.Collections.Generic.IEnumerable < HardwareCounter > GetJobs() Declaration public IEnumerable<Job> GetJobs() Returns Type Description System.Collections.Generic.IEnumerable < Job > GetLoggers() Declaration public IEnumerable<ILogger> GetLoggers() Returns Type Description System.Collections.Generic.IEnumerable < ILogger > GetLogicalGroupRules() Declaration public IEnumerable<BenchmarkLogicalGroupRule> GetLogicalGroupRules() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkLogicalGroupRule > GetOrderProvider() Declaration public IOrderProvider GetOrderProvider() Returns Type Description IOrderProvider GetSummaryStyle() Declaration public ISummaryStyle GetSummaryStyle() Returns Type Description ISummaryStyle GetValidators() Declaration public IEnumerable<IValidator> GetValidators() Returns Type Description System.Collections.Generic.IEnumerable < IValidator > Implements IConfig Extension Methods ConfigExtensions.GetCompositeLogger(IConfig) ConfigExtensions.GetCompositeExporter(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig, Benchmark, RunMode) ConfigExtensions.GetCompositeAnalyser(IConfig) ConfigExtensions.GetCompositeValidator(IConfig) ConfigExtensions.With(IConfig, IColumn[]) ConfigExtensions.With(IConfig, IColumnProvider[]) ConfigExtensions.With(IConfig, ILogger[]) ConfigExtensions.With(IConfig, IExporter[]) ConfigExtensions.With(IConfig, IDiagnoser[]) ConfigExtensions.With(IConfig, IAnalyser[]) ConfigExtensions.With(IConfig, IValidator[]) ConfigExtensions.With(IConfig, Job[]) ConfigExtensions.With(IConfig, IOrderProvider) ConfigExtensions.With(IConfig, HardwareCounter[]) ConfigExtensions.With(IConfig, IFilter[]) ConfigExtensions.With(IConfig, Encoding) ConfigExtensions.KeepBenchmarkFiles(IConfig, Boolean) ConfigExtensions.RemoveBenchmarkFiles(IConfig) ConfigExtensions.WithArtifactsPath(IConfig, String) ConfigExtensions.With(IConfig, BenchmarkLogicalGroupRule[]) ConfigExtensions.AsReadOnly(IConfig) ConfigExtensions.HasMemoryDiagnoser(IConfig)"
  },
  "api/BenchmarkDotNet.Configs.html": {
    "href": "api/BenchmarkDotNet.Configs.html",
    "title": "Namespace BenchmarkDotNet.Configs | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Configs Classes ConfigExtensions ConfigParser DefaultConfig ManualConfig ReadOnlyConfig Interfaces IConfig IConfigSource Enums BenchmarkLogicalGroupRule ConfigUnionRule"
  },
  "api/BenchmarkDotNet.Diagnosers.IDiagnoser.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.IDiagnoser.html",
    "title": "Interface IDiagnoser | BenchmarkDotNet",
    "keywords": "Interface IDiagnoser Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public interface IDiagnoser Properties Analysers Declaration IEnumerable<IAnalyser> Analysers { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAnalyser > Exporters Declaration IEnumerable<IExporter> Exporters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExporter > Ids Declaration IEnumerable<string> Ids { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Methods DisplayResults(ILogger) Declaration void DisplayResults(ILogger logger) Parameters Type Name Description ILogger logger GetColumnProvider() Declaration IColumnProvider GetColumnProvider() Returns Type Description IColumnProvider GetRunMode(Benchmark) Declaration RunMode GetRunMode(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description RunMode Handle(HostSignal, DiagnoserActionParameters) Declaration void Handle(HostSignal signal, DiagnoserActionParameters parameters) Parameters Type Name Description HostSignal signal DiagnoserActionParameters parameters ProcessResults(DiagnoserResults) Declaration void ProcessResults(DiagnoserResults results) Parameters Type Name Description DiagnoserResults results Validate(ValidationParameters) Declaration IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError >"
  },
  "api/BenchmarkDotNet.Diagnosers.IL.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.IL.html",
    "title": "Class IL | BenchmarkDotNet",
    "keywords": "Class IL Inheritance System.Object Code IL Inherited Members Code.TextRepresentation Code.Comment System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class IL : Code Properties Offset Declaration public int Offset { get; set; } Property Value Type Description System.Int32"
  },
  "api/BenchmarkDotNet.Engines.Engine.html": {
    "href": "api/BenchmarkDotNet.Engines.Engine.html",
    "title": "Class Engine | BenchmarkDotNet",
    "keywords": "Class Engine Inheritance System.Object Engine Implements IEngine System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class Engine : IEngine, IDisposable Fields MinInvokeCount Declaration public const int MinInvokeCount = 4 Field Value Type Description System.Int32 Properties Dummy1Action Declaration public Action Dummy1Action { get; } Property Value Type Description System.Action Dummy2Action Declaration public Action Dummy2Action { get; } Property Value Type Description System.Action Dummy3Action Declaration public Action Dummy3Action { get; } Property Value Type Description System.Action Encoding Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding GlobalCleanupAction Declaration public Action GlobalCleanupAction { get; } Property Value Type Description System.Action GlobalSetupAction Declaration public Action GlobalSetupAction { get; } Property Value Type Description System.Action Host Declaration public IHost Host { get; } Property Value Type Description IHost IdleAction Declaration public Action<long> IdleAction { get; } Property Value Type Description System.Action < System.Int64 > IterationCleanupAction Declaration public Action IterationCleanupAction { get; } Property Value Type Description System.Action IterationSetupAction Declaration public Action IterationSetupAction { get; } Property Value Type Description System.Action MainAction Declaration public Action<long> MainAction { get; } Property Value Type Description System.Action < System.Int64 > OperationsPerInvoke Declaration public long OperationsPerInvoke { get; } Property Value Type Description System.Int64 Resolver Declaration public IResolver Resolver { get; } Property Value Type Description IResolver TargetJob Declaration public Job TargetJob { get; } Property Value Type Description Job Methods Dispose() Declaration public void Dispose() Run() Declaration public RunResults Run() Returns Type Description RunResults RunIteration(IterationData) Declaration public Measurement RunIteration(IterationData data) Parameters Type Name Description IterationData data Returns Type Description Measurement WriteLine() Declaration public void WriteLine() WriteLine(String) Declaration public void WriteLine(string text) Parameters Type Name Description System.String text Implements IEngine System.IDisposable"
  },
  "api/BenchmarkDotNet.Engines.EngineFactory.html": {
    "href": "api/BenchmarkDotNet.Engines.EngineFactory.html",
    "title": "Class EngineFactory | BenchmarkDotNet",
    "keywords": "Class EngineFactory Inheritance System.Object EngineFactory Implements IEngineFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class EngineFactory : IEngineFactory Methods CreateReadyToRun(EngineParameters) Declaration public IEngine CreateReadyToRun(EngineParameters engineParameters) Parameters Type Name Description EngineParameters engineParameters Returns Type Description IEngine Implements IEngineFactory"
  },
  "api/BenchmarkDotNet.Environments.InfrastructureResolver.html": {
    "href": "api/BenchmarkDotNet.Environments.InfrastructureResolver.html",
    "title": "Class InfrastructureResolver | BenchmarkDotNet",
    "keywords": "Class InfrastructureResolver Inheritance System.Object Resolver InfrastructureResolver Implements IResolver Inherited Members Resolver.Register<T>(Characteristic<T>, Func<T>) Resolver.Register<T>(Characteristic<T>, Func<CharacteristicObject, T>) Resolver.CanResolve(Characteristic) Resolver.Resolve(CharacteristicObject, Characteristic) Resolver.Resolve<T>(CharacteristicObject, Characteristic<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class InfrastructureResolver : Resolver, IResolver Fields Instance Declaration public static readonly IResolver Instance Field Value Type Description IResolver Implements IResolver"
  },
  "api/BenchmarkDotNet.Environments.Jit.html": {
    "href": "api/BenchmarkDotNet.Environments.Jit.html",
    "title": "Enum Jit | BenchmarkDotNet",
    "keywords": "Enum Jit Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public enum Jit Fields Name Description Default Default By default LegacyJit LegacyJIT Supported only for Full Framework Llvm LLVM Supported only for Mono RyuJit RyuJIT Full Framework or CoreCLR Extension Methods ConfigurationExtensions.ToConfig()"
  },
  "api/BenchmarkDotNet.Environments.MonoRuntime.html": {
    "href": "api/BenchmarkDotNet.Environments.MonoRuntime.html",
    "title": "Class MonoRuntime | BenchmarkDotNet",
    "keywords": "Class MonoRuntime Inheritance System.Object Runtime MonoRuntime Implements System.IEquatable < Runtime > System.IEquatable < MonoRuntime > Inherited Members Runtime.Clr Runtime.Mono Runtime.Core Runtime.CoreRT Runtime.Name Runtime.ToString() Runtime.Equals(Runtime) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class MonoRuntime : Runtime, IEquatable<Runtime>, IEquatable<MonoRuntime> Constructors MonoRuntime() Declaration public MonoRuntime() MonoRuntime(String, String) Declaration public MonoRuntime(string name, string customPath) Parameters Type Name Description System.String name System.String customPath Properties CustomPath Declaration public string CustomPath { get; } Property Value Type Description System.String Methods Equals(MonoRuntime) Declaration public bool Equals(MonoRuntime other) Parameters Type Name Description MonoRuntime other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Runtime.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Runtime.GetHashCode() Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/BenchmarkDotNet.Environments.OsBrandStringHelper.html": {
    "href": "api/BenchmarkDotNet.Environments.OsBrandStringHelper.html",
    "title": "Class OsBrandStringHelper | BenchmarkDotNet",
    "keywords": "Class OsBrandStringHelper Inheritance System.Object OsBrandStringHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class OsBrandStringHelper Methods Prettify(String, String, Nullable<Int32>) Transform an operation system name and version to a nice form for summary. Declaration public static string Prettify(string osName, string osVersion, int? windowsUbr = default(int? )) Parameters Type Name Description System.String osName Original operation system name System.String osVersion Original operation system version System.Nullable < System.Int32 > windowsUbr UBR (Update Build Revision), the revision number of Windows version (if available) Returns Type Description System.String Prettified operation system title PrettifyMacOSX(String, String) Declaration public static string PrettifyMacOSX(string systemVersion, string kernelVersion) Parameters Type Name Description System.String systemVersion System.String kernelVersion Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Exporters.Xml.XmlExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.Xml.XmlExporter.html",
    "title": "Class XmlExporter | BenchmarkDotNet",
    "keywords": "Class XmlExporter Inheritance System.Object ExporterBase XmlExporterBase XmlExporter Implements IExporter Inherited Members XmlExporterBase.FileExtension XmlExporterBase.ExportToLog(Summary, ILogger) ExporterBase.Name ExporterBase.Encoding ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Xml Assembly : BenchmarkDotNet.dll Syntax public class XmlExporter : XmlExporterBase, IExporter Constructors XmlExporter(String, Boolean, Boolean) Declaration public XmlExporter(string fileNameSuffix = \"\", bool indentXml = false, bool excludeMeasurements = false) Parameters Type Name Description System.String fileNameSuffix System.Boolean indentXml System.Boolean excludeMeasurements Fields Brief Declaration public static readonly IExporter Brief Field Value Type Description IExporter BriefCompressed Declaration public static readonly IExporter BriefCompressed Field Value Type Description IExporter Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Full Declaration public static readonly IExporter Full Field Value Type Description IExporter FullCompressed Declaration public static readonly IExporter FullCompressed Field Value Type Description IExporter Properties FileNameSuffix Declaration protected override string FileNameSuffix { get; } Property Value Type Description System.String Overrides ExporterBase.FileNameSuffix Methods Custom(String, Boolean, Boolean) Declaration public static IExporter Custom(string fileNameSuffix = \"\", bool indentXml = false, bool excludeMeasurements = false) Parameters Type Name Description System.String fileNameSuffix System.Boolean indentXml System.Boolean excludeMeasurements Returns Type Description IExporter Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.Xml.XmlExporterBase.html": {
    "href": "api/BenchmarkDotNet.Exporters.Xml.XmlExporterBase.html",
    "title": "Class XmlExporterBase | BenchmarkDotNet",
    "keywords": "Class XmlExporterBase Inheritance System.Object ExporterBase XmlExporterBase XmlExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Xml Assembly : BenchmarkDotNet.dll Syntax public abstract class XmlExporterBase : ExporterBase, IExporter Constructors XmlExporterBase(Boolean, Boolean) Declaration public XmlExporterBase(bool indentXml = false, bool excludeMeasurements = false) Parameters Type Name Description System.Boolean indentXml System.Boolean excludeMeasurements Properties FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.Xml.html": {
    "href": "api/BenchmarkDotNet.Exporters.Xml.html",
    "title": "Namespace BenchmarkDotNet.Exporters.Xml | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Exporters.Xml Classes XmlExporter XmlExporterBase"
  },
  "api/BenchmarkDotNet.Exporters.html": {
    "href": "api/BenchmarkDotNet.Exporters.html",
    "title": "Namespace BenchmarkDotNet.Exporters | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Exporters Classes AsciiDocExporter BenchmarkReportExporter CombinedDisassemblyExporter CompositeExporter DefaultExporters ExporterBase HtmlExporter InstructionPointerExporter MarkdownExporter PlainExporter PrettyDisassemblyExporter RawDisassemblyExporter RPlotExporter Interfaces IExporter Enums MarkdownExporter.MarkdownHighlightStrategy"
  },
  "api/BenchmarkDotNet.Horology.IClock.html": {
    "href": "api/BenchmarkDotNet.Horology.IClock.html",
    "title": "Interface IClock | BenchmarkDotNet",
    "keywords": "Interface IClock Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public interface IClock Properties Frequency Declaration Frequency Frequency { get; } Property Value Type Description Frequency IsAvailable Declaration bool IsAvailable { get; } Property Value Type Description System.Boolean Title Declaration string Title { get; } Property Value Type Description System.String Methods GetTimestamp() Declaration long GetTimestamp() Returns Type Description System.Int64 Extension Methods ClockExtensions.GetResolution(IClock) ClockExtensions.Start(IClock)"
  },
  "api/BenchmarkDotNet.Horology.StartedClock.html": {
    "href": "api/BenchmarkDotNet.Horology.StartedClock.html",
    "title": "Struct StartedClock | BenchmarkDotNet",
    "keywords": "Struct StartedClock Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public struct StartedClock Constructors StartedClock(IClock, Int64) Declaration public StartedClock(IClock clock, long startTimestamp) Parameters Type Name Description IClock clock System.Int64 startTimestamp Methods GetElapsed() Declaration public ClockSpan GetElapsed() Returns Type Description ClockSpan ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/BenchmarkDotNet.Horology.TimeInterval.html": {
    "href": "api/BenchmarkDotNet.Horology.TimeInterval.html",
    "title": "Struct TimeInterval | BenchmarkDotNet",
    "keywords": "Struct TimeInterval Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public struct TimeInterval Constructors TimeInterval(Double) Declaration public TimeInterval(double nanoseconds) Parameters Type Name Description System.Double nanoseconds TimeInterval(Double, TimeUnit) Declaration public TimeInterval(double value, TimeUnit unit) Parameters Type Name Description System.Double value TimeUnit unit Fields Day Declaration public static readonly TimeInterval Day Field Value Type Description TimeInterval Hour Declaration public static readonly TimeInterval Hour Field Value Type Description TimeInterval Microsecond Declaration public static readonly TimeInterval Microsecond Field Value Type Description TimeInterval Millisecond Declaration public static readonly TimeInterval Millisecond Field Value Type Description TimeInterval Minute Declaration public static readonly TimeInterval Minute Field Value Type Description TimeInterval Nanosecond Declaration public static readonly TimeInterval Nanosecond Field Value Type Description TimeInterval Second Declaration public static readonly TimeInterval Second Field Value Type Description TimeInterval Properties Nanoseconds Declaration public double Nanoseconds { get; } Property Value Type Description System.Double Methods FromDays(Double) Declaration public static TimeInterval FromDays(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval FromHours(Double) Declaration public static TimeInterval FromHours(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval FromMicroseconds(Double) Declaration public static TimeInterval FromMicroseconds(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval FromMilliseconds(Double) Declaration public static TimeInterval FromMilliseconds(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval FromMinutes(Double) Declaration public static TimeInterval FromMinutes(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval FromNanoseconds(Double) Declaration public static TimeInterval FromNanoseconds(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval FromSeconds(Double) Declaration public static TimeInterval FromSeconds(double value) Parameters Type Name Description System.Double value Returns Type Description TimeInterval ToDays() Declaration public double ToDays() Returns Type Description System.Double ToFrequency() Declaration public Frequency ToFrequency() Returns Type Description Frequency ToHours() Declaration public double ToHours() Returns Type Description System.Double ToMicroseconds() Declaration public double ToMicroseconds() Returns Type Description System.Double ToMilliseconds() Declaration public double ToMilliseconds() Returns Type Description System.Double ToMinutes() Declaration public double ToMinutes() Returns Type Description System.Double ToNanoseconds() Declaration public double ToNanoseconds() Returns Type Description System.Double ToSeconds() Declaration public double ToSeconds() Returns Type Description System.Double ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Division(TimeInterval, TimeInterval) Declaration public static double operator /(TimeInterval a, TimeInterval b) Parameters Type Name Description TimeInterval a TimeInterval b Returns Type Description System.Double Division(TimeInterval, Double) Declaration public static TimeInterval operator /(TimeInterval a, double k) Parameters Type Name Description TimeInterval a System.Double k Returns Type Description TimeInterval Division(TimeInterval, Int32) Declaration public static TimeInterval operator /(TimeInterval a, int k) Parameters Type Name Description TimeInterval a System.Int32 k Returns Type Description TimeInterval GreaterThan(TimeInterval, TimeInterval) Declaration public static bool operator>(TimeInterval a, TimeInterval b) Parameters Type Name Description TimeInterval a TimeInterval b Returns Type Description System.Boolean GreaterThanOrEqual(TimeInterval, TimeInterval) Declaration public static bool operator >=(TimeInterval a, TimeInterval b) Parameters Type Name Description TimeInterval a TimeInterval b Returns Type Description System.Boolean LessThan(TimeInterval, TimeInterval) Declaration public static bool operator <(TimeInterval a, TimeInterval b) Parameters Type Name Description TimeInterval a TimeInterval b Returns Type Description System.Boolean LessThanOrEqual(TimeInterval, TimeInterval) Declaration public static bool operator <=(TimeInterval a, TimeInterval b) Parameters Type Name Description TimeInterval a TimeInterval b Returns Type Description System.Boolean Multiply(TimeInterval, Double) Declaration public static TimeInterval operator *(TimeInterval a, double k) Parameters Type Name Description TimeInterval a System.Double k Returns Type Description TimeInterval Multiply(TimeInterval, Int32) Declaration public static TimeInterval operator *(TimeInterval a, int k) Parameters Type Name Description TimeInterval a System.Int32 k Returns Type Description TimeInterval Multiply(Double, TimeInterval) Declaration public static TimeInterval operator *(double k, TimeInterval a) Parameters Type Name Description System.Double k TimeInterval a Returns Type Description TimeInterval Multiply(Int32, TimeInterval) Declaration public static TimeInterval operator *(int k, TimeInterval a) Parameters Type Name Description System.Int32 k TimeInterval a Returns Type Description TimeInterval"
  },
  "api/BenchmarkDotNet.Horology.TimeUnit.html": {
    "href": "api/BenchmarkDotNet.Horology.TimeUnit.html",
    "title": "Class TimeUnit | BenchmarkDotNet",
    "keywords": "Class TimeUnit Inheritance System.Object TimeUnit Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public class TimeUnit Fields All Declaration public static readonly TimeUnit[] All Field Value Type Description TimeUnit [] Day Declaration public static readonly TimeUnit Day Field Value Type Description TimeUnit Hour Declaration public static readonly TimeUnit Hour Field Value Type Description TimeUnit Microsecond Declaration public static readonly TimeUnit Microsecond Field Value Type Description TimeUnit Millisecond Declaration public static readonly TimeUnit Millisecond Field Value Type Description TimeUnit Minute Declaration public static readonly TimeUnit Minute Field Value Type Description TimeUnit Nanosecond Declaration public static readonly TimeUnit Nanosecond Field Value Type Description TimeUnit Second Declaration public static readonly TimeUnit Second Field Value Type Description TimeUnit Properties Description Declaration public string Description { get; } Property Value Type Description System.String Name Declaration public MultiEncodingString Name { get; } Property Value Type Description MultiEncodingString NanosecondAmount Declaration public long NanosecondAmount { get; } Property Value Type Description System.Int64 Methods Convert(Double, TimeUnit, TimeUnit) Declaration public static double Convert(double value, TimeUnit from, TimeUnit to) Parameters Type Name Description System.Double value TimeUnit from TimeUnit to Returns Type Description System.Double GetBestTimeUnit(Double[]) This method chooses the best time unit for representing a set of time measurements. Declaration public static TimeUnit GetBestTimeUnit(params double[] values) Parameters Type Name Description System.Double [] values The list of time measurements in nanoseconds. Returns Type Description TimeUnit Best time unit. ToInterval(Int64) Declaration public TimeInterval ToInterval(long value = 1L) Parameters Type Name Description System.Int64 value Returns Type Description TimeInterval"
  },
  "api/BenchmarkDotNet.Loggers.NullLogger.html": {
    "href": "api/BenchmarkDotNet.Loggers.NullLogger.html",
    "title": "Class NullLogger | BenchmarkDotNet",
    "keywords": "Class NullLogger Inheritance System.Object NullLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public class NullLogger : ILogger Fields Instance Declaration public static readonly ILogger Instance Field Value Type Description ILogger Methods Write(LogKind, String) Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration public void WriteLine() WriteLine(LogKind, String) Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Implements ILogger Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Loggers.StreamLogger.html": {
    "href": "api/BenchmarkDotNet.Loggers.StreamLogger.html",
    "title": "Class StreamLogger | BenchmarkDotNet",
    "keywords": "Class StreamLogger Inheritance System.Object StreamLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public class StreamLogger : ILogger Constructors StreamLogger(StreamWriter) Declaration public StreamLogger(StreamWriter writer) Parameters Type Name Description System.IO.StreamWriter writer StreamLogger(String, Boolean) Declaration public StreamLogger(string filePath, bool append = false) Parameters Type Name Description System.String filePath System.Boolean append Methods Write(LogKind, String) Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration public void WriteLine() WriteLine(LogKind, String) Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Implements ILogger Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Loggers.html": {
    "href": "api/BenchmarkDotNet.Loggers.html",
    "title": "Namespace BenchmarkDotNet.Loggers | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Loggers Classes AccumulationLogger CompositeLogger ConsoleLogger LoggerExtensions LoggerWithPrefix Adds prefix for each line NullLogger StreamLogger Interfaces ILogger Enums LogKind"
  },
  "api/BenchmarkDotNet.Mathematics.ConfidenceInterval.html": {
    "href": "api/BenchmarkDotNet.Mathematics.ConfidenceInterval.html",
    "title": "Struct ConfidenceInterval | BenchmarkDotNet",
    "keywords": "Struct ConfidenceInterval Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public struct ConfidenceInterval Constructors ConfidenceInterval(Double, Double, Int32, ConfidenceLevel) Declaration public ConfidenceInterval(double mean, double standardError, int n, ConfidenceLevel level = ConfidenceLevel.L999) Parameters Type Name Description System.Double mean System.Double standardError System.Int32 n ConfidenceLevel level Properties Level Declaration public ConfidenceLevel Level { get; } Property Value Type Description ConfidenceLevel Lower Declaration public double Lower { get; } Property Value Type Description System.Double Margin Declaration public double Margin { get; } Property Value Type Description System.Double Mean Declaration public double Mean { get; } Property Value Type Description System.Double N Declaration public int N { get; } Property Value Type Description System.Int32 StandardError Declaration public double StandardError { get; } Property Value Type Description System.Double Upper Declaration public double Upper { get; } Property Value Type Description System.Double Methods Contains(Double) Declaration public bool Contains(double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean ToStr(Boolean) Declaration public string ToStr(bool showLevel = true) Parameters Type Name Description System.Boolean showLevel Returns Type Description System.String ToTimeStr(Encoding, TimeUnit, Boolean) Declaration public string ToTimeStr(Encoding encoding, TimeUnit unit = null, bool showLevel = true) Parameters Type Name Description System.Text.Encoding encoding TimeUnit unit System.Boolean showLevel Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Portability.Antivirus.html": {
    "href": "api/BenchmarkDotNet.Portability.Antivirus.html",
    "title": "Class Antivirus | BenchmarkDotNet",
    "keywords": "Class Antivirus Inheritance System.Object Antivirus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Portability Assembly : BenchmarkDotNet.dll Syntax public class Antivirus Constructors Antivirus(String, String) Declaration public Antivirus(string name, string path) Parameters Type Name Description System.String name System.String path Properties Name Declaration public string Name { get; } Property Value Type Description System.String Path Declaration public string Path { get; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Portability.Cpu.CpuInfo.html": {
    "href": "api/BenchmarkDotNet.Portability.Cpu.CpuInfo.html",
    "title": "Class CpuInfo | BenchmarkDotNet",
    "keywords": "Class CpuInfo Inheritance System.Object CpuInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Portability.Cpu Assembly : BenchmarkDotNet.dll Syntax public class CpuInfo Constructors CpuInfo(String, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public CpuInfo(string processorName, int? physicalProcessorCount, int? physicalCoreCount, int? logicalCoreCount) Parameters Type Name Description System.String processorName System.Nullable < System.Int32 > physicalProcessorCount System.Nullable < System.Int32 > physicalCoreCount System.Nullable < System.Int32 > logicalCoreCount Properties LogicalCoreCount Declaration public int? LogicalCoreCount { get; } Property Value Type Description System.Nullable < System.Int32 > PhysicalCoreCount Declaration public int? PhysicalCoreCount { get; } Property Value Type Description System.Nullable < System.Int32 > PhysicalProcessorCount Declaration public int? PhysicalProcessorCount { get; } Property Value Type Description System.Nullable < System.Int32 > ProcessorName Declaration public string ProcessorName { get; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Portability.Cpu.CpuInfoFormatter.html": {
    "href": "api/BenchmarkDotNet.Portability.Cpu.CpuInfoFormatter.html",
    "title": "Class CpuInfoFormatter | BenchmarkDotNet",
    "keywords": "Class CpuInfoFormatter Inheritance System.Object CpuInfoFormatter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Portability.Cpu Assembly : BenchmarkDotNet.dll Syntax public static class CpuInfoFormatter Methods Format(CpuInfo) Declaration public static string Format(CpuInfo cpuInfo) Parameters Type Name Description CpuInfo cpuInfo Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Horology.FrequencyUnit.html": {
    "href": "api/BenchmarkDotNet.Horology.FrequencyUnit.html",
    "title": "Class FrequencyUnit | BenchmarkDotNet",
    "keywords": "Class FrequencyUnit Inheritance System.Object FrequencyUnit Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public class FrequencyUnit Fields All Declaration public static readonly FrequencyUnit[] All Field Value Type Description FrequencyUnit [] GHz Declaration public static readonly FrequencyUnit GHz Field Value Type Description FrequencyUnit Hz Declaration public static readonly FrequencyUnit Hz Field Value Type Description FrequencyUnit KHz Declaration public static readonly FrequencyUnit KHz Field Value Type Description FrequencyUnit MHz Declaration public static readonly FrequencyUnit MHz Field Value Type Description FrequencyUnit Properties Description Declaration public string Description { get; } Property Value Type Description System.String HertzAmount Declaration public long HertzAmount { get; } Property Value Type Description System.Int64 Name Declaration public string Name { get; } Property Value Type Description System.String Methods ToFrequency(Int64) Declaration public Frequency ToFrequency(long value = 1L) Parameters Type Name Description System.Int64 value Returns Type Description Frequency"
  },
  "api/BenchmarkDotNet.Horology.HardwareTimerKind.html": {
    "href": "api/BenchmarkDotNet.Horology.HardwareTimerKind.html",
    "title": "Enum HardwareTimerKind | BenchmarkDotNet",
    "keywords": "Enum HardwareTimerKind Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public enum HardwareTimerKind Fields Name Description Acpi Hpet High Precision Event Timer https://en.wikipedia.org/wiki/High_Precision_Event_Timer System System timer Tsc Time Stamp Counter https://en.wikipedia.org/wiki/Time_Stamp_Counter Unknown"
  },
  "api/BenchmarkDotNet.Mathematics.ConfidenceLevel.html": {
    "href": "api/BenchmarkDotNet.Mathematics.ConfidenceLevel.html",
    "title": "Enum ConfidenceLevel | BenchmarkDotNet",
    "keywords": "Enum ConfidenceLevel Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public enum ConfidenceLevel Fields Name Description L50 50.0% confidence interval L70 70.0% confidence interval L75 75.0% confidence interval L80 80.0% confidence interval L85 85.0% confidence interval L90 90.0% confidence interval L92 92.0% confidence interval L95 95.0% confidence interval L96 96.0% confidence interval L97 97.0% confidence interval L98 98.0% confidence interval L99 99.0% confidence interval L999 99.9% confidence interval Extension Methods ConfidenceLevelExtensions.GetZValue(Int32) ConfidenceLevelExtensions.ToPercentStr() ConfidenceLevelExtensions.ToPercent()"
  },
  "api/BenchmarkDotNet.Mathematics.ConfidenceLevelExtensions.html": {
    "href": "api/BenchmarkDotNet.Mathematics.ConfidenceLevelExtensions.html",
    "title": "Class ConfidenceLevelExtensions | BenchmarkDotNet",
    "keywords": "Class ConfidenceLevelExtensions Inheritance System.Object ConfidenceLevelExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public static class ConfidenceLevelExtensions Methods GetZValue(ConfidenceLevel, Int32) Calculates Z value (z-star) for confidence interval Declaration public static double GetZValue(this ConfidenceLevel level, int n) Parameters Type Name Description ConfidenceLevel level ConfidenceLevel for a confidence interval System.Int32 n Sample size (n >= 3) Returns Type Description System.Double ToPercent(ConfidenceLevel) Declaration public static double ToPercent(this ConfidenceLevel level) Parameters Type Name Description ConfidenceLevel level Returns Type Description System.Double ToPercentStr(ConfidenceLevel) Declaration public static string ToPercentStr(this ConfidenceLevel level) Parameters Type Name Description ConfidenceLevel level Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.AdaptiveHistogramBuilder.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.AdaptiveHistogramBuilder.html",
    "title": "Class AdaptiveHistogramBuilder | BenchmarkDotNet",
    "keywords": "Class AdaptiveHistogramBuilder Inheritance System.Object AdaptiveHistogramBuilder Implements IHistogramBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public class AdaptiveHistogramBuilder : IHistogramBuilder Methods Build(Statistics, Nullable<BinSizeRule>) Declaration public Histogram Build(Statistics s, BinSizeRule? rule = default(BinSizeRule? )) Parameters Type Name Description Statistics s System.Nullable < BinSizeRule > rule Returns Type Description Histogram BuildWithFixedBinSize(IEnumerable<Double>, Double) Declaration public Histogram BuildWithFixedBinSize(IEnumerable<double> values, double binSize) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > values System.Double binSize Returns Type Description Histogram Implements IHistogramBuilder"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.BinSizeRule.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.BinSizeRule.html",
    "title": "Enum BinSizeRule | BenchmarkDotNet",
    "keywords": "Enum BinSizeRule Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public enum BinSizeRule Fields Name Description FreedmanDiaconis Rice Scott Scott2 SquareRoot Sturges"
  },
  "api/BenchmarkDotNet.Portability.HyperV.html": {
    "href": "api/BenchmarkDotNet.Portability.HyperV.html",
    "title": "Class HyperV | BenchmarkDotNet",
    "keywords": "Class HyperV Inheritance System.Object VirtualMachineHypervisor HyperV Inherited Members VirtualMachineHypervisor.ContainsVmIdentifier(String, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Portability Assembly : BenchmarkDotNet.dll Syntax public class HyperV : VirtualMachineHypervisor Properties Default Declaration public static HyperV Default { get; } Property Value Type Description HyperV Name Declaration public override string Name { get; } Property Value Type Description System.String Overrides VirtualMachineHypervisor.Name Methods IsVirtualMachine(String, String) Declaration public override bool IsVirtualMachine(string manufacturer, string model) Parameters Type Name Description System.String manufacturer System.String model Returns Type Description System.Boolean Overrides VirtualMachineHypervisor.IsVirtualMachine(String, String)"
  },
  "api/BenchmarkDotNet.Portability.VirtualBox.html": {
    "href": "api/BenchmarkDotNet.Portability.VirtualBox.html",
    "title": "Class VirtualBox | BenchmarkDotNet",
    "keywords": "Class VirtualBox Inheritance System.Object VirtualMachineHypervisor VirtualBox Inherited Members VirtualMachineHypervisor.ContainsVmIdentifier(String, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Portability Assembly : BenchmarkDotNet.dll Syntax public class VirtualBox : VirtualMachineHypervisor Properties Default Declaration public static VirtualBox Default { get; } Property Value Type Description VirtualBox Name Declaration public override string Name { get; } Property Value Type Description System.String Overrides VirtualMachineHypervisor.Name Methods IsVirtualMachine(String, String) Declaration public override bool IsVirtualMachine(string manufacturer, string model) Parameters Type Name Description System.String manufacturer System.String model Returns Type Description System.Boolean Overrides VirtualMachineHypervisor.IsVirtualMachine(String, String)"
  },
  "api/BenchmarkDotNet.Portability.VirtualMachineHypervisor.html": {
    "href": "api/BenchmarkDotNet.Portability.VirtualMachineHypervisor.html",
    "title": "Class VirtualMachineHypervisor | BenchmarkDotNet",
    "keywords": "Class VirtualMachineHypervisor Inheritance System.Object VirtualMachineHypervisor HyperV VirtualBox VMware Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Portability Assembly : BenchmarkDotNet.dll Syntax public abstract class VirtualMachineHypervisor Properties Name Declaration public abstract string Name { get; } Property Value Type Description System.String Methods ContainsVmIdentifier(String, String) Declaration protected bool ContainsVmIdentifier(string systemInformation, string vmIdentifier) Parameters Type Name Description System.String systemInformation System.String vmIdentifier Returns Type Description System.Boolean IsVirtualMachine(String, String) Declaration public abstract bool IsVirtualMachine(string manufacturer, string model) Parameters Type Name Description System.String manufacturer System.String model Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Portability.VMware.html": {
    "href": "api/BenchmarkDotNet.Portability.VMware.html",
    "title": "Class VMware | BenchmarkDotNet",
    "keywords": "Class VMware Inheritance System.Object VirtualMachineHypervisor VMware Inherited Members VirtualMachineHypervisor.ContainsVmIdentifier(String, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Portability Assembly : BenchmarkDotNet.dll Syntax public class VMware : VirtualMachineHypervisor Properties Default Declaration public static VMware Default { get; } Property Value Type Description VMware Name Declaration public override string Name { get; } Property Value Type Description System.String Overrides VirtualMachineHypervisor.Name Methods IsVirtualMachine(String, String) Declaration public override bool IsVirtualMachine(string manufacturer, string model) Parameters Type Name Description System.String manufacturer System.String model Returns Type Description System.Boolean Overrides VirtualMachineHypervisor.IsVirtualMachine(String, String)"
  },
  "api/BenchmarkDotNet.Toolchains.CoreRt.CoreRtToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CoreRt.CoreRtToolchain.html",
    "title": "Class CoreRtToolchain | BenchmarkDotNet",
    "keywords": "Class CoreRtToolchain Inheritance System.Object Toolchain CoreRtToolchain Implements IToolchain Inherited Members Toolchain.Name Toolchain.Generator Toolchain.Builder Toolchain.Executor Toolchain.IsSupported(Benchmark, ILogger, IResolver) Toolchain.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.CoreRt Assembly : BenchmarkDotNet.dll Syntax public class CoreRtToolchain : Toolchain, IToolchain Fields LatestMyGetBuild target latest (1.0.0-alpha-*) CoreRT build from https://dotnet.myget.org/F/dotnet-core/api/v3/index.json Declaration public static readonly IToolchain LatestMyGetBuild Field Value Type Description IToolchain Methods CreateBuilder() Declaration public static CoreRtToolchainBuilder CreateBuilder() Returns Type Description CoreRtToolchainBuilder Implements IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.CoreRt.CoreRtToolchainBuilder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CoreRt.CoreRtToolchainBuilder.html",
    "title": "Class CoreRtToolchainBuilder | BenchmarkDotNet",
    "keywords": "Class CoreRtToolchainBuilder Inheritance System.Object CustomDotNetCliToolchainBuilder CoreRtToolchainBuilder Inherited Members CustomDotNetCliToolchainBuilder.runtimeIdentifier CustomDotNetCliToolchainBuilder.customDotNetCliPath CustomDotNetCliToolchainBuilder.targetFrameworkMoniker CustomDotNetCliToolchainBuilder.displayName CustomDotNetCliToolchainBuilder.runtimeFrameworkVersion CustomDotNetCliToolchainBuilder.useNuGetClearTag CustomDotNetCliToolchainBuilder.useTempFolderForRestore CustomDotNetCliToolchainBuilder.feeds CustomDotNetCliToolchainBuilder.AdditionalNuGetFeed(String, String) CustomDotNetCliToolchainBuilder.UseNuGetClearTag(Boolean) CustomDotNetCliToolchainBuilder.TargetFrameworkMoniker(String) CustomDotNetCliToolchainBuilder.DotNetCli(String) CustomDotNetCliToolchainBuilder.RuntimeIdentifier(String) CustomDotNetCliToolchainBuilder.RuntimeFrameworkVersion(String) CustomDotNetCliToolchainBuilder.DisplayName(String) CustomDotNetCliToolchainBuilder.UseTempFolderForRestore(Boolean) CustomDotNetCliToolchainBuilder.GetPortableRuntimeIdentifier() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.CoreRt Assembly : BenchmarkDotNet.dll Syntax public class CoreRtToolchainBuilder : CustomDotNetCliToolchainBuilder Methods Create() Declaration public static CoreRtToolchainBuilder Create() Returns Type Description CoreRtToolchainBuilder ToToolchain() Declaration public override IToolchain ToToolchain() Returns Type Description IToolchain Overrides CustomDotNetCliToolchainBuilder.ToToolchain() UseCoreRtLocal(String) creates a CoreRT toolchain targeting local build for CoreRT Based on https://github.com/dotnet/corert/blob/7f902d4d8b1c3280e60f5e06c71951a60da173fb/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built Declaration public CoreRtToolchainBuilder UseCoreRtLocal(string ilcPath) Parameters Type Name Description System.String ilcPath the ilcPath, an example: \"C:\\Projects\\corert\\bin\\Windows_NT.x64.Release\" Returns Type Description CoreRtToolchainBuilder UseCoreRtNuGet(String, String) creates a CoreRT toolchain targeting NuGet build of CoreRT Based on https://github.com/dotnet/corert/blob/7f902d4d8b1c3280e60f5e06c71951a60da173fb/samples/HelloWorld/README.md#add-corert-to-your-project Declaration public CoreRtToolchainBuilder UseCoreRtNuGet(string microsoftDotNetILCompilerVersion = \"1.0.0-alpha-*\", string nugetFeedUrl = \"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\") Parameters Type Name Description System.String microsoftDotNetILCompilerVersion the version of Microsoft.DotNet.ILCompiler which should be used. The default is: \"1.0.0-alpha-*\" System.String nugetFeedUrl url to NuGet CoreRT feed, The default is: \"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" Returns Type Description CoreRtToolchainBuilder UseCppCodeGenerator() \"This approach uses transpiler to convert IL to C++, and then uses platform specific C++ compiler and linker for compiling/linking the application. The transpiler is a lot less mature than the RyuJIT path. If you came here to give CoreRT a try\" please don't use this option. Based on https://github.com/dotnet/corert/blob/7f902d4d8b1c3280e60f5e06c71951a60da173fb/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#using-cpp-code-generator Declaration public CoreRtToolchainBuilder UseCppCodeGenerator() Returns Type Description CoreRtToolchainBuilder"
  },
  "api/BenchmarkDotNet.Toolchains.CoreRt.Generator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CoreRt.Generator.html",
    "title": "Class Generator | BenchmarkDotNet",
    "keywords": "Class Generator generates new csproj file for self-contained .NET Core RT app based on https://github.com/dotnet/corert/blob/7f902d4d8b1c3280e60f5e06c71951a60da173fb/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built and https://github.com/dotnet/corert/tree/7f902d4d8b1c3280e60f5e06c71951a60da173fb/samples/HelloWorld#add-corert-to-your-project Inheritance System.Object GeneratorBase DotNetCliGenerator CsProjGenerator Generator Implements IGenerator Inherited Members CsProjGenerator.RuntimeFrameworkVersion CsProjGenerator.GetProjectFilePath(String) CsProjGenerator.GetRuntimeSettings(GcMode, IResolver) CsProjGenerator.GetProjectFilePath(Type, ILogger) DotNetCliGenerator.TargetFrameworkMoniker DotNetCliGenerator.PlatformProvider DotNetCliGenerator.Runtime DotNetCliGenerator.ExtraDependencies DotNetCliGenerator.Imports DotNetCliGenerator.CopyAllRequiredFiles(ArtifactsPaths) DotNetCliGenerator.SetPlatform(String, String) DotNetCliGenerator.SetCodeFileName(String, String) DotNetCliGenerator.SetTargetFrameworkMoniker(String, String) GeneratorBase.GenerateProject(BuildPartition, ILogger, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.CoreRt Assembly : BenchmarkDotNet.dll Syntax public class Generator : CsProjGenerator, IGenerator Methods GenerateBuildScript(BuildPartition, ArtifactsPaths) Declaration protected override void GenerateBuildScript(BuildPartition buildPartition, ArtifactsPaths artifactsPaths) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths Overrides DotNetCliGenerator.GenerateBuildScript(BuildPartition, ArtifactsPaths) GenerateNuGetConfig(ArtifactsPaths) Declaration protected override void GenerateNuGetConfig(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Overrides GeneratorBase.GenerateNuGetConfig(ArtifactsPaths) GenerateProject(BuildPartition, ArtifactsPaths, ILogger) Declaration protected override void GenerateProject(BuildPartition buildPartition, ArtifactsPaths artifactsPaths, ILogger logger) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths ILogger logger Overrides CsProjGenerator.GenerateProject(BuildPartition, ArtifactsPaths, ILogger) GetArtifactsToCleanup(ArtifactsPaths) Declaration protected override string[] GetArtifactsToCleanup(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Returns Type Description System.String [] Overrides DotNetCliGenerator.GetArtifactsToCleanup(ArtifactsPaths) GetBinariesDirectoryPath(String, String) Declaration protected override string GetBinariesDirectoryPath(string buildArtifactsDirectoryPath, string configuration) Parameters Type Name Description System.String buildArtifactsDirectoryPath System.String configuration Returns Type Description System.String Overrides CsProjGenerator.GetBinariesDirectoryPath(String, String) GetBuildArtifactsDirectoryPath(BuildPartition, String) Declaration protected override string GetBuildArtifactsDirectoryPath(BuildPartition buildPartition, string programName) Parameters Type Name Description BuildPartition buildPartition System.String programName Returns Type Description System.String Overrides CsProjGenerator.GetBuildArtifactsDirectoryPath(BuildPartition, String) GetExecutableExtension() Declaration protected override string GetExecutableExtension() Returns Type Description System.String Overrides DotNetCliGenerator.GetExecutableExtension() GetPackagesDirectoryPath(String) Declaration protected override string GetPackagesDirectoryPath(string buildArtifactsDirectoryPath) Parameters Type Name Description System.String buildArtifactsDirectoryPath Returns Type Description System.String Overrides GeneratorBase.GetPackagesDirectoryPath(String) Implements IGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.CoreRt.Publisher.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CoreRt.Publisher.html",
    "title": "Class Publisher | BenchmarkDotNet",
    "keywords": "Class Publisher Inheritance System.Object DotNetCliPublisher Publisher Implements IBuilder Inherited Members DotNetCliPublisher.Build(GenerateResult, BuildPartition, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.CoreRt Assembly : BenchmarkDotNet.dll Syntax public class Publisher : DotNetCliPublisher, IBuilder Constructors Publisher(String, String, Boolean, String) Declaration public Publisher(string customDotNetCliPath, string ilcPath, bool useCppCodeGenerator, string runtimeIdentifier) Parameters Type Name Description System.String customDotNetCliPath System.String ilcPath System.Boolean useCppCodeGenerator System.String runtimeIdentifier Methods GetEnvironmentVariables() Declaration protected override IReadOnlyList<EnvironmentVariable> GetEnvironmentVariables() Returns Type Description System.Collections.Generic.IReadOnlyList < EnvironmentVariable > Overrides DotNetCliPublisher.GetEnvironmentVariables() GetExtraArguments(BuildPartition) Declaration protected override string GetExtraArguments(BuildPartition buildPartition) Parameters Type Name Description BuildPartition buildPartition Returns Type Description System.String Overrides DotNetCliPublisher.GetExtraArguments(BuildPartition) Implements IBuilder"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.InProcessToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.InProcessToolchain.html",
    "title": "Class InProcessToolchain | BenchmarkDotNet",
    "keywords": "Class InProcessToolchain A toolchain to run the benchmarks in-process. Inheritance System.Object InProcessToolchain Implements IToolchain Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public sealed class InProcessToolchain : IToolchain Constructors InProcessToolchain(Boolean) Initializes a new instance of the InProcessToolchain class. Declaration public InProcessToolchain(bool logOutput) Parameters Type Name Description System.Boolean logOutput true if the output should be logged. InProcessToolchain(TimeSpan, BenchmarkActionCodegen, Boolean) Initializes a new instance of the InProcessToolchain class. Declaration public InProcessToolchain(TimeSpan timeout, BenchmarkActionCodegen codegenMode, bool logOutput) Parameters Type Name Description System.TimeSpan timeout Timeout for the run. BenchmarkActionCodegen codegenMode Describes how benchmark action code is generated. System.Boolean logOutput true if the output should be logged. Fields DontLogOutput The toolchain instance without output logging. Declaration public static readonly IToolchain DontLogOutput Field Value Type Description IToolchain Instance The default toolchain instance. Declaration public static readonly IToolchain Instance Field Value Type Description IToolchain Properties Builder The builder. Declaration public IBuilder Builder { get; } Property Value Type Description IBuilder The builder. Executor The executor. Declaration public IExecutor Executor { get; } Property Value Type Description IExecutor The executor. Generator The generator. Declaration public IGenerator Generator { get; } Property Value Type Description IGenerator The generator. Name Name of the toolchain. Declaration public string Name { get; } Property Value Type Description System.String The name of the toolchain. Methods IsSupported(Benchmark, ILogger, IResolver) Determines whether the specified benchmark is supported. Declaration public bool IsSupported(Benchmark benchmark, ILogger logger, IResolver resolver) Parameters Type Name Description Benchmark benchmark The benchmark. ILogger logger The logger. IResolver resolver The resolver. Returns Type Description System.Boolean true if the benchmark can be run with the toolchain. ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Implements IToolchain See Also IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.InProcessValidator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.InProcessValidator.html",
    "title": "Class InProcessValidator | BenchmarkDotNet",
    "keywords": "Class InProcessValidator Validator to be used together with InProcessToolchain to proof that the config matches the environment. Inheritance System.Object InProcessValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public class InProcessValidator : IValidator Fields DontFailOnError The instance of validator that does NOT fail on error. Declaration public static readonly IValidator DontFailOnError Field Value Type Description IValidator FailOnError The instance of validator that DOES fail on error. Declaration public static readonly IValidator FailOnError Field Value Type Description IValidator Properties TreatsWarningsAsErrors Gets a value indicating whether warnings are treated as errors. Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean true if the validator should treat warnings as errors; otherwise, false . Methods IsSupported(Benchmark, ILogger) Declaration public static bool IsSupported(Benchmark benchmark, ILogger logger) Parameters Type Name Description Benchmark benchmark ILogger logger Returns Type Description System.Boolean Validate(ValidationParameters) Proofs that benchmarks' jobs match the environment. Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters The validation parameters. Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Enumerable of validation errors. Implements IValidator See Also IValidator"
  },
  "api/BenchmarkDotNet.Horology.Chronometer.html": {
    "href": "api/BenchmarkDotNet.Horology.Chronometer.html",
    "title": "Class Chronometer | BenchmarkDotNet",
    "keywords": "Class Chronometer Inheritance System.Object Chronometer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public static class Chronometer Fields BestClock Declaration public static readonly IClock BestClock Field Value Type Description IClock DateTime Declaration public static readonly IClock DateTime Field Value Type Description IClock Stopwatch Declaration public static readonly IClock Stopwatch Field Value Type Description IClock WindowsClock Declaration public static readonly IClock WindowsClock Field Value Type Description IClock Properties Frequency Declaration public static Frequency Frequency { get; } Property Value Type Description Frequency HardwareTimerKind Declaration public static HardwareTimerKind HardwareTimerKind { get; } Property Value Type Description HardwareTimerKind Methods GetHardwareTimerKind(Frequency) Declaration public static HardwareTimerKind GetHardwareTimerKind(Frequency frequency) Parameters Type Name Description Frequency frequency Returns Type Description HardwareTimerKind GetResolution() Declaration public static TimeInterval GetResolution() Returns Type Description TimeInterval GetTimestamp() Declaration public static long GetTimestamp() Returns Type Description System.Int64 Start() Declaration public static StartedClock Start() Returns Type Description StartedClock"
  },
  "api/BenchmarkDotNet.Horology.ClockExtensions.html": {
    "href": "api/BenchmarkDotNet.Horology.ClockExtensions.html",
    "title": "Class ClockExtensions | BenchmarkDotNet",
    "keywords": "Class ClockExtensions Inheritance System.Object ClockExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public static class ClockExtensions Methods GetResolution(IClock) Declaration public static TimeInterval GetResolution(this IClock clock) Parameters Type Name Description IClock clock Returns Type Description TimeInterval Start(IClock) Declaration public static StartedClock Start(this IClock clock) Parameters Type Name Description IClock clock Returns Type Description StartedClock"
  },
  "api/BenchmarkDotNet.Jobs.html": {
    "href": "api/BenchmarkDotNet.Jobs.html",
    "title": "Namespace BenchmarkDotNet.Jobs | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Jobs Classes AccuracyMode Argument EnvironmentVariable EnvMode GcMode GcModeExtensions InfrastructureMode Job JobExtensions JobIdGenerator JobMode<T> MetaMode MonoArgument Argument passed directly to mono when executing benchmarks (mono [options]) example: new MonoArgument(\"--gc=sgen\") MsBuildArgument Argument passed to dotnet cli when restoring and building the project example: new MsBuildArgument(\"/p:MyCustomSetting=123\") RunMode"
  },
  "api/BenchmarkDotNet.Loggers.AccumulationLogger.html": {
    "href": "api/BenchmarkDotNet.Loggers.AccumulationLogger.html",
    "title": "Class AccumulationLogger | BenchmarkDotNet",
    "keywords": "Class AccumulationLogger Inheritance System.Object AccumulationLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public class AccumulationLogger : ILogger Methods ClearLog() Declaration public void ClearLog() GetLog() Declaration public string GetLog() Returns Type Description System.String Write(LogKind, String) Declaration public virtual void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration public virtual void WriteLine() WriteLine(LogKind, String) Declaration public virtual void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Implements ILogger Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Loggers.CompositeLogger.html": {
    "href": "api/BenchmarkDotNet.Loggers.CompositeLogger.html",
    "title": "Class CompositeLogger | BenchmarkDotNet",
    "keywords": "Class CompositeLogger Inheritance System.Object CompositeLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public class CompositeLogger : ILogger Constructors CompositeLogger(ILogger[]) Declaration public CompositeLogger(params ILogger[] loggers) Parameters Type Name Description ILogger [] loggers Methods Write(LogKind, String) Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration public void WriteLine() WriteLine(LogKind, String) Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Implements ILogger Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Loggers.ConsoleLogger.html": {
    "href": "api/BenchmarkDotNet.Loggers.ConsoleLogger.html",
    "title": "Class ConsoleLogger | BenchmarkDotNet",
    "keywords": "Class ConsoleLogger Inheritance System.Object ConsoleLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public sealed class ConsoleLogger : ILogger Constructors ConsoleLogger(Dictionary<LogKind, ConsoleColor>) Declaration public ConsoleLogger(Dictionary<LogKind, ConsoleColor> colorScheme = null) Parameters Type Name Description System.Collections.Generic.Dictionary < LogKind , System.ConsoleColor > colorScheme Fields Default Declaration public static readonly ILogger Default Field Value Type Description ILogger Methods CreateGrayScheme() Declaration public static Dictionary<LogKind, ConsoleColor> CreateGrayScheme() Returns Type Description System.Collections.Generic.Dictionary < LogKind , System.ConsoleColor > Write(LogKind, String) Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration public void WriteLine() WriteLine(LogKind, String) Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Implements ILogger Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Mathematics.WelchTTest.html": {
    "href": "api/BenchmarkDotNet.Mathematics.WelchTTest.html",
    "title": "Class WelchTTest | BenchmarkDotNet",
    "keywords": "Class WelchTTest Inheritance System.Object WelchTTest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public class WelchTTest Constructors WelchTTest(Double, Double, Double) Declaration public WelchTTest(double x, double df, double pValue) Parameters Type Name Description System.Double x System.Double df System.Double pValue Properties Df Declaration public double Df { get; } Property Value Type Description System.Double NullHypothesisIsRejected Declaration public bool NullHypothesisIsRejected { get; } Property Value Type Description System.Boolean PValue Declaration public double PValue { get; } Property Value Type Description System.Double T Declaration public double T { get; } Property Value Type Description System.Double Methods Calc(Statistics, Statistics) Welch's Two Sample t-test Declaration public static WelchTTest Calc(Statistics x, Statistics y) Parameters Type Name Description Statistics x Statistics y Returns Type Description WelchTTest"
  },
  "api/BenchmarkDotNet.Mathematics.html": {
    "href": "api/BenchmarkDotNet.Mathematics.html",
    "title": "Namespace BenchmarkDotNet.Mathematics | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Mathematics Classes ConfidenceLevelExtensions MathHelper NumeralSystemExtensions PercentileValues Statistics WelchTTest Structs ConfidenceInterval Enums ConfidenceLevel NumeralSystem OutlierMode The enum is design to remove some outliers from the distribution."
  },
  "api/BenchmarkDotNet.Order.DefaultOrderProvider.html": {
    "href": "api/BenchmarkDotNet.Order.DefaultOrderProvider.html",
    "title": "Class DefaultOrderProvider | BenchmarkDotNet",
    "keywords": "Class DefaultOrderProvider Inheritance System.Object DefaultOrderProvider Implements IOrderProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Order Assembly : BenchmarkDotNet.dll Syntax public class DefaultOrderProvider : IOrderProvider Constructors DefaultOrderProvider(SummaryOrderPolicy, MethodOrderPolicy) Declaration public DefaultOrderProvider(SummaryOrderPolicy summaryOrderPolicy = SummaryOrderPolicy.Default, MethodOrderPolicy methodOrderPolicy = MethodOrderPolicy.Declared) Parameters Type Name Description SummaryOrderPolicy summaryOrderPolicy MethodOrderPolicy methodOrderPolicy Fields Instance Declaration public static readonly IOrderProvider Instance Field Value Type Description IOrderProvider Properties SeparateLogicalGroups Declaration public bool SeparateLogicalGroups { get; } Property Value Type Description System.Boolean Methods GetExecutionOrder(Benchmark[]) Declaration public virtual IEnumerable<Benchmark> GetExecutionOrder(Benchmark[] benchmarks) Parameters Type Name Description Benchmark [] benchmarks Returns Type Description System.Collections.Generic.IEnumerable < Benchmark > GetHighlightGroupKey(Benchmark) Declaration public string GetHighlightGroupKey(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.String GetLogicalGroupKey(IConfig, Benchmark[], Benchmark) Declaration public string GetLogicalGroupKey(IConfig config, Benchmark[] allBenchmarks, Benchmark benchmark) Parameters Type Name Description IConfig config Benchmark [] allBenchmarks Benchmark benchmark Returns Type Description System.String GetLogicalGroupOrder(IEnumerable<IGrouping<String, Benchmark>>) Declaration public virtual IEnumerable<IGrouping<string, Benchmark>> GetLogicalGroupOrder(IEnumerable<IGrouping<string, Benchmark>> logicalGroups) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping < System.String , Benchmark >> logicalGroups Returns Type Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping < System.String , Benchmark >> GetSummaryOrder(Benchmark[], Summary) Declaration public virtual IEnumerable<Benchmark> GetSummaryOrder(Benchmark[] benchmarks, Summary summary) Parameters Type Name Description Benchmark [] benchmarks Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Benchmark > GetSummaryOrderForGroup(Benchmark[], Summary) Declaration protected virtual IEnumerable<Benchmark> GetSummaryOrderForGroup(Benchmark[] benchmarks, Summary summary) Parameters Type Name Description Benchmark [] benchmarks Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Benchmark > Implements IOrderProvider"
  },
  "api/BenchmarkDotNet.Order.IOrderProvider.html": {
    "href": "api/BenchmarkDotNet.Order.IOrderProvider.html",
    "title": "Interface IOrderProvider | BenchmarkDotNet",
    "keywords": "Interface IOrderProvider Namespace : BenchmarkDotNet.Order Assembly : BenchmarkDotNet.dll Syntax public interface IOrderProvider Properties SeparateLogicalGroups Declaration bool SeparateLogicalGroups { get; } Property Value Type Description System.Boolean Methods GetExecutionOrder(Benchmark[]) Declaration IEnumerable<Benchmark> GetExecutionOrder(Benchmark[] benchmarks) Parameters Type Name Description Benchmark [] benchmarks Returns Type Description System.Collections.Generic.IEnumerable < Benchmark > GetHighlightGroupKey(Benchmark) Declaration string GetHighlightGroupKey(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.String GetLogicalGroupKey(IConfig, Benchmark[], Benchmark) Declaration string GetLogicalGroupKey(IConfig config, Benchmark[] allBenchmarks, Benchmark benchmark) Parameters Type Name Description IConfig config Benchmark [] allBenchmarks Benchmark benchmark Returns Type Description System.String GetLogicalGroupOrder(IEnumerable<IGrouping<String, Benchmark>>) Declaration IEnumerable<IGrouping<string, Benchmark>> GetLogicalGroupOrder(IEnumerable<IGrouping<string, Benchmark>> logicalGroups) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping < System.String , Benchmark >> logicalGroups Returns Type Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping < System.String , Benchmark >> GetSummaryOrder(Benchmark[], Summary) Declaration IEnumerable<Benchmark> GetSummaryOrder(Benchmark[] benchmarks, Summary summary) Parameters Type Name Description Benchmark [] benchmarks Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Benchmark >"
  },
  "api/BenchmarkDotNet.Reports.SummaryTable.SummaryTableColumn.html": {
    "href": "api/BenchmarkDotNet.Reports.SummaryTable.SummaryTableColumn.html",
    "title": "Class SummaryTable.SummaryTableColumn | BenchmarkDotNet",
    "keywords": "Class SummaryTable.SummaryTableColumn Inheritance System.Object SummaryTable.SummaryTableColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public class SummaryTableColumn Constructors SummaryTableColumn(SummaryTable, Int32, IColumn) Declaration public SummaryTableColumn(SummaryTable table, int index, IColumn column) Parameters Type Name Description SummaryTable table System.Int32 index IColumn column Properties Content Declaration public string[] Content { get; } Property Value Type Description System.String [] Header Declaration public string Header { get; } Property Value Type Description System.String Index Declaration public int Index { get; } Property Value Type Description System.Int32 IsDefault Declaration public bool IsDefault { get; } Property Value Type Description System.Boolean Justify Declaration public SummaryTable.SummaryTableColumn.TextJustification Justify { get; } Property Value Type Description SummaryTable.SummaryTableColumn.TextJustification NeedToShow Declaration public bool NeedToShow { get; } Property Value Type Description System.Boolean OriginalColumn Declaration public IColumn OriginalColumn { get; } Property Value Type Description IColumn Width Declaration public int Width { get; } Property Value Type Description System.Int32 Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Reports.SummaryTable.html": {
    "href": "api/BenchmarkDotNet.Reports.SummaryTable.html",
    "title": "Class SummaryTable | BenchmarkDotNet",
    "keywords": "Class SummaryTable Inheritance System.Object SummaryTable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public class SummaryTable Properties ColumnCount Declaration public int ColumnCount { get; } Property Value Type Description System.Int32 Columns Declaration public SummaryTable.SummaryTableColumn[] Columns { get; } Property Value Type Description SummaryTable.SummaryTableColumn [] EffectiveSummaryStyle Declaration public ISummaryStyle EffectiveSummaryStyle { get; } Property Value Type Description ISummaryStyle FullContent Declaration public string[][] FullContent { get; } Property Value Type Description System.String [][] FullContentStartOfHighlightGroup Declaration public bool[] FullContentStartOfHighlightGroup { get; } Property Value Type Description System.Boolean [] FullContentStartOfLogicalGroup Declaration public bool[] FullContentStartOfLogicalGroup { get; } Property Value Type Description System.Boolean [] FullContentWithHeader Declaration public string[][] FullContentWithHeader { get; } Property Value Type Description System.String [][] FullHeader Declaration public string[] FullHeader { get; } Property Value Type Description System.String [] IsDefault Declaration public bool[] IsDefault { get; } Property Value Type Description System.Boolean [] SeparateLogicalGroups Declaration public bool SeparateLogicalGroups { get; } Property Value Type Description System.Boolean Summary Declaration public Summary Summary { get; } Property Value Type Description Summary Extension Methods SummaryTableExtensions.PrintCommonColumns(SummaryTable, ILogger) SummaryTableExtensions.PrintLine(SummaryTable, String[], ILogger, String, String) SummaryTableExtensions.PrintLine(SummaryTable, String[], ILogger, String, String, Boolean, Boolean, MarkdownExporter.MarkdownHighlightStrategy, String, Boolean)"
  },
  "api/BenchmarkDotNet.Reports.SummaryTableExtensions.html": {
    "href": "api/BenchmarkDotNet.Reports.SummaryTableExtensions.html",
    "title": "Class SummaryTableExtensions | BenchmarkDotNet",
    "keywords": "Class SummaryTableExtensions Inheritance System.Object SummaryTableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public static class SummaryTableExtensions Methods PrintCommonColumns(SummaryTable, ILogger) Declaration public static void PrintCommonColumns(this SummaryTable table, ILogger logger) Parameters Type Name Description SummaryTable table ILogger logger PrintLine(SummaryTable, String[], ILogger, String, String) Declaration public static void PrintLine(this SummaryTable table, string[] line, ILogger logger, string leftDel, string rightDel) Parameters Type Name Description SummaryTable table System.String [] line ILogger logger System.String leftDel System.String rightDel PrintLine(SummaryTable, String[], ILogger, String, String, Boolean, Boolean, MarkdownExporter.MarkdownHighlightStrategy, String, Boolean) Declaration public static void PrintLine(this SummaryTable table, string[] line, ILogger logger, string leftDel, string rightDel, bool highlightRow, bool startOfGroup, MarkdownExporter.MarkdownHighlightStrategy startOfGroupHighlightStrategy, string boldMarkupFormat, bool escapeHtml) Parameters Type Name Description SummaryTable table System.String [] line ILogger logger System.String leftDel System.String rightDel System.Boolean highlightRow System.Boolean startOfGroup MarkdownExporter.MarkdownHighlightStrategy startOfGroupHighlightStrategy System.String boldMarkupFormat System.Boolean escapeHtml"
  },
  "api/BenchmarkDotNet.Reports.html": {
    "href": "api/BenchmarkDotNet.Reports.html",
    "title": "Namespace BenchmarkDotNet.Reports | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Reports Classes BenchmarkReport BenchmarkReportExtensions MeasurementExtensions Summary SummaryExtensions SummaryStyle SummaryTable SummaryTable.SummaryTableColumn SummaryTableExtensions Structs Measurement The basic captured statistics for a benchmark. Interfaces ISummaryStyle Enums SummaryTable.SummaryTableColumn.TextJustification"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliGenerator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliGenerator.html",
    "title": "Class DotNetCliGenerator | BenchmarkDotNet",
    "keywords": "Class DotNetCliGenerator Inheritance System.Object GeneratorBase DotNetCliGenerator CsProjGenerator Implements IGenerator Inherited Members GeneratorBase.GenerateProject(BuildPartition, ILogger, String) GeneratorBase.GetBinariesDirectoryPath(String, String) GeneratorBase.GetProjectFilePath(String) GeneratorBase.GenerateNuGetConfig(ArtifactsPaths) GeneratorBase.GenerateProject(BuildPartition, ArtifactsPaths, ILogger) GeneratorBase.GetPackagesDirectoryPath(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.DotNetCli Assembly : BenchmarkDotNet.dll Syntax public abstract class DotNetCliGenerator : GeneratorBase, IGenerator Constructors DotNetCliGenerator(DotNetCliBuilder, String, String, Func<Platform, String>, String, String) Declaration protected DotNetCliGenerator(DotNetCliBuilder builder, string targetFrameworkMoniker, string extraDependencies, Func<Platform, string> platformProvider, string imports, string runtime = null) Parameters Type Name Description DotNetCliBuilder builder System.String targetFrameworkMoniker System.String extraDependencies System.Func < Platform , System.String > platformProvider System.String imports System.String runtime Properties ExtraDependencies Declaration protected string ExtraDependencies { get; } Property Value Type Description System.String Imports Declaration protected string Imports { get; } Property Value Type Description System.String PlatformProvider Declaration protected Func<Platform, string> PlatformProvider { get; } Property Value Type Description System.Func < Platform , System.String > Runtime Declaration protected string Runtime { get; } Property Value Type Description System.String TargetFrameworkMoniker Declaration protected string TargetFrameworkMoniker { get; } Property Value Type Description System.String Methods CopyAllRequiredFiles(ArtifactsPaths) Declaration protected override void CopyAllRequiredFiles(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Overrides GeneratorBase.CopyAllRequiredFiles(ArtifactsPaths) GenerateBuildScript(BuildPartition, ArtifactsPaths) Declaration protected override void GenerateBuildScript(BuildPartition buildPartition, ArtifactsPaths artifactsPaths) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths Overrides GeneratorBase.GenerateBuildScript(BuildPartition, ArtifactsPaths) GetArtifactsToCleanup(ArtifactsPaths) Declaration protected override string[] GetArtifactsToCleanup(ArtifactsPaths artifactsPaths) Parameters Type Name Description ArtifactsPaths artifactsPaths Returns Type Description System.String [] Overrides GeneratorBase.GetArtifactsToCleanup(ArtifactsPaths) GetBuildArtifactsDirectoryPath(BuildPartition, String) we need our folder to be on the same level as the project that we want to reference we are limited by xprojs (by default compiles all .cs files in all subfolders, Program.cs could be doubled and fail the build) and also by nuget internal implementation like looking for global.json file in parent folders Declaration protected override string GetBuildArtifactsDirectoryPath(BuildPartition buildPartition, string programName) Parameters Type Name Description BuildPartition buildPartition System.String programName Returns Type Description System.String Overrides GeneratorBase.GetBuildArtifactsDirectoryPath(BuildPartition, String) GetExecutableExtension() Declaration protected override string GetExecutableExtension() Returns Type Description System.String Overrides GeneratorBase.GetExecutableExtension() SetCodeFileName(String, String) Declaration protected static string SetCodeFileName(string template, string codeFileName) Parameters Type Name Description System.String template System.String codeFileName Returns Type Description System.String SetPlatform(String, String) Declaration protected static string SetPlatform(string template, string platform) Parameters Type Name Description System.String template System.String platform Returns Type Description System.String SetTargetFrameworkMoniker(String, String) Declaration protected static string SetTargetFrameworkMoniker(string content, string targetFrameworkMoniker) Parameters Type Name Description System.String content System.String targetFrameworkMoniker Returns Type Description System.String Implements IGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliPublisher.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliPublisher.html",
    "title": "Class DotNetCliPublisher | BenchmarkDotNet",
    "keywords": "Class DotNetCliPublisher Inheritance System.Object DotNetCliPublisher Publisher Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.DotNetCli Assembly : BenchmarkDotNet.dll Syntax public class DotNetCliPublisher : IBuilder Constructors DotNetCliPublisher(String) Declaration public DotNetCliPublisher(string customDotNetCliPath = null) Parameters Type Name Description System.String customDotNetCliPath Methods Build(GenerateResult, BuildPartition, ILogger) Declaration public BuildResult Build(GenerateResult generateResult, BuildPartition buildPartition, ILogger logger) Parameters Type Name Description GenerateResult generateResult BuildPartition buildPartition ILogger logger Returns Type Description BuildResult GetEnvironmentVariables() Declaration protected virtual IReadOnlyList<EnvironmentVariable> GetEnvironmentVariables() Returns Type Description System.Collections.Generic.IReadOnlyList < EnvironmentVariable > GetExtraArguments(BuildPartition) Declaration protected virtual string GetExtraArguments(BuildPartition buildPartition) Parameters Type Name Description BuildPartition buildPartition Returns Type Description System.String Implements IBuilder"
  },
  "api/BenchmarkDotNet.Toolchains.CsProj.CsProjGenerator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CsProj.CsProjGenerator.html",
    "title": "Class CsProjGenerator | BenchmarkDotNet",
    "keywords": "Class CsProjGenerator Inheritance System.Object GeneratorBase DotNetCliGenerator CsProjGenerator Generator Generator Implements IGenerator Inherited Members DotNetCliGenerator.TargetFrameworkMoniker DotNetCliGenerator.PlatformProvider DotNetCliGenerator.Runtime DotNetCliGenerator.ExtraDependencies DotNetCliGenerator.Imports DotNetCliGenerator.GetExecutableExtension() DotNetCliGenerator.GetArtifactsToCleanup(ArtifactsPaths) DotNetCliGenerator.CopyAllRequiredFiles(ArtifactsPaths) DotNetCliGenerator.GenerateBuildScript(BuildPartition, ArtifactsPaths) DotNetCliGenerator.SetPlatform(String, String) DotNetCliGenerator.SetCodeFileName(String, String) DotNetCliGenerator.SetTargetFrameworkMoniker(String, String) GeneratorBase.GenerateProject(BuildPartition, ILogger, String) GeneratorBase.GenerateNuGetConfig(ArtifactsPaths) GeneratorBase.GetPackagesDirectoryPath(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.CsProj Assembly : BenchmarkDotNet.dll Syntax public class CsProjGenerator : DotNetCliGenerator, IGenerator Constructors CsProjGenerator(String, Func<Platform, String>, String) Declaration public CsProjGenerator(string targetFrameworkMoniker, Func<Platform, string> platformProvider, string runtimeFrameworkVersion = null) Parameters Type Name Description System.String targetFrameworkMoniker System.Func < Platform , System.String > platformProvider System.String runtimeFrameworkVersion Properties RuntimeFrameworkVersion Declaration public string RuntimeFrameworkVersion { get; } Property Value Type Description System.String Methods GenerateProject(BuildPartition, ArtifactsPaths, ILogger) Declaration protected override void GenerateProject(BuildPartition buildPartition, ArtifactsPaths artifactsPaths, ILogger logger) Parameters Type Name Description BuildPartition buildPartition ArtifactsPaths artifactsPaths ILogger logger Overrides GeneratorBase.GenerateProject(BuildPartition, ArtifactsPaths, ILogger) GetBinariesDirectoryPath(String, String) Declaration protected override string GetBinariesDirectoryPath(string buildArtifactsDirectoryPath, string configuration) Parameters Type Name Description System.String buildArtifactsDirectoryPath System.String configuration Returns Type Description System.String Overrides GeneratorBase.GetBinariesDirectoryPath(String, String) GetBuildArtifactsDirectoryPath(BuildPartition, String) Declaration protected override string GetBuildArtifactsDirectoryPath(BuildPartition buildPartition, string programName) Parameters Type Name Description BuildPartition buildPartition System.String programName Returns Type Description System.String Overrides DotNetCliGenerator.GetBuildArtifactsDirectoryPath(BuildPartition, String) GetProjectFilePath(String) Declaration protected override string GetProjectFilePath(string binariesDirectoryPath) Parameters Type Name Description System.String binariesDirectoryPath Returns Type Description System.String Overrides GeneratorBase.GetProjectFilePath(String) GetProjectFilePath(Type, ILogger) Declaration protected static FileInfo GetProjectFilePath(Type benchmarkTarget, ILogger logger) Parameters Type Name Description System.Type benchmarkTarget ILogger logger Returns Type Description System.IO.FileInfo GetRuntimeSettings(GcMode, IResolver) Declaration protected string GetRuntimeSettings(GcMode gcMode, IResolver resolver) Parameters Type Name Description GcMode gcMode IResolver resolver Returns Type Description System.String Implements IGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.Parameters.ExecuteParameters.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Parameters.ExecuteParameters.html",
    "title": "Class ExecuteParameters | BenchmarkDotNet",
    "keywords": "Class ExecuteParameters Inheritance System.Object ExecuteParameters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.Parameters Assembly : BenchmarkDotNet.dll Syntax public class ExecuteParameters Constructors ExecuteParameters(BuildResult, Benchmark, BenchmarkId, ILogger, IResolver, IConfig, IDiagnoser) Declaration public ExecuteParameters(BuildResult buildResult, Benchmark benchmark, BenchmarkId benchmarkId, ILogger logger, IResolver resolver, IConfig config, IDiagnoser diagnoser = null) Parameters Type Name Description BuildResult buildResult Benchmark benchmark BenchmarkId benchmarkId ILogger logger IResolver resolver IConfig config IDiagnoser diagnoser Properties Benchmark Declaration public Benchmark Benchmark { get; } Property Value Type Description Benchmark BenchmarkId Declaration public BenchmarkId BenchmarkId { get; } Property Value Type Description BenchmarkId BuildResult Declaration public BuildResult BuildResult { get; } Property Value Type Description BuildResult Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Diagnoser Declaration public IDiagnoser Diagnoser { get; } Property Value Type Description IDiagnoser Logger Declaration public ILogger Logger { get; } Property Value Type Description ILogger Resolver Declaration public IResolver Resolver { get; } Property Value Type Description IResolver"
  },
  "api/BenchmarkDotNet.Toolchains.Parameters.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Parameters.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.Parameters | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.Parameters Classes ExecuteParameters"
  },
  "api/BenchmarkDotNet.Toolchains.Results.BuildResult.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Results.BuildResult.html",
    "title": "Class BuildResult | BenchmarkDotNet",
    "keywords": "Class BuildResult Inheritance System.Object GenerateResult BuildResult Inherited Members GenerateResult.ArtifactsPaths GenerateResult.IsGenerateSuccess GenerateResult.GenerateException GenerateResult.ArtifactsToCleanup GenerateResult.Success(ArtifactsPaths, IReadOnlyCollection<String>) GenerateResult.Failure(ArtifactsPaths, IReadOnlyCollection<String>, Exception) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.Results Assembly : BenchmarkDotNet.dll Syntax public class BuildResult : GenerateResult Properties BuildException Declaration public Exception BuildException { get; } Property Value Type Description System.Exception FailedToAccess Declaration public bool FailedToAccess { get; } Property Value Type Description System.Boolean IsBuildSuccess Declaration public bool IsBuildSuccess { get; } Property Value Type Description System.Boolean Methods Failure(GenerateResult, Exception) Declaration public static BuildResult Failure(GenerateResult generateResult, Exception exception = null) Parameters Type Name Description GenerateResult generateResult System.Exception exception Returns Type Description BuildResult Success(GenerateResult) Declaration public static BuildResult Success(GenerateResult generateResult) Parameters Type Name Description GenerateResult generateResult Returns Type Description BuildResult ToString() Declaration public override string ToString() Returns Type Description System.String Overrides GenerateResult.ToString()"
  },
  "api/BenchmarkDotNet.Toolchains.Results.ExecuteResult.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Results.ExecuteResult.html",
    "title": "Class ExecuteResult | BenchmarkDotNet",
    "keywords": "Class ExecuteResult Inheritance System.Object ExecuteResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.Results Assembly : BenchmarkDotNet.dll Syntax public class ExecuteResult Constructors ExecuteResult(Boolean, Int32, IReadOnlyList<String>, IReadOnlyList<String>) Declaration public ExecuteResult(bool foundExecutable, int exitCode, IReadOnlyList<string> data, IReadOnlyList<string> linesWithExtraOutput) Parameters Type Name Description System.Boolean foundExecutable System.Int32 exitCode System.Collections.Generic.IReadOnlyList < System.String > data System.Collections.Generic.IReadOnlyList < System.String > linesWithExtraOutput Properties Data Declaration public IReadOnlyList<string> Data { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.String > ExitCode Declaration public int ExitCode { get; } Property Value Type Description System.Int32 ExtraOutput Declaration public IReadOnlyList<string> ExtraOutput { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.String > FoundExecutable Declaration public bool FoundExecutable { get; } Property Value Type Description System.Boolean Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Analysers.IterationSetupCleanupAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.IterationSetupCleanupAnalyser.html",
    "title": "Class IterationSetupCleanupAnalyser | BenchmarkDotNet",
    "keywords": "Class IterationSetupCleanupAnalyser Inheritance System.Object AnalyserBase IterationSetupCleanupAnalyser Implements IAnalyser Inherited Members AnalyserBase.Analyse(Summary) AnalyserBase.AnalyseSummary(Summary) AnalyserBase.CreateHint(String, BenchmarkReport) AnalyserBase.CreateWarning(String, BenchmarkReport) AnalyserBase.CreateError(String, BenchmarkReport) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class IterationSetupCleanupAnalyser : AnalyserBase, IAnalyser Fields Default Declaration public static readonly IAnalyser Default Field Value Type Description IAnalyser Properties Id Declaration public override string Id { get; } Property Value Type Description System.String Overrides AnalyserBase.Id Methods AnalyseReport(BenchmarkReport, Summary) Declaration public override IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseReport(BenchmarkReport, Summary) Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Analysers.MultimodalDistributionAnalyzer.html": {
    "href": "api/BenchmarkDotNet.Analysers.MultimodalDistributionAnalyzer.html",
    "title": "Class MultimodalDistributionAnalyzer | BenchmarkDotNet",
    "keywords": "Class MultimodalDistributionAnalyzer Inheritance System.Object AnalyserBase MultimodalDistributionAnalyzer Implements IAnalyser Inherited Members AnalyserBase.Analyse(Summary) AnalyserBase.AnalyseSummary(Summary) AnalyserBase.CreateHint(String, BenchmarkReport) AnalyserBase.CreateWarning(String, BenchmarkReport) AnalyserBase.CreateError(String, BenchmarkReport) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class MultimodalDistributionAnalyzer : AnalyserBase, IAnalyser Fields Default Declaration public static readonly IAnalyser Default Field Value Type Description IAnalyser Properties Id Declaration public override string Id { get; } Property Value Type Description System.String Overrides AnalyserBase.Id Methods AnalyseReport(BenchmarkReport, Summary) Declaration public override IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseReport(BenchmarkReport, Summary) Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Attributes.ArgumentsAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ArgumentsAttribute.html",
    "title": "Class ArgumentsAttribute | BenchmarkDotNet",
    "keywords": "Class ArgumentsAttribute Inheritance System.Object System.Attribute ArgumentsAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class ArgumentsAttribute : Attribute Constructors ArgumentsAttribute() Declaration public ArgumentsAttribute() ArgumentsAttribute(Object[]) Declaration public ArgumentsAttribute(params object[] values) Parameters Type Name Description System.Object [] values Properties Values Declaration public object[] Values { get; } Property Value Type Description System.Object []"
  },
  "api/BenchmarkDotNet.Attributes.CleanupAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.CleanupAttribute.html",
    "title": "Class CleanupAttribute | BenchmarkDotNet",
    "keywords": "Class CleanupAttribute Marks method to be executed after all benchmark iterations. It's going to be executed only once, after all benchmark runs. Inheritance System.Object System.Attribute TargetedAttribute GlobalCleanupAttribute CleanupAttribute Inherited Members TargetedAttribute.Target System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] [Obsolete(\"Use GlobalCleanupAttribute\")] public class CleanupAttribute : GlobalCleanupAttribute"
  },
  "api/BenchmarkDotNet.Attributes.DisassemblyDiagnoserAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.DisassemblyDiagnoserAttribute.html",
    "title": "Class DisassemblyDiagnoserAttribute | BenchmarkDotNet",
    "keywords": "Class DisassemblyDiagnoserAttribute Inheritance System.Object System.Attribute DisassemblyDiagnoserAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class DisassemblyDiagnoserAttribute : Attribute, IConfigSource Constructors DisassemblyDiagnoserAttribute(Boolean, Boolean, Boolean, Boolean, Int32) Declaration public DisassemblyDiagnoserAttribute(bool printAsm = true, bool printIL = false, bool printSource = false, bool printPrologAndEpilog = false, int recursiveDepth = 1) Parameters Type Name Description System.Boolean printAsm ASM will be printed. True by default. System.Boolean printIL IL will be printed. False by default. System.Boolean printSource C# source code will be printed. False by default. System.Boolean printPrologAndEpilog ASM for prolog and epilog will be printed. False by default. System.Int32 recursiveDepth Includes called methods to given level. 1 by default, indexed from 1. To print just benchmark set to 0 Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.EncodingAttribute.ASCII.html": {
    "href": "api/BenchmarkDotNet.Attributes.EncodingAttribute.ASCII.html",
    "title": "Class EncodingAttribute.ASCII | BenchmarkDotNet",
    "keywords": "Class EncodingAttribute.ASCII Inheritance System.Object System.Attribute EncodingAttribute EncodingAttribute.ASCII Implements IConfigSource Inherited Members EncodingAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ASCII : EncodingAttribute, IConfigSource Constructors ASCII() Declaration public ASCII() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.GroupBenchmarksByAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.GroupBenchmarksByAttribute.html",
    "title": "Class GroupBenchmarksByAttribute | BenchmarkDotNet",
    "keywords": "Class GroupBenchmarksByAttribute Inheritance System.Object System.Attribute GroupBenchmarksByAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class GroupBenchmarksByAttribute : Attribute, IConfigSource Constructors GroupBenchmarksByAttribute() Declaration protected GroupBenchmarksByAttribute() GroupBenchmarksByAttribute(BenchmarkLogicalGroupRule[]) Declaration public GroupBenchmarksByAttribute(params BenchmarkLogicalGroupRule[] rules) Parameters Type Name Description BenchmarkLogicalGroupRule [] rules Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.IterationSetupAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.IterationSetupAttribute.html",
    "title": "Class IterationSetupAttribute | BenchmarkDotNet",
    "keywords": "Class IterationSetupAttribute Marks method to be executed before each benchmark iteration. Inheritance System.Object System.Attribute TargetedAttribute IterationSetupAttribute Inherited Members TargetedAttribute.Target System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class IterationSetupAttribute : TargetedAttribute"
  },
  "api/BenchmarkDotNet.Attributes.LegacyJitX64JobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.LegacyJitX64JobAttribute.html",
    "title": "Class LegacyJitX64JobAttribute | BenchmarkDotNet",
    "keywords": "Class LegacyJitX64JobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute LegacyJitX64JobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class LegacyJitX64JobAttribute : JobConfigBaseAttribute, IConfigSource Constructors LegacyJitX64JobAttribute() Declaration public LegacyJitX64JobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.LegacyJitX86JobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.LegacyJitX86JobAttribute.html",
    "title": "Class LegacyJitX86JobAttribute | BenchmarkDotNet",
    "keywords": "Class LegacyJitX86JobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute LegacyJitX86JobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class LegacyJitX86JobAttribute : JobConfigBaseAttribute, IConfigSource Constructors LegacyJitX86JobAttribute() Declaration public LegacyJitX86JobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.NamespaceColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.NamespaceColumnAttribute.html",
    "title": "Class NamespaceColumnAttribute | BenchmarkDotNet",
    "keywords": "Class NamespaceColumnAttribute Add a column with the target method namespace. Inheritance System.Object System.Attribute ColumnConfigBaseAttribute NamespaceColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class NamespaceColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors NamespaceColumnAttribute() Declaration public NamespaceColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.OrderProviderAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.OrderProviderAttribute.html",
    "title": "Class OrderProviderAttribute | BenchmarkDotNet",
    "keywords": "Class OrderProviderAttribute Inheritance System.Object System.Attribute OrderProviderAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public class OrderProviderAttribute : Attribute, IConfigSource Constructors OrderProviderAttribute(SummaryOrderPolicy, MethodOrderPolicy) Declaration public OrderProviderAttribute(SummaryOrderPolicy summaryOrderPolicy = SummaryOrderPolicy.Default, MethodOrderPolicy methodOrderPolicy = MethodOrderPolicy.Declared) Parameters Type Name Description SummaryOrderPolicy summaryOrderPolicy MethodOrderPolicy methodOrderPolicy Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.StdDevColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.StdDevColumnAttribute.html",
    "title": "Class StdDevColumnAttribute | BenchmarkDotNet",
    "keywords": "Class StdDevColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute StdDevColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class StdDevColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors StdDevColumnAttribute() Declaration public StdDevColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.StdErrorColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.StdErrorColumnAttribute.html",
    "title": "Class StdErrorColumnAttribute | BenchmarkDotNet",
    "keywords": "Class StdErrorColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute StdErrorColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class StdErrorColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors StdErrorColumnAttribute() Declaration public StdErrorColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Characteristics.CharacteristicObject.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CharacteristicObject.html",
    "title": "Class CharacteristicObject | BenchmarkDotNet",
    "keywords": "Class CharacteristicObject Inheritance System.Object CharacteristicObject CharacteristicObject<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public abstract class CharacteristicObject Constructors CharacteristicObject() Declaration protected CharacteristicObject() CharacteristicObject(String) Declaration protected CharacteristicObject(string id) Parameters Type Name Description System.String id Fields IdCharacteristic Declaration public static readonly Characteristic<string> IdCharacteristic Field Value Type Description Characteristic < System.String > Properties Frozen Declaration public bool Frozen { get; } Property Value Type Description System.Boolean HasChanges Declaration public bool HasChanges { get; } Property Value Type Description System.Boolean Id Declaration public string Id { get; } Property Value Type Description System.String IsPropertyBag Declaration protected virtual bool IsPropertyBag { get; } Property Value Type Description System.Boolean Owner Declaration protected CharacteristicObject Owner { get; } Property Value Type Description CharacteristicObject OwnerOrSelf Declaration protected CharacteristicObject OwnerOrSelf { get; } Property Value Type Description CharacteristicObject Methods Apply(CharacteristicObject) Declaration public void Apply(CharacteristicObject other) Parameters Type Name Description CharacteristicObject other ApplyCore(CharacteristicObject) Declaration protected CharacteristicObject ApplyCore(CharacteristicObject other) Parameters Type Name Description CharacteristicObject other Returns Type Description CharacteristicObject AssertIsAssignable(Characteristic, Object) Declaration protected void AssertIsAssignable(Characteristic characteristic, object value) Parameters Type Name Description Characteristic characteristic System.Object value AssertIsNonFrozenRoot() Declaration protected void AssertIsNonFrozenRoot() AssertIsRoot() Declaration protected void AssertIsRoot() AssertNotFrozen() Declaration protected void AssertNotFrozen() Freeze() Declaration public void Freeze() FreezeCore() Declaration protected CharacteristicObject FreezeCore() Returns Type Description CharacteristicObject GetCharacteristicsWithValues() Declaration public IEnumerable<Characteristic> GetCharacteristicsWithValues() Returns Type Description System.Collections.Generic.IEnumerable < Characteristic > HasValue(Characteristic) Declaration public bool HasValue(Characteristic characteristic) Parameters Type Name Description Characteristic characteristic Returns Type Description System.Boolean ResolveId(CharacteristicObject, String) Declaration protected static string ResolveId(CharacteristicObject obj, string actual) Parameters Type Name Description CharacteristicObject obj System.String actual Returns Type Description System.String ResolveValue(Characteristic, IResolver) Declaration public object ResolveValue(Characteristic characteristic, IResolver resolver) Parameters Type Name Description Characteristic characteristic IResolver resolver Returns Type Description System.Object ResolveValue(Characteristic, Object) Declaration public object ResolveValue(Characteristic characteristic, object defaultValue) Parameters Type Name Description Characteristic characteristic System.Object defaultValue Returns Type Description System.Object ResolveValue<T>(Characteristic<T>, T) Declaration public T ResolveValue<T>(Characteristic<T> characteristic, T defaultValue) Parameters Type Name Description Characteristic <T> characteristic T defaultValue Returns Type Description T Type Parameters Name Description T ResolveValue<T>(Characteristic<T>, IResolver) Declaration public T ResolveValue<T>(Characteristic<T> characteristic, IResolver resolver) Parameters Type Name Description Characteristic <T> characteristic IResolver resolver Returns Type Description T Type Parameters Name Description T ResolveValueAsNullable<T>(Characteristic<T>) Declaration public T? ResolveValueAsNullable<T>(Characteristic<T> characteristic) where T : struct Parameters Type Name Description Characteristic <T> characteristic Returns Type Description System.Nullable <T> Type Parameters Name Description T ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() UnfreezeCopy() Declaration public CharacteristicObject UnfreezeCopy() Returns Type Description CharacteristicObject UnfreezeCopyCore() Declaration protected CharacteristicObject UnfreezeCopyCore() Returns Type Description CharacteristicObject Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Characteristics.CharacteristicPresenter.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CharacteristicPresenter.html",
    "title": "Class CharacteristicPresenter | BenchmarkDotNet",
    "keywords": "Class CharacteristicPresenter Inheritance System.Object CharacteristicPresenter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public abstract class CharacteristicPresenter Fields DefaultPresenter Declaration public static readonly CharacteristicPresenter DefaultPresenter Field Value Type Description CharacteristicPresenter FolderPresenter Declaration public static readonly CharacteristicPresenter FolderPresenter Field Value Type Description CharacteristicPresenter SourceCodePresenter Declaration public static readonly CharacteristicPresenter SourceCodePresenter Field Value Type Description CharacteristicPresenter SummaryPresenter Declaration public static readonly CharacteristicPresenter SummaryPresenter Field Value Type Description CharacteristicPresenter Methods ToPresentation(CharacteristicObject, Characteristic) Declaration public abstract string ToPresentation(CharacteristicObject obj, Characteristic characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic characteristic Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Columns.CompositeColumnProvider.html": {
    "href": "api/BenchmarkDotNet.Columns.CompositeColumnProvider.html",
    "title": "Class CompositeColumnProvider | BenchmarkDotNet",
    "keywords": "Class CompositeColumnProvider Inheritance System.Object CompositeColumnProvider Implements IColumnProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class CompositeColumnProvider : IColumnProvider Constructors CompositeColumnProvider(IColumnProvider[]) Declaration public CompositeColumnProvider(params IColumnProvider[] providers) Parameters Type Name Description IColumnProvider [] providers Methods GetColumns(Summary) Declaration public IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < IColumn > Implements IColumnProvider"
  },
  "api/BenchmarkDotNet.Columns.DefaultColumnProviders.html": {
    "href": "api/BenchmarkDotNet.Columns.DefaultColumnProviders.html",
    "title": "Class DefaultColumnProviders | BenchmarkDotNet",
    "keywords": "Class DefaultColumnProviders Inheritance System.Object DefaultColumnProviders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public static class DefaultColumnProviders Fields Diagnosers Declaration public static readonly IColumnProvider Diagnosers Field Value Type Description IColumnProvider Instance Declaration public static readonly IColumnProvider[] Instance Field Value Type Description IColumnProvider [] Job Declaration public static readonly IColumnProvider Job Field Value Type Description IColumnProvider Params Declaration public static readonly IColumnProvider Params Field Value Type Description IColumnProvider Statistics Declaration public static readonly IColumnProvider Statistics Field Value Type Description IColumnProvider Target Declaration public static readonly IColumnProvider Target Field Value Type Description IColumnProvider"
  },
  "api/BenchmarkDotNet.Columns.UnitType.html": {
    "href": "api/BenchmarkDotNet.Columns.UnitType.html",
    "title": "Enum UnitType | BenchmarkDotNet",
    "keywords": "Enum UnitType Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public enum UnitType Fields Name Description Dimensionless Size Time"
  },
  "api/BenchmarkDotNet.Columns.html": {
    "href": "api/BenchmarkDotNet.Columns.html",
    "title": "Namespace BenchmarkDotNet.Columns | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Columns Classes BaselineScaledColumn CategoriesColumn ColumnExtensions CompositeColumnProvider DefaultColumnProviders EmptyColumnProvider IsBaselineColumn JobCharacteristicColumn LogicalGroupColumn ParamColumn RankColumn SimpleColumnProvider SizeUnit StatisticColumn TagColumn TargetMethodColumn Interfaces IColumn IColumnProvider Enums BaselineScaledColumn.DiffKind ColumnCategory StatisticColumn.Priority UnitType"
  },
  "api/BenchmarkDotNet.Diagnosers.DiagnoserResults.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DiagnoserResults.html",
    "title": "Class DiagnoserResults | BenchmarkDotNet",
    "keywords": "Class DiagnoserResults Inheritance System.Object DiagnoserResults Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DiagnoserResults Constructors DiagnoserResults(Benchmark, Int64, GcStats) Declaration public DiagnoserResults(Benchmark benchmark, long totalOperations, GcStats gcStats) Parameters Type Name Description Benchmark benchmark System.Int64 totalOperations GcStats gcStats Properties Benchmark Declaration public Benchmark Benchmark { get; } Property Value Type Description Benchmark GcStats Declaration public GcStats GcStats { get; } Property Value Type Description GcStats TotalOperations Declaration public long TotalOperations { get; } Property Value Type Description System.Int64"
  },
  "api/BenchmarkDotNet.Diagnosers.DisassembledMethod.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DisassembledMethod.html",
    "title": "Class DisassembledMethod | BenchmarkDotNet",
    "keywords": "Class DisassembledMethod Inheritance System.Object DisassembledMethod Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DisassembledMethod Properties CommandLine Declaration public string CommandLine { get; set; } Property Value Type Description System.String Maps Declaration public Map[] Maps { get; set; } Property Value Type Description Map [] Name Declaration public string Name { get; set; } Property Value Type Description System.String NativeCode Declaration public ulong NativeCode { get; set; } Property Value Type Description System.UInt64 Problem Declaration public string Problem { get; set; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Diagnosers.PmcStats.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.PmcStats.html",
    "title": "Class PmcStats | BenchmarkDotNet",
    "keywords": "Class PmcStats Inheritance System.Object PmcStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class PmcStats Constructors PmcStats() Declaration public PmcStats() PmcStats(IReadOnlyCollection<HardwareCounter>, Func<HardwareCounter, PreciseMachineCounter>) Declaration public PmcStats(IReadOnlyCollection<HardwareCounter> hardwareCounters, Func<HardwareCounter, PreciseMachineCounter> factory) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < HardwareCounter > hardwareCounters System.Func < HardwareCounter , PreciseMachineCounter > factory Properties Counters Declaration public IReadOnlyDictionary<HardwareCounter, PreciseMachineCounter> Counters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < HardwareCounter , PreciseMachineCounter > TotalOperations Declaration public long TotalOperations { get; set; } Property Value Type Description System.Int64"
  },
  "api/BenchmarkDotNet.Diagnosers.PreciseMachineCounter.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.PreciseMachineCounter.html",
    "title": "Class PreciseMachineCounter | BenchmarkDotNet",
    "keywords": "Class PreciseMachineCounter Inheritance System.Object PreciseMachineCounter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class PreciseMachineCounter Properties Count Declaration public ulong Count { get; } Property Value Type Description System.UInt64 Counter Declaration public HardwareCounter Counter { get; } Property Value Type Description HardwareCounter Interval Declaration public int Interval { get; } Property Value Type Description System.Int32 Name Declaration public string Name { get; } Property Value Type Description System.String PerInstructionPointer Declaration public Dictionary<ulong, ulong> PerInstructionPointer { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.UInt64 , System.UInt64 > ProfileSourceId Declaration public int ProfileSourceId { get; } Property Value Type Description System.Int32 Methods OnSample(UInt64) Declaration public void OnSample(ulong instructionPointer) Parameters Type Name Description System.UInt64 instructionPointer"
  },
  "api/BenchmarkDotNet.Engines.GcStats.html": {
    "href": "api/BenchmarkDotNet.Engines.GcStats.html",
    "title": "Struct GcStats | BenchmarkDotNet",
    "keywords": "Struct GcStats Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public struct GcStats Fields AllocationQuantum Declaration public static readonly long AllocationQuantum Field Value Type Description System.Int64 Empty Declaration public static readonly GcStats Empty Field Value Type Description GcStats Properties BytesAllocatedPerOperation Declaration public long BytesAllocatedPerOperation { get; } Property Value Type Description System.Int64 Gen0Collections Declaration public int Gen0Collections { get; } Property Value Type Description System.Int32 Gen1Collections Declaration public int Gen1Collections { get; } Property Value Type Description System.Int32 Gen2Collections Declaration public int Gen2Collections { get; } Property Value Type Description System.Int32 TotalOperations Declaration public long TotalOperations { get; } Property Value Type Description System.Int64 Methods FromForced(Int32) Declaration public static GcStats FromForced(int forcedFullGarbageCollections) Parameters Type Name Description System.Int32 forcedFullGarbageCollections Returns Type Description GcStats GetCollectionsCount(Int32) Declaration public int GetCollectionsCount(int generation) Parameters Type Name Description System.Int32 generation Returns Type Description System.Int32 GetTotalAllocatedBytes(Boolean) returns total allocated bytes (not per operation) Declaration public long GetTotalAllocatedBytes(bool excludeAllocationQuantumSideEffects) Parameters Type Name Description System.Boolean excludeAllocationQuantumSideEffects Allocation quantum can affecting some of our nano-benchmarks in non-deterministic way. when this parameter is set to true and the number of all allocated bytes is less or equal AQ, we ignore AQ and put 0 to the results Returns Type Description System.Int64 Parse(String) Declaration public static GcStats Parse(string line) Parameters Type Name Description System.String line Returns Type Description GcStats ReadFinal() Declaration public static GcStats ReadFinal() Returns Type Description GcStats ReadInitial() Declaration public static GcStats ReadInitial() Returns Type Description GcStats ToOutputLine() Declaration public string ToOutputLine() Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() WithTotalOperations(Int64) Declaration public GcStats WithTotalOperations(long totalOperationsCount) Parameters Type Name Description System.Int64 totalOperationsCount Returns Type Description GcStats Operators Addition(GcStats, GcStats) Declaration public static GcStats operator +(GcStats left, GcStats right) Parameters Type Name Description GcStats left GcStats right Returns Type Description GcStats Subtraction(GcStats, GcStats) Declaration public static GcStats operator -(GcStats left, GcStats right) Parameters Type Name Description GcStats left GcStats right Returns Type Description GcStats"
  },
  "api/BenchmarkDotNet.Engines.HostExtensions.html": {
    "href": "api/BenchmarkDotNet.Engines.HostExtensions.html",
    "title": "Class HostExtensions | BenchmarkDotNet",
    "keywords": "Class HostExtensions Inheritance System.Object HostExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public static class HostExtensions Methods AfterAll(IHost) Declaration public static void AfterAll(this IHost host) Parameters Type Name Description IHost host AfterMainRun(IHost) Declaration public static void AfterMainRun(this IHost host) Parameters Type Name Description IHost host BeforeAnythingElse(IHost) Declaration public static void BeforeAnythingElse(this IHost host) Parameters Type Name Description IHost host BeforeMainRun(IHost) Declaration public static void BeforeMainRun(this IHost host) Parameters Type Name Description IHost host WriteLine(IHost, String, Object[]) Declaration public static void WriteLine(this IHost host, string messageFormat, params object[] args) Parameters Type Name Description IHost host System.String messageFormat System.Object [] args"
  },
  "api/BenchmarkDotNet.Engines.HostSignal.html": {
    "href": "api/BenchmarkDotNet.Engines.HostSignal.html",
    "title": "Enum HostSignal | BenchmarkDotNet",
    "keywords": "Enum HostSignal Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public enum HostSignal Fields Name Description AfterAll after all (the last thing the benchmarking engine does is to fire this signal) AfterMainRun after main run, but before global Cleanup BeforeAnythingElse before jitting, warmup BeforeMainRun after globalSetup, warmup and pilot but before the main run SeparateLogic used to run some code independent to the benchmarked process"
  },
  "api/BenchmarkDotNet.Analysers.AnalyserBase.html": {
    "href": "api/BenchmarkDotNet.Analysers.AnalyserBase.html",
    "title": "Class AnalyserBase | BenchmarkDotNet",
    "keywords": "Class AnalyserBase Inheritance System.Object AnalyserBase EnvironmentAnalyser IterationSetupCleanupAnalyser MinIterationTimeAnalyser MultimodalDistributionAnalyzer OutliersAnalyser RuntimeErrorAnalyser Implements IAnalyser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public abstract class AnalyserBase : IAnalyser Properties Id Declaration public abstract string Id { get; } Property Value Type Description System.String Methods Analyse(Summary) Declaration public IEnumerable<Conclusion> Analyse(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > AnalyseReport(BenchmarkReport, Summary) Declaration public virtual IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > AnalyseSummary(Summary) Declaration public virtual IEnumerable<Conclusion> AnalyseSummary(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > CreateError(String, BenchmarkReport) Declaration public Conclusion CreateError(string message, BenchmarkReport report = null) Parameters Type Name Description System.String message BenchmarkReport report Returns Type Description Conclusion CreateHint(String, BenchmarkReport) Declaration public Conclusion CreateHint(string message, BenchmarkReport report = null) Parameters Type Name Description System.String message BenchmarkReport report Returns Type Description Conclusion CreateWarning(String, BenchmarkReport) Declaration public Conclusion CreateWarning(string message, BenchmarkReport report = null) Parameters Type Name Description System.String message BenchmarkReport report Returns Type Description Conclusion Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Analysers.html": {
    "href": "api/BenchmarkDotNet.Analysers.html",
    "title": "Namespace BenchmarkDotNet.Analysers | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Analysers Classes AnalyserBase CompositeAnalyser Conclusion ConclusionHelper EnvironmentAnalyser IterationSetupCleanupAnalyser MinIterationTimeAnalyser MultimodalDistributionAnalyzer OutliersAnalyser RuntimeErrorAnalyser Interfaces IAnalyser Enums ConclusionKind"
  },
  "api/BenchmarkDotNet.Attributes.AsciiDocExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.AsciiDocExporterAttribute.html",
    "title": "Class AsciiDocExporterAttribute | BenchmarkDotNet",
    "keywords": "Class AsciiDocExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute AsciiDocExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class AsciiDocExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors AsciiDocExporterAttribute() Declaration public AsciiDocExporterAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ConfidenceIntervalErrorColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ConfidenceIntervalErrorColumnAttribute.html",
    "title": "Class ConfidenceIntervalErrorColumnAttribute | BenchmarkDotNet",
    "keywords": "Class ConfidenceIntervalErrorColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute ConfidenceIntervalErrorColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ConfidenceIntervalErrorColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors ConfidenceIntervalErrorColumnAttribute(ConfidenceLevel) Declaration public ConfidenceIntervalErrorColumnAttribute(ConfidenceLevel level = ConfidenceLevel.L999) Parameters Type Name Description ConfidenceLevel level Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.DryCoreJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.DryCoreJobAttribute.html",
    "title": "Class DryCoreJobAttribute | BenchmarkDotNet",
    "keywords": "Class DryCoreJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute DryCoreJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class DryCoreJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors DryCoreJobAttribute() Declaration public DryCoreJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ExecutionValidatorAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ExecutionValidatorAttribute.html",
    "title": "Class ExecutionValidatorAttribute | BenchmarkDotNet",
    "keywords": "Class ExecutionValidatorAttribute Inheritance System.Object System.Attribute ValidatorConfigBaseAttribute ExecutionValidatorAttribute Implements IConfigSource Inherited Members ValidatorConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ExecutionValidatorAttribute : ValidatorConfigBaseAttribute, IConfigSource Constructors ExecutionValidatorAttribute() Declaration public ExecutionValidatorAttribute() ExecutionValidatorAttribute(Boolean) Declaration public ExecutionValidatorAttribute(bool failOnError) Parameters Type Name Description System.Boolean failOnError Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.FullCompressed.html": {
    "href": "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.FullCompressed.html",
    "title": "Class XmlExporterAttribute.FullCompressed | BenchmarkDotNet",
    "keywords": "Class XmlExporterAttribute.FullCompressed Inheritance System.Object System.Attribute ExporterConfigBaseAttribute XmlExporterAttribute XmlExporterAttribute.FullCompressed Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class FullCompressed : XmlExporterAttribute, IConfigSource Constructors FullCompressed() Declaration public FullCompressed() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Code.ArrayParam-1.html": {
    "href": "api/BenchmarkDotNet.Code.ArrayParam-1.html",
    "title": "Class ArrayParam<T> | BenchmarkDotNet",
    "keywords": "Class ArrayParam<T> Inheritance System.Object ArrayParam<T> Implements IParam Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Code Assembly : BenchmarkDotNet.dll Syntax public class ArrayParam<T> : IParam Type Parameters Name Description T Properties DisplayText Declaration public string DisplayText { get; } Property Value Type Description System.String Value Declaration public object Value { get; } Property Value Type Description System.Object Methods ForComplexTypes(T[], Func<T, String>) for types where calling .ToString() will be NOT enough to re-create them in auto-generated source code file Declaration public static ArrayParam<T> ForComplexTypes(T[] array, Func<T, string> toSourceCode) Parameters Type Name Description T[] array the array System.Func <T, System.String > toSourceCode method which tranforms an item of type T to it's C# representation example: point => $\"new Point2d({point.X}, {point.Y})\" Returns Type Description ArrayParam <T> ForPrimitives(T[]) for types where calling .ToString() will be enough to re-create them in auto-generated source code file (integers, strings and other primitives) Declaration public static ArrayParam<T> ForPrimitives(T[] array) Parameters Type Name Description T[] array Returns Type Description ArrayParam <T> ToSourceCode() Declaration public string ToSourceCode() Returns Type Description System.String Implements IParam"
  },
  "api/BenchmarkDotNet.Code.IParam.html": {
    "href": "api/BenchmarkDotNet.Code.IParam.html",
    "title": "Interface IParam | BenchmarkDotNet",
    "keywords": "Interface IParam Namespace : BenchmarkDotNet.Code Assembly : BenchmarkDotNet.dll Syntax public interface IParam Properties DisplayText used to display the value (e.g. in summary in Params column) Declaration string DisplayText { get; } Property Value Type Description System.String Value value of the parameter object for benchmark used internally (e.g. by the InProcessToolchain) Declaration object Value { get; } Property Value Type Description System.Object Methods ToSourceCode() this source code is used to create parameter for benchmark in C# source code file example: $\"new Point2D({Value.X}, {Value.Y})\" Declaration string ToSourceCode() Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Columns.ParamColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.ParamColumn.html",
    "title": "Class ParamColumn | BenchmarkDotNet",
    "keywords": "Class ParamColumn Inheritance System.Object ParamColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class ParamColumn : IColumn Constructors ParamColumn(String) Declaration public ParamColumn(string columnName) Parameters Type Name Description System.String columnName Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Columns.RankColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.RankColumn.html",
    "title": "Class RankColumn | BenchmarkDotNet",
    "keywords": "Class RankColumn Inheritance System.Object RankColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class RankColumn : IColumn Constructors RankColumn(NumeralSystem) Declaration public RankColumn(NumeralSystem system) Parameters Type Name Description NumeralSystem system Fields Arabic Declaration public static readonly IColumn Arabic Field Value Type Description IColumn Roman Declaration public static readonly IColumn Roman Field Value Type Description IColumn Stars Declaration public static readonly IColumn Stars Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Configs.IConfigSource.html": {
    "href": "api/BenchmarkDotNet.Configs.IConfigSource.html",
    "title": "Interface IConfigSource | BenchmarkDotNet",
    "keywords": "Interface IConfigSource Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public interface IConfigSource Properties Config Declaration IConfig Config { get; } Property Value Type Description IConfig"
  },
  "api/BenchmarkDotNet.Configs.ManualConfig.html": {
    "href": "api/BenchmarkDotNet.Configs.ManualConfig.html",
    "title": "Class ManualConfig | BenchmarkDotNet",
    "keywords": "Class ManualConfig Inheritance System.Object ManualConfig Implements IConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public class ManualConfig : IConfig Properties ArtifactsPath Declaration public string ArtifactsPath { get; set; } Property Value Type Description System.String Encoding Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding KeepBenchmarkFiles Declaration public bool KeepBenchmarkFiles { get; set; } Property Value Type Description System.Boolean UnionRule Declaration public ConfigUnionRule UnionRule { get; set; } Property Value Type Description ConfigUnionRule Methods Add(IAnalyser[]) Declaration public void Add(params IAnalyser[] newAnalysers) Parameters Type Name Description IAnalyser [] newAnalysers Add(IColumn[]) Declaration public void Add(params IColumn[] newColumns) Parameters Type Name Description IColumn [] newColumns Add(IColumnProvider[]) Declaration public void Add(params IColumnProvider[] newColumnProviders) Parameters Type Name Description IColumnProvider [] newColumnProviders Add(BenchmarkLogicalGroupRule[]) Declaration public void Add(params BenchmarkLogicalGroupRule[] rules) Parameters Type Name Description BenchmarkLogicalGroupRule [] rules Add(IConfig) Declaration public void Add(IConfig config) Parameters Type Name Description IConfig config Add(HardwareCounter[]) Declaration public void Add(params HardwareCounter[] newHardwareCounters) Parameters Type Name Description HardwareCounter [] newHardwareCounters Add(IDiagnoser[]) Declaration public void Add(params IDiagnoser[] newDiagnosers) Parameters Type Name Description IDiagnoser [] newDiagnosers Add(IExporter[]) Declaration public void Add(params IExporter[] newExporters) Parameters Type Name Description IExporter [] newExporters Add(IFilter[]) Declaration public void Add(params IFilter[] newFilters) Parameters Type Name Description IFilter [] newFilters Add(Job[]) Declaration public void Add(params Job[] newJobs) Parameters Type Name Description Job [] newJobs Add(ILogger[]) Declaration public void Add(params ILogger[] newLoggers) Parameters Type Name Description ILogger [] newLoggers Add(IValidator[]) Declaration public void Add(params IValidator[] newValidators) Parameters Type Name Description IValidator [] newValidators Create(IConfig) Declaration public static ManualConfig Create(IConfig config) Parameters Type Name Description IConfig config Returns Type Description ManualConfig CreateEmpty() Declaration public static ManualConfig CreateEmpty() Returns Type Description ManualConfig GetAnalysers() Declaration public IEnumerable<IAnalyser> GetAnalysers() Returns Type Description System.Collections.Generic.IEnumerable < IAnalyser > GetColumnProviders() Declaration public IEnumerable<IColumnProvider> GetColumnProviders() Returns Type Description System.Collections.Generic.IEnumerable < IColumnProvider > GetDiagnosers() Declaration public IEnumerable<IDiagnoser> GetDiagnosers() Returns Type Description System.Collections.Generic.IEnumerable < IDiagnoser > GetExporters() Declaration public IEnumerable<IExporter> GetExporters() Returns Type Description System.Collections.Generic.IEnumerable < IExporter > GetFilters() Declaration public IEnumerable<IFilter> GetFilters() Returns Type Description System.Collections.Generic.IEnumerable < IFilter > GetHardwareCounters() Declaration public IEnumerable<HardwareCounter> GetHardwareCounters() Returns Type Description System.Collections.Generic.IEnumerable < HardwareCounter > GetJobs() Declaration public IEnumerable<Job> GetJobs() Returns Type Description System.Collections.Generic.IEnumerable < Job > GetLoggers() Declaration public IEnumerable<ILogger> GetLoggers() Returns Type Description System.Collections.Generic.IEnumerable < ILogger > GetLogicalGroupRules() Declaration public IEnumerable<BenchmarkLogicalGroupRule> GetLogicalGroupRules() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkLogicalGroupRule > GetOrderProvider() Declaration public IOrderProvider GetOrderProvider() Returns Type Description IOrderProvider GetSummaryStyle() Declaration public ISummaryStyle GetSummaryStyle() Returns Type Description ISummaryStyle GetValidators() Declaration public IEnumerable<IValidator> GetValidators() Returns Type Description System.Collections.Generic.IEnumerable < IValidator > Parse(String[]) Declaration public static IConfig Parse(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IConfig PrintOptions(ILogger, Int32, Int32) Declaration public static void PrintOptions(ILogger logger, int prefixWidth, int outputWidth) Parameters Type Name Description ILogger logger System.Int32 prefixWidth System.Int32 outputWidth Set(IOrderProvider) Declaration public void Set(IOrderProvider provider) Parameters Type Name Description IOrderProvider provider Set(ISummaryStyle) Declaration public void Set(ISummaryStyle style) Parameters Type Name Description ISummaryStyle style Set(Encoding) Declaration public void Set(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding Union(IConfig, IConfig) Declaration public static ManualConfig Union(IConfig globalConfig, IConfig localConfig) Parameters Type Name Description IConfig globalConfig IConfig localConfig Returns Type Description ManualConfig Implements IConfig Extension Methods ConfigExtensions.GetCompositeLogger(IConfig) ConfigExtensions.GetCompositeExporter(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig, Benchmark, RunMode) ConfigExtensions.GetCompositeAnalyser(IConfig) ConfigExtensions.GetCompositeValidator(IConfig) ConfigExtensions.With(IConfig, IColumn[]) ConfigExtensions.With(IConfig, IColumnProvider[]) ConfigExtensions.With(IConfig, ILogger[]) ConfigExtensions.With(IConfig, IExporter[]) ConfigExtensions.With(IConfig, IDiagnoser[]) ConfigExtensions.With(IConfig, IAnalyser[]) ConfigExtensions.With(IConfig, IValidator[]) ConfigExtensions.With(IConfig, Job[]) ConfigExtensions.With(IConfig, IOrderProvider) ConfigExtensions.With(IConfig, HardwareCounter[]) ConfigExtensions.With(IConfig, IFilter[]) ConfigExtensions.With(IConfig, Encoding) ConfigExtensions.KeepBenchmarkFiles(IConfig, Boolean) ConfigExtensions.RemoveBenchmarkFiles(IConfig) ConfigExtensions.WithArtifactsPath(IConfig, String) ConfigExtensions.With(IConfig, BenchmarkLogicalGroupRule[]) ConfigExtensions.AsReadOnly(IConfig) ConfigExtensions.HasMemoryDiagnoser(IConfig)"
  },
  "api/BenchmarkDotNet.Diagnosers.HardwareCounterExtensions.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.HardwareCounterExtensions.html",
    "title": "Class HardwareCounterExtensions | BenchmarkDotNet",
    "keywords": "Class HardwareCounterExtensions Inheritance System.Object HardwareCounterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public static class HardwareCounterExtensions Methods ToShortName(HardwareCounter) Declaration public static string ToShortName(this HardwareCounter hardwareCounter) Parameters Type Name Description HardwareCounter hardwareCounter Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Diagnosers.IConfigurableDiagnoser-1.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.IConfigurableDiagnoser-1.html",
    "title": "Interface IConfigurableDiagnoser<TConfig> | BenchmarkDotNet",
    "keywords": "Interface IConfigurableDiagnoser<TConfig> Inherited Members IDiagnoser.Ids IDiagnoser.Exporters IDiagnoser.Analysers IDiagnoser.GetColumnProvider() IDiagnoser.GetRunMode(Benchmark) IDiagnoser.Handle(HostSignal, DiagnoserActionParameters) IDiagnoser.ProcessResults(DiagnoserResults) IDiagnoser.DisplayResults(ILogger) IDiagnoser.Validate(ValidationParameters) Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public interface IConfigurableDiagnoser<TConfig> : IDiagnoser Type Parameters Name Description TConfig Methods Configure(TConfig) Declaration IConfigurableDiagnoser<TConfig> Configure(TConfig config) Parameters Type Name Description TConfig config Returns Type Description IConfigurableDiagnoser <TConfig>"
  },
  "api/BenchmarkDotNet.Engines.DeadCodeEliminationHelper.html": {
    "href": "api/BenchmarkDotNet.Engines.DeadCodeEliminationHelper.html",
    "title": "Class DeadCodeEliminationHelper | BenchmarkDotNet",
    "keywords": "Class DeadCodeEliminationHelper Inheritance System.Object DeadCodeEliminationHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public static class DeadCodeEliminationHelper Methods KeepAliveWithoutBoxing<T>(T) Declaration public static void KeepAliveWithoutBoxing<T>(T value) Parameters Type Name Description T value Type Parameters Name Description T KeepAliveWithoutBoxing<T>(ref T) Declaration public static void KeepAliveWithoutBoxing<T>(ref T value) Parameters Type Name Description T value Type Parameters Name Description T"
  },
  "api/BenchmarkDotNet.Engines.Engine.Signals.html": {
    "href": "api/BenchmarkDotNet.Engines.Engine.Signals.html",
    "title": "Class Engine.Signals | BenchmarkDotNet",
    "keywords": "Class Engine.Signals Inheritance System.Object Engine.Signals Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public static class Signals Fields Acknowledgment Declaration public const string Acknowledgment = \"Acknowledgment\" Field Value Type Description System.String DiagnoserIsAttachedParam Declaration public const string DiagnoserIsAttachedParam = \"diagnoserAttached\" Field Value Type Description System.String Methods ToMessage(HostSignal) Declaration public static string ToMessage(HostSignal signal) Parameters Type Name Description HostSignal signal Returns Type Description System.String TryGetSignal(String, out HostSignal) Declaration public static bool TryGetSignal(string message, out HostSignal signal) Parameters Type Name Description System.String message HostSignal signal Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Environments.CoreRuntime.html": {
    "href": "api/BenchmarkDotNet.Environments.CoreRuntime.html",
    "title": "Class CoreRuntime | BenchmarkDotNet",
    "keywords": "Class CoreRuntime Inheritance System.Object Runtime CoreRuntime Implements System.IEquatable < Runtime > Inherited Members Runtime.Clr Runtime.Mono Runtime.Core Runtime.CoreRT Runtime.Name Runtime.ToString() Runtime.Equals(Runtime) Runtime.Equals(Object) Runtime.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class CoreRuntime : Runtime, IEquatable<Runtime> Constructors CoreRuntime() Declaration public CoreRuntime() Implements System.IEquatable<T>"
  },
  "api/BenchmarkDotNet.Environments.EnvResolver.html": {
    "href": "api/BenchmarkDotNet.Environments.EnvResolver.html",
    "title": "Class EnvResolver | BenchmarkDotNet",
    "keywords": "Class EnvResolver Inheritance System.Object Resolver EnvResolver Implements IResolver Inherited Members Resolver.Register<T>(Characteristic<T>, Func<T>) Resolver.Register<T>(Characteristic<T>, Func<CharacteristicObject, T>) Resolver.CanResolve(Characteristic) Resolver.Resolve(CharacteristicObject, Characteristic) Resolver.Resolve<T>(CharacteristicObject, Characteristic<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class EnvResolver : Resolver, IResolver Fields DefaultUnrollFactorForThroughput Declaration public const int DefaultUnrollFactorForThroughput = 16 Field Value Type Description System.Int32 Instance Declaration public static readonly IResolver Instance Field Value Type Description IResolver Implements IResolver"
  },
  "api/BenchmarkDotNet.Environments.GcResolver.html": {
    "href": "api/BenchmarkDotNet.Environments.GcResolver.html",
    "title": "Class GcResolver | BenchmarkDotNet",
    "keywords": "Class GcResolver Inheritance System.Object Resolver GcResolver Implements IResolver Inherited Members Resolver.Register<T>(Characteristic<T>, Func<T>) Resolver.Register<T>(Characteristic<T>, Func<CharacteristicObject, T>) Resolver.CanResolve(Characteristic) Resolver.Resolve(CharacteristicObject, Characteristic) Resolver.Resolve<T>(CharacteristicObject, Characteristic<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class GcResolver : Resolver, IResolver Fields Instance Declaration public static readonly IResolver Instance Field Value Type Description IResolver Implements IResolver"
  },
  "api/BenchmarkDotNet.Environments.HostEnvironmentInfo.html": {
    "href": "api/BenchmarkDotNet.Environments.HostEnvironmentInfo.html",
    "title": "Class HostEnvironmentInfo | BenchmarkDotNet",
    "keywords": "Class HostEnvironmentInfo Inheritance System.Object BenchmarkEnvironmentInfo HostEnvironmentInfo Inherited Members BenchmarkEnvironmentInfo.Architecture BenchmarkEnvironmentInfo.Configuration BenchmarkEnvironmentInfo.RuntimeVersion BenchmarkEnvironmentInfo.HasAttachedDebugger BenchmarkEnvironmentInfo.HasRyuJit BenchmarkEnvironmentInfo.JitInfo BenchmarkEnvironmentInfo.IsServerGC BenchmarkEnvironmentInfo.IsConcurrentGC BenchmarkEnvironmentInfo.GCAllocationQuantum BenchmarkEnvironmentInfo.GetConfigurationFlag() BenchmarkEnvironmentInfo.GetDebuggerFlag() BenchmarkEnvironmentInfo.GetGcServerFlag() BenchmarkEnvironmentInfo.GetGcConcurrentFlag() BenchmarkEnvironmentInfo.Validate(Job) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class HostEnvironmentInfo : BenchmarkEnvironmentInfo Constructors HostEnvironmentInfo() Declaration protected HostEnvironmentInfo() Fields BenchmarkDotNetCaption Declaration public const string BenchmarkDotNetCaption = \"BenchmarkDotNet\" Field Value Type Description System.String MainCultureInfo Declaration public static readonly CultureInfo MainCultureInfo Field Value Type Description System.Globalization.CultureInfo Properties AntivirusProducts Declaration public Lazy<ICollection<Antivirus>> AntivirusProducts { get; protected set; } Property Value Type Description System.Lazy < System.Collections.Generic.ICollection < Antivirus >> BenchmarkDotNetVersion Declaration public string BenchmarkDotNetVersion { get; protected set; } Property Value Type Description System.String ChronometerFrequency The frequency of the timer as the number of ticks per second. Declaration public Frequency ChronometerFrequency { get; protected set; } Property Value Type Description Frequency ChronometerResolution Declaration public TimeInterval ChronometerResolution { get; } Property Value Type Description TimeInterval CpuInfo is expensive to call (1s) Declaration public Lazy<CpuInfo> CpuInfo { get; protected set; } Property Value Type Description System.Lazy < CpuInfo > DotNetSdkVersion .NET Core SDK version It's expensive to call (creates new process by calling dotnet --version ) Declaration public Lazy<string> DotNetSdkVersion { get; protected set; } Property Value Type Description System.Lazy < System.String > FallbackLogger Logger to use when there's no config available. Declaration public static ILogger FallbackLogger { get; } Property Value Type Description ILogger HardwareTimerKind Declaration public HardwareTimerKind HardwareTimerKind { get; protected set; } Property Value Type Description HardwareTimerKind IsMonoInstalled checks if Mono is installed It's expensive to call (creates new process by calling mono --version ) Declaration public Lazy<bool> IsMonoInstalled { get; protected set; } Property Value Type Description System.Lazy < System.Boolean > JitModules Declaration public string JitModules { get; protected set; } Property Value Type Description System.String OsVersion Could be expensive Declaration public Lazy<string> OsVersion { get; protected set; } Property Value Type Description System.Lazy < System.String > VirtualMachineHypervisor Declaration public Lazy<VirtualMachineHypervisor> VirtualMachineHypervisor { get; protected set; } Property Value Type Description System.Lazy < VirtualMachineHypervisor > Methods GetCurrent() Declaration public static HostEnvironmentInfo GetCurrent() Returns Type Description HostEnvironmentInfo IsDotNetCliInstalled() Declaration public bool IsDotNetCliInstalled() Returns Type Description System.Boolean ToFormattedString() Declaration public override IEnumerable<string> ToFormattedString() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Overrides BenchmarkEnvironmentInfo.ToFormattedString()"
  },
  "api/BenchmarkDotNet.Exporters.PlainExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.PlainExporter.html",
    "title": "Class PlainExporter | BenchmarkDotNet",
    "keywords": "Class PlainExporter Inheritance System.Object ExporterBase PlainExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileExtension ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class PlainExporter : ExporterBase, IExporter Fields Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.PrettyDisassemblyExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.PrettyDisassemblyExporter.html",
    "title": "Class PrettyDisassemblyExporter | BenchmarkDotNet",
    "keywords": "Class PrettyDisassemblyExporter Inheritance System.Object PrettyDisassemblyExporter Implements IExporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class PrettyDisassemblyExporter : IExporter Constructors PrettyDisassemblyExporter(IReadOnlyDictionary<Benchmark, DisassemblyResult>) Declaration public PrettyDisassemblyExporter(IReadOnlyDictionary<Benchmark, DisassemblyResult> results) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < Benchmark , DisassemblyResult > results Properties Name Declaration public string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration public void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.RawDisassemblyExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.RawDisassemblyExporter.html",
    "title": "Class RawDisassemblyExporter | BenchmarkDotNet",
    "keywords": "Class RawDisassemblyExporter Inheritance System.Object RawDisassemblyExporter Implements IExporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class RawDisassemblyExporter : IExporter Constructors RawDisassemblyExporter(IReadOnlyDictionary<Benchmark, DisassemblyResult>) Declaration public RawDisassemblyExporter(IReadOnlyDictionary<Benchmark, DisassemblyResult> results) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < Benchmark , DisassemblyResult > results Properties Name Declaration public string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration public void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.RPlotExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.RPlotExporter.html",
    "title": "Class RPlotExporter | BenchmarkDotNet",
    "keywords": "Class RPlotExporter Inheritance System.Object RPlotExporter Implements IExporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class RPlotExporter : IExporter, IExporterDependencies Fields Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Properties Dependencies Declaration public IEnumerable<IExporter> Dependencies { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExporter > Name Declaration public string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration public void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger FindInPath(String) Declaration public static string FindInPath(string fileName) Parameters Type Name Description System.String fileName Returns Type Description System.String Implements IExporter"
  },
  "api/BenchmarkDotNet.Horology.ClockSpan.html": {
    "href": "api/BenchmarkDotNet.Horology.ClockSpan.html",
    "title": "Struct ClockSpan | BenchmarkDotNet",
    "keywords": "Struct ClockSpan Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public struct ClockSpan Constructors ClockSpan(Int64, Int64, Frequency) Declaration public ClockSpan(long startTimestamp, long endTimestamp, Frequency frequency) Parameters Type Name Description System.Int64 startTimestamp System.Int64 endTimestamp Frequency frequency Methods GetDateTimeTicks() Declaration public long GetDateTimeTicks() Returns Type Description System.Int64 GetNanoseconds() Declaration public double GetNanoseconds() Returns Type Description System.Double GetSeconds() Declaration public double GetSeconds() Returns Type Description System.Double GetTimeInterval() Declaration public TimeInterval GetTimeInterval() Returns Type Description TimeInterval GetTimeSpan() Declaration public TimeSpan GetTimeSpan() Returns Type Description System.TimeSpan ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/BenchmarkDotNet.Horology.Frequency.html": {
    "href": "api/BenchmarkDotNet.Horology.Frequency.html",
    "title": "Struct Frequency | BenchmarkDotNet",
    "keywords": "Struct Frequency Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Horology Assembly : BenchmarkDotNet.dll Syntax public struct Frequency Constructors Frequency(Double) Declaration public Frequency(double hertz) Parameters Type Name Description System.Double hertz Frequency(Double, FrequencyUnit) Declaration public Frequency(double value, FrequencyUnit unit) Parameters Type Name Description System.Double value FrequencyUnit unit Fields GHz Declaration public static readonly Frequency GHz Field Value Type Description Frequency Hz Declaration public static readonly Frequency Hz Field Value Type Description Frequency KHz Declaration public static readonly Frequency KHz Field Value Type Description Frequency MHz Declaration public static readonly Frequency MHz Field Value Type Description Frequency Properties Hertz Declaration public double Hertz { get; } Property Value Type Description System.Double Methods FromGHz(Double) Declaration public static Frequency FromGHz(double value) Parameters Type Name Description System.Double value Returns Type Description Frequency FromHz(Double) Declaration public static Frequency FromHz(double value) Parameters Type Name Description System.Double value Returns Type Description Frequency FromKHz(Double) Declaration public static Frequency FromKHz(double value) Parameters Type Name Description System.Double value Returns Type Description Frequency FromMHz(Double) Declaration public static Frequency FromMHz(double value) Parameters Type Name Description System.Double value Returns Type Description Frequency ToGHz() Declaration public double ToGHz() Returns Type Description System.Double ToHz() Declaration public double ToHz() Returns Type Description System.Double ToKHz() Declaration public double ToKHz() Returns Type Description System.Double ToMHz() Declaration public double ToMHz() Returns Type Description System.Double ToResolution() Declaration public TimeInterval ToResolution() Returns Type Description TimeInterval ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Division(Frequency, Frequency) Declaration public static double operator /(Frequency a, Frequency b) Parameters Type Name Description Frequency a Frequency b Returns Type Description System.Double Division(Frequency, Double) Declaration public static Frequency operator /(Frequency a, double k) Parameters Type Name Description Frequency a System.Double k Returns Type Description Frequency Division(Frequency, Int32) Declaration public static Frequency operator /(Frequency a, int k) Parameters Type Name Description Frequency a System.Int32 k Returns Type Description Frequency Implicit(Frequency to Double) Declaration public static implicit operator double (Frequency property) Parameters Type Name Description Frequency property Returns Type Description System.Double Implicit(Double to Frequency) Declaration public static implicit operator Frequency(double value) Parameters Type Name Description System.Double value Returns Type Description Frequency Multiply(Frequency, Double) Declaration public static Frequency operator *(Frequency a, double k) Parameters Type Name Description Frequency a System.Double k Returns Type Description Frequency Multiply(Frequency, Int32) Declaration public static Frequency operator *(Frequency a, int k) Parameters Type Name Description Frequency a System.Int32 k Returns Type Description Frequency Multiply(Double, Frequency) Declaration public static Frequency operator *(double k, Frequency a) Parameters Type Name Description System.Double k Frequency a Returns Type Description Frequency Multiply(Int32, Frequency) Declaration public static Frequency operator *(int k, Frequency a) Parameters Type Name Description System.Int32 k Frequency a Returns Type Description Frequency"
  },
  "api/BenchmarkDotNet.Jobs.EnvMode.html": {
    "href": "api/BenchmarkDotNet.Jobs.EnvMode.html",
    "title": "Class EnvMode | BenchmarkDotNet",
    "keywords": "Class EnvMode Inheritance System.Object CharacteristicObject CharacteristicObject < EnvMode > JobMode < EnvMode > EnvMode Inherited Members JobMode<EnvMode>.Default JobMode<EnvMode>.Job CharacteristicObject<EnvMode>.Apply(CharacteristicObject) CharacteristicObject<EnvMode>.Apply(CharacteristicObject[]) CharacteristicObject<EnvMode>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<EnvMode>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<EnvMode>.Freeze() CharacteristicObject<EnvMode>.UnfreezeCopy() CharacteristicObject<EnvMode>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public sealed class EnvMode : JobMode<EnvMode> Constructors EnvMode() Declaration public EnvMode() EnvMode(Runtime) Declaration public EnvMode(Runtime runtime) Parameters Type Name Description Runtime runtime EnvMode(String) Declaration public EnvMode(string id) Parameters Type Name Description System.String id EnvMode(String, Jit, Platform) Declaration public EnvMode(string id, Jit jit, Platform platform) Parameters Type Name Description System.String id Jit jit Platform platform Fields AffinityCharacteristic Declaration public static readonly Characteristic<IntPtr> AffinityCharacteristic Field Value Type Description Characteristic < System.IntPtr > Clr Declaration public static readonly EnvMode Clr Field Value Type Description EnvMode Core Declaration public static readonly EnvMode Core Field Value Type Description EnvMode CoreRT Declaration public static readonly EnvMode CoreRT Field Value Type Description EnvMode GcCharacteristic Declaration public static readonly Characteristic<GcMode> GcCharacteristic Field Value Type Description Characteristic < GcMode > JitCharacteristic Declaration public static readonly Characteristic<Jit> JitCharacteristic Field Value Type Description Characteristic < Jit > LegacyJitX64 Declaration public static readonly EnvMode LegacyJitX64 Field Value Type Description EnvMode LegacyJitX86 Declaration public static readonly EnvMode LegacyJitX86 Field Value Type Description EnvMode Mono Declaration public static readonly EnvMode Mono Field Value Type Description EnvMode PlatformCharacteristic Declaration public static readonly Characteristic<Platform> PlatformCharacteristic Field Value Type Description Characteristic < Platform > RuntimeCharacteristic Declaration public static readonly Characteristic<Runtime> RuntimeCharacteristic Field Value Type Description Characteristic < Runtime > RyuJitX64 Declaration public static readonly EnvMode RyuJitX64 Field Value Type Description EnvMode RyuJitX86 Declaration public static readonly EnvMode RyuJitX86 Field Value Type Description EnvMode Properties Affinity ProcessorAffinity for the benchmark process. See also: https://msdn.microsoft.com/library/system.diagnostics.process.processoraffinity.aspx Declaration public IntPtr Affinity { get; set; } Property Value Type Description System.IntPtr Gc GcMode Declaration public GcMode Gc { get; } Property Value Type Description GcMode Jit JIT (Just-In-Time compiler) Declaration public Jit Jit { get; set; } Property Value Type Description Jit Platform Platform (x86 or x64) Declaration public Platform Platform { get; set; } Property Value Type Description Platform Runtime Runtime Declaration public Runtime Runtime { get; set; } Property Value Type Description Runtime Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Jobs.GcMode.html": {
    "href": "api/BenchmarkDotNet.Jobs.GcMode.html",
    "title": "Class GcMode | BenchmarkDotNet",
    "keywords": "Class GcMode Inheritance System.Object CharacteristicObject CharacteristicObject < GcMode > JobMode < GcMode > GcMode Implements System.IEquatable < GcMode > Inherited Members JobMode<GcMode>.Default JobMode<GcMode>.Job CharacteristicObject<GcMode>.Apply(CharacteristicObject) CharacteristicObject<GcMode>.Apply(CharacteristicObject[]) CharacteristicObject<GcMode>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<GcMode>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<GcMode>.Freeze() CharacteristicObject<GcMode>.UnfreezeCopy() CharacteristicObject<GcMode>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public sealed class GcMode : JobMode<GcMode>, IEquatable<GcMode> Fields AllowVeryLargeObjectsCharacteristic Declaration public static readonly Characteristic<bool> AllowVeryLargeObjectsCharacteristic Field Value Type Description Characteristic < System.Boolean > ConcurrentCharacteristic Declaration public static readonly Characteristic<bool> ConcurrentCharacteristic Field Value Type Description Characteristic < System.Boolean > CpuGroupsCharacteristic Declaration public static readonly Characteristic<bool> CpuGroupsCharacteristic Field Value Type Description Characteristic < System.Boolean > ForceCharacteristic Declaration public static readonly Characteristic<bool> ForceCharacteristic Field Value Type Description Characteristic < System.Boolean > HeapAffinitizeMaskCharacteristic Declaration public static readonly Characteristic<int> HeapAffinitizeMaskCharacteristic Field Value Type Description Characteristic < System.Int32 > HeapCountCharacteristic Declaration public static readonly Characteristic<int> HeapCountCharacteristic Field Value Type Description Characteristic < System.Int32 > NoAffinitizeCharacteristic Declaration public static readonly Characteristic<bool> NoAffinitizeCharacteristic Field Value Type Description Characteristic < System.Boolean > RetainVmCharacteristic Declaration public static readonly Characteristic<bool> RetainVmCharacteristic Field Value Type Description Characteristic < System.Boolean > ServerCharacteristic Declaration public static readonly Characteristic<bool> ServerCharacteristic Field Value Type Description Characteristic < System.Boolean > Properties AllowVeryLargeObjects On 64-bit platforms, enables arrays that are greater than 2 gigabytes (GB) in total size. false: Arrays greater than 2 GB in total size are not enabled. This is the default. true: Arrays greater than 2 GB in total size are enabled on 64-bit platforms. Declaration public bool AllowVeryLargeObjects { get; set; } Property Value Type Description System.Boolean Concurrent Specifies whether the common language runtime runs garbage collection on a separate thread. false: Does not run garbage collection concurrently. true: Runs garbage collection concurrently. This is the default. Declaration public bool Concurrent { get; set; } Property Value Type Description System.Boolean CpuGroups Specifies whether garbage collection supports multiple CPU groups. false: Garbage collection does not support multiple CPU groups. This is the default. true: Garbage collection supports multiple CPU groups, if server garbage collection is enabled. Declaration public bool CpuGroups { get; set; } Property Value Type Description System.Boolean Force Specifies whether the BenchmarkDotNet's benchmark runner forces full garbage collection after each benchmark invocation false: Does not force garbage collection. true: Forces full garbage collection after each benchmark invocation. This is the default. Declaration public bool Force { get; set; } Property Value Type Description System.Boolean HeapAffinitizeMask process mask, see MSDN for more. Declaration public int HeapAffinitizeMask { get; set; } Property Value Type Description System.Int32 HeapCount specify the # of Server GC threads/heaps, must be smaller than the # of logical CPUs the process is allowed to run on, ie, if you don't specifically affinitize your process it means the # of total logical CPUs on the machine; otherwise this is the # of logical CPUs you affinitized your process to. Declaration public int HeapCount { get; set; } Property Value Type Description System.Int32 NoAffinitize specify true to disable hard affinity of Server GC threads to CPUs Declaration public bool NoAffinitize { get; set; } Property Value Type Description System.Boolean RetainVm Put segments that should be deleted on a standby list for future use instead of releasing them back to the OS The default is false Declaration public bool RetainVm { get; set; } Property Value Type Description System.Boolean Server Specifies whether the common language runtime runs server garbage collection. false: Does not run server garbage collection. This is the default. true: Runs server garbage collection. Declaration public bool Server { get; set; } Property Value Type Description System.Boolean Methods Equals(GcMode) Declaration public bool Equals(GcMode other) Parameters Type Name Description GcMode other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements System.IEquatable<T> Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject) GcModeExtensions.WithServer(GcMode, Boolean) GcModeExtensions.WithConcurrent(GcMode, Boolean) GcModeExtensions.WithCpuGroups(GcMode, Boolean) GcModeExtensions.WithForce(GcMode, Boolean) GcModeExtensions.WithAllowVeryLargeObjects(GcMode, Boolean) GcModeExtensions.WithRetainVm(GcMode, Boolean) GcModeExtensions.WithHeapCount(GcMode, Int32) GcModeExtensions.WithNoAffinitize(GcMode, Boolean) GcModeExtensions.WithHeapAffinitizeMask(GcMode, Int32)"
  },
  "api/BenchmarkDotNet.Jobs.GcModeExtensions.html": {
    "href": "api/BenchmarkDotNet.Jobs.GcModeExtensions.html",
    "title": "Class GcModeExtensions | BenchmarkDotNet",
    "keywords": "Class GcModeExtensions Inheritance System.Object GcModeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public static class GcModeExtensions Methods WithAllowVeryLargeObjects(GcMode, Boolean) Declaration public static GcMode WithAllowVeryLargeObjects(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode WithConcurrent(GcMode, Boolean) Declaration public static GcMode WithConcurrent(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode WithCpuGroups(GcMode, Boolean) Declaration public static GcMode WithCpuGroups(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode WithForce(GcMode, Boolean) Declaration public static GcMode WithForce(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode WithHeapAffinitizeMask(GcMode, Int32) Declaration public static GcMode WithHeapAffinitizeMask(this GcMode mode, int heapAffinitizeMask) Parameters Type Name Description GcMode mode System.Int32 heapAffinitizeMask Returns Type Description GcMode WithHeapCount(GcMode, Int32) Declaration public static GcMode WithHeapCount(this GcMode mode, int heapCount) Parameters Type Name Description GcMode mode System.Int32 heapCount Returns Type Description GcMode WithNoAffinitize(GcMode, Boolean) Declaration public static GcMode WithNoAffinitize(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode WithRetainVm(GcMode, Boolean) Declaration public static GcMode WithRetainVm(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode WithServer(GcMode, Boolean) Declaration public static GcMode WithServer(this GcMode mode, bool value) Parameters Type Name Description GcMode mode System.Boolean value Returns Type Description GcMode"
  },
  "api/BenchmarkDotNet.Jobs.InfrastructureMode.html": {
    "href": "api/BenchmarkDotNet.Jobs.InfrastructureMode.html",
    "title": "Class InfrastructureMode | BenchmarkDotNet",
    "keywords": "Class InfrastructureMode Inheritance System.Object CharacteristicObject CharacteristicObject < InfrastructureMode > JobMode < InfrastructureMode > InfrastructureMode Inherited Members JobMode<InfrastructureMode>.Default JobMode<InfrastructureMode>.Job CharacteristicObject<InfrastructureMode>.Apply(CharacteristicObject) CharacteristicObject<InfrastructureMode>.Apply(CharacteristicObject[]) CharacteristicObject<InfrastructureMode>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<InfrastructureMode>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<InfrastructureMode>.Freeze() CharacteristicObject<InfrastructureMode>.UnfreezeCopy() CharacteristicObject<InfrastructureMode>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public sealed class InfrastructureMode : JobMode<InfrastructureMode> Constructors InfrastructureMode() Declaration public InfrastructureMode() Fields ArgumentsCharacteristic Declaration public static readonly Characteristic<IReadOnlyList<Argument>> ArgumentsCharacteristic Field Value Type Description Characteristic < System.Collections.Generic.IReadOnlyList < Argument >> BuildConfigurationCharacteristic Declaration public static readonly Characteristic<string> BuildConfigurationCharacteristic Field Value Type Description Characteristic < System.String > ClockCharacteristic Declaration public static readonly Characteristic<IClock> ClockCharacteristic Field Value Type Description Characteristic < IClock > EngineFactoryCharacteristic Declaration public static readonly Characteristic<IEngineFactory> EngineFactoryCharacteristic Field Value Type Description Characteristic < IEngineFactory > EnvironmentVariablesCharacteristic Declaration public static readonly Characteristic<IReadOnlyList<EnvironmentVariable>> EnvironmentVariablesCharacteristic Field Value Type Description Characteristic < System.Collections.Generic.IReadOnlyList < EnvironmentVariable >> InProcess Declaration public static readonly InfrastructureMode InProcess Field Value Type Description InfrastructureMode InProcessDontLogOutput Declaration public static readonly InfrastructureMode InProcessDontLogOutput Field Value Type Description InfrastructureMode ReleaseConfigurationName Declaration public const string ReleaseConfigurationName = \"Release\" Field Value Type Description System.String ToolchainCharacteristic Declaration public static readonly Characteristic<IToolchain> ToolchainCharacteristic Field Value Type Description Characteristic < IToolchain > Properties Arguments Declaration public IReadOnlyList<Argument> Arguments { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Argument > BuildConfiguration Declaration public string BuildConfiguration { get; set; } Property Value Type Description System.String Clock Declaration public IClock Clock { get; set; } Property Value Type Description IClock EngineFactory this type will be used in the auto-generated program to create engine in separate process it must have parameterless constructor Declaration public IEngineFactory EngineFactory { get; set; } Property Value Type Description IEngineFactory EnvironmentVariables Declaration public IReadOnlyList<EnvironmentVariable> EnvironmentVariables { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < EnvironmentVariable > Toolchain Declaration public IToolchain Toolchain { get; set; } Property Value Type Description IToolchain Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.IHistogramBuilder.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.IHistogramBuilder.html",
    "title": "Interface IHistogramBuilder | BenchmarkDotNet",
    "keywords": "Interface IHistogramBuilder Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public interface IHistogramBuilder Methods Build(Statistics, Nullable<BinSizeRule>) Declaration Histogram Build(Statistics s, BinSizeRule? rule = default(BinSizeRule? )) Parameters Type Name Description Statistics s System.Nullable < BinSizeRule > rule Returns Type Description Histogram BuildWithFixedBinSize(IEnumerable<Double>, Double) Declaration Histogram BuildWithFixedBinSize(IEnumerable<double> values, double binSize) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > values System.Double binSize Returns Type Description Histogram"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.html",
    "title": "Namespace BenchmarkDotNet.Mathematics.Histograms | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Mathematics.Histograms Classes AdaptiveHistogramBuilder Histogram HistogramBin HistogramBuilder HistogramExtensions Interfaces IHistogramBuilder Enums BinSizeRule"
  },
  "api/BenchmarkDotNet.Mathematics.MathHelper.html": {
    "href": "api/BenchmarkDotNet.Mathematics.MathHelper.html",
    "title": "Class MathHelper | BenchmarkDotNet",
    "keywords": "Class MathHelper Inheritance System.Object MathHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public static class MathHelper Methods CalculateMValue(Statistics) Declaration public static double CalculateMValue(Statistics originalStatistics) Parameters Type Name Description Statistics originalStatistics Returns Type Description System.Double Clamp(Int32, Int32, Int32) Declaration public static int Clamp(int value, int min, int max) Parameters Type Name Description System.Int32 value System.Int32 min System.Int32 max Returns Type Description System.Int32 Gauss(Double) ACM Algorithm 209: Gauss Calculates $(1/\\sqrt{2\\pi}) \\int_{-\\infty}^x e^{-u^2 / 2} du$ by means of polynomial approximations due to A. M. Murray of Aberdeen University; See: http://dl.acm.org/citation.cfm?id=367664 Declaration public static double Gauss(double x) Parameters Type Name Description System.Double x -infinity..+infinity Returns Type Description System.Double Area under the Standard Normal Curve from -infinity to x InverseStudent(Double, Double) Declaration public static double InverseStudent(double p, double n) Parameters Type Name Description System.Double p System.Double n Returns Type Description System.Double Student(Double, Double) ACM Algorithm 395: Student's t-distribution Evaluates the two-tail probability P(t|n) that t is exceeded in magnitude for Student's t-distribution with n degrees of freedom. http://dl.acm.org/citation.cfm?id=355599 Declaration public static double Student(double t, double n) Parameters Type Name Description System.Double t t-value System.Double n Degree of freedom, n >= 20 Returns Type Description System.Double 2-tail p-value"
  },
  "api/BenchmarkDotNet.Mathematics.NumeralSystem.html": {
    "href": "api/BenchmarkDotNet.Mathematics.NumeralSystem.html",
    "title": "Enum NumeralSystem | BenchmarkDotNet",
    "keywords": "Enum NumeralSystem Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public enum NumeralSystem Fields Name Description Arabic Arabic numerals (1, 2, 3, 4, ...) Roman Roman numerals (I, II, III, IV, ...) Stars Unary numeral system (*, **, ***, ****, ...) Extension Methods NumeralSystemExtensions.ToPresentation(Int32)"
  },
  "api/BenchmarkDotNet.Reports.BenchmarkReportExtensions.html": {
    "href": "api/BenchmarkDotNet.Reports.BenchmarkReportExtensions.html",
    "title": "Class BenchmarkReportExtensions | BenchmarkDotNet",
    "keywords": "Class BenchmarkReportExtensions Inheritance System.Object BenchmarkReportExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public static class BenchmarkReportExtensions Methods GetGcInfo(BenchmarkReport) Declaration public static string GetGcInfo(this BenchmarkReport report) Parameters Type Name Description BenchmarkReport report Returns Type Description System.String GetRuntimeInfo(BenchmarkReport) Declaration public static string GetRuntimeInfo(this BenchmarkReport report) Parameters Type Name Description BenchmarkReport report Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Reports.ISummaryStyle.html": {
    "href": "api/BenchmarkDotNet.Reports.ISummaryStyle.html",
    "title": "Interface ISummaryStyle | BenchmarkDotNet",
    "keywords": "Interface ISummaryStyle Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public interface ISummaryStyle Properties PrintUnitsInContent Declaration bool PrintUnitsInContent { get; } Property Value Type Description System.Boolean PrintUnitsInHeader Declaration bool PrintUnitsInHeader { get; } Property Value Type Description System.Boolean SizeUnit Declaration SizeUnit SizeUnit { get; } Property Value Type Description SizeUnit TimeUnit Declaration TimeUnit TimeUnit { get; } Property Value Type Description TimeUnit Methods WithSizeUnit(SizeUnit) Declaration ISummaryStyle WithSizeUnit(SizeUnit sizeUnit) Parameters Type Name Description SizeUnit sizeUnit Returns Type Description ISummaryStyle WithTimeUnit(TimeUnit) Declaration ISummaryStyle WithTimeUnit(TimeUnit timeUnit) Parameters Type Name Description TimeUnit timeUnit Returns Type Description ISummaryStyle"
  },
  "api/BenchmarkDotNet.Reports.Measurement.html": {
    "href": "api/BenchmarkDotNet.Reports.Measurement.html",
    "title": "Struct Measurement | BenchmarkDotNet",
    "keywords": "Struct Measurement The basic captured statistics for a benchmark. Implements System.IComparable < Measurement > Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public struct Measurement : IComparable<Measurement> Constructors Measurement(Int32, IterationMode, Int32, Int64, Double, Encoding) Creates an instance of Measurement struct. Declaration public Measurement(int launchIndex, IterationMode iterationMode, int iterationIndex, long operations, double nanoseconds, Encoding encoding = null) Parameters Type Name Description System.Int32 launchIndex IterationMode iterationMode System.Int32 iterationIndex System.Int64 operations The number of operations performed. System.Double nanoseconds The total number of nanoseconds it took to perform all operations. System.Text.Encoding encoding encoding to display value. Properties Encoding Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding IterationIndex Declaration public int IterationIndex { get; } Property Value Type Description System.Int32 IterationMode Declaration public IterationMode IterationMode { get; } Property Value Type Description IterationMode LaunchIndex Declaration public int LaunchIndex { get; } Property Value Type Description System.Int32 Nanoseconds Gets the total number of nanoseconds it took to perform all operations. Declaration public double Nanoseconds { get; } Property Value Type Description System.Double Operations Gets the number of operations performed. Declaration public long Operations { get; } Property Value Type Description System.Int64 Methods CompareTo(Measurement) Declaration public int CompareTo(Measurement other) Parameters Type Name Description Measurement other Returns Type Description System.Int32 Parse(ILogger, String, Int32, Encoding) Parses the benchmark statistics from the plain text line. E.g. given the input line : Target 1: 10 op, 1005842518 ns Will extract the number of Operations performed and the total number of Nanoseconds it took to perform them. Declaration public static Measurement Parse(ILogger logger, string line, int processIndex, Encoding encoding = null) Parameters Type Name Description ILogger logger The logger to write any diagnostic messages to. System.String line The line to parse. System.Int32 processIndex System.Text.Encoding encoding encoding to display value Returns Type Description Measurement An instance of Measurement if parsed successfully. Null in case of any trouble. ToOutputLine() Declaration public string ToOutputLine() Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Implements System.IComparable<T> Extension Methods MeasurementExtensions.GetOpsPerSecond(Measurement) MeasurementExtensions.GetAverageNanoseconds(Measurement) MeasurementExtensions.ToStr(Measurement, Encoding)"
  },
  "api/BenchmarkDotNet.Reports.MeasurementExtensions.html": {
    "href": "api/BenchmarkDotNet.Reports.MeasurementExtensions.html",
    "title": "Class MeasurementExtensions | BenchmarkDotNet",
    "keywords": "Class MeasurementExtensions Inheritance System.Object MeasurementExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public static class MeasurementExtensions Methods GetAverageNanoseconds(Measurement) Gets the average duration of one operation in nanoseconds. Declaration public static double GetAverageNanoseconds(this Measurement report) Parameters Type Name Description Measurement report Returns Type Description System.Double GetOpsPerSecond(Measurement) Gets the number of operations performed per second (ops/sec). Declaration public static double GetOpsPerSecond(this Measurement report) Parameters Type Name Description Measurement report Returns Type Description System.Double ToStr(Measurement, Encoding) Declaration public static string ToStr(this Measurement run, Encoding encoding) Parameters Type Name Description Measurement run System.Text.Encoding encoding Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Toolchains.CsProj.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CsProj.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.CsProj | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.CsProj Classes CsProjClassicNetToolchain this toolchain is designed for the new .csprojs, to build .NET 4.x benchmarks from the context of .NET Core host process it does not work with the old .csprojs or project.json! CsProjCoreToolchain CsProjGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.CustomCoreClr.CustomCoreClrToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CustomCoreClr.CustomCoreClrToolchain.html",
    "title": "Class CustomCoreClrToolchain | BenchmarkDotNet",
    "keywords": "Class CustomCoreClrToolchain Inheritance System.Object Toolchain CustomCoreClrToolchain Implements IToolchain Inherited Members Toolchain.Name Toolchain.Generator Toolchain.Builder Toolchain.Executor Toolchain.IsSupported(Benchmark, ILogger, IResolver) Toolchain.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.CustomCoreClr Assembly : BenchmarkDotNet.dll Syntax public class CustomCoreClrToolchain : Toolchain, IToolchain Methods CreateBuilder() Declaration public static CustomCoreClrToolchainBuilder CreateBuilder() Returns Type Description CustomCoreClrToolchainBuilder Implements IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.CustomCoreClr.CustomCoreClrToolchainBuilder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CustomCoreClr.CustomCoreClrToolchainBuilder.html",
    "title": "Class CustomCoreClrToolchainBuilder | BenchmarkDotNet",
    "keywords": "Class CustomCoreClrToolchainBuilder Inheritance System.Object CustomDotNetCliToolchainBuilder CustomCoreClrToolchainBuilder Inherited Members CustomDotNetCliToolchainBuilder.runtimeIdentifier CustomDotNetCliToolchainBuilder.customDotNetCliPath CustomDotNetCliToolchainBuilder.targetFrameworkMoniker CustomDotNetCliToolchainBuilder.displayName CustomDotNetCliToolchainBuilder.runtimeFrameworkVersion CustomDotNetCliToolchainBuilder.useNuGetClearTag CustomDotNetCliToolchainBuilder.useTempFolderForRestore CustomDotNetCliToolchainBuilder.feeds CustomDotNetCliToolchainBuilder.AdditionalNuGetFeed(String, String) CustomDotNetCliToolchainBuilder.UseNuGetClearTag(Boolean) CustomDotNetCliToolchainBuilder.TargetFrameworkMoniker(String) CustomDotNetCliToolchainBuilder.DotNetCli(String) CustomDotNetCliToolchainBuilder.RuntimeIdentifier(String) CustomDotNetCliToolchainBuilder.RuntimeFrameworkVersion(String) CustomDotNetCliToolchainBuilder.DisplayName(String) CustomDotNetCliToolchainBuilder.UseTempFolderForRestore(Boolean) CustomDotNetCliToolchainBuilder.GetPortableRuntimeIdentifier() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.CustomCoreClr Assembly : BenchmarkDotNet.dll Syntax public class CustomCoreClrToolchainBuilder : CustomDotNetCliToolchainBuilder Methods Create() Declaration public static CustomCoreClrToolchainBuilder Create() Returns Type Description CustomCoreClrToolchainBuilder ToToolchain() Declaration public override IToolchain ToToolchain() Returns Type Description IToolchain Overrides CustomDotNetCliToolchainBuilder.ToToolchain() UseCoreClrDefault() tells the toolchain to use the default CoreClr (for given dotnet cli and moniker), emits no direct dependency to NETCore.Runtime.CoreCLR package Declaration public CustomCoreClrToolchainBuilder UseCoreClrDefault() Returns Type Description CustomCoreClrToolchainBuilder UseCoreClrLocalBuild(String, String, String) creates a toolchain which publishes self-contained app which references local CoreClr build as described here https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingDotNetCli.md Declaration public CustomCoreClrToolchainBuilder UseCoreClrLocalBuild(string coreClrVersion, string binPackagesPath, string packagesPath) Parameters Type Name Description System.String coreClrVersion the version of Microsoft.NETCore.Runtime which should be used. Example: \"2.1.0-preview2-26305-0\" System.String binPackagesPath path to folder with CoreClr NuGet packages. Example: \"C:\\coreclr\\bin\\Product\\Windows_NT.x64.Release.nuget\\pkg\" System.String packagesPath path to folder with NuGet packages restored for CoreClr build. Example: \"C:\\Projects\\coreclr\\packages\" Returns Type Description CustomCoreClrToolchainBuilder UseCoreClrNuGet(String, String) creates a toolchain which publishes self-contained app which references NuGet CoreClr package Declaration public CustomCoreClrToolchainBuilder UseCoreClrNuGet(string coreClrVersion, string nugetFeedUrl = \"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\") Parameters Type Name Description System.String coreClrVersion the version of Microsoft.NETCore.Runtime which should be used. Example: \"2.1.0-preview2-26305-0\" System.String nugetFeedUrl url to NuGet CoreCLR feed, The default is: \"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" Returns Type Description CustomCoreClrToolchainBuilder UseCoreFxDefault() tells the toolchain to use the default CoreFx (for given dotnet cli and moniker), emits no direct dependency to NetCore.App package Declaration public CustomCoreClrToolchainBuilder UseCoreFxDefault() Returns Type Description CustomCoreClrToolchainBuilder UseCoreFxLocalBuild(String, String) creates a toolchain which publishes self-contained app which references local CoreFx build as described here https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md#more-advanced-scenario---using-your-local-corefx-build Declaration public CustomCoreClrToolchainBuilder UseCoreFxLocalBuild(string privateCoreFxNetCoreAppVersion, string binPackagesPath) Parameters Type Name Description System.String privateCoreFxNetCoreAppVersion the version of Microsoft.Private.CoreFx.NETCoreApp which should be used. Example: \"4.5.0-preview2-26307-0\" System.String binPackagesPath path to folder with CoreFX NuGet packages, Example: \"C:\\Projects\\forks\\corefx\\bin\\packages\\Release\" Returns Type Description CustomCoreClrToolchainBuilder UseCoreFxNuGet(String, String) creates a toolchain which publishes self-contained app which references NuGet CoreFx build Declaration public CustomCoreClrToolchainBuilder UseCoreFxNuGet(string privateCoreFxNetCoreAppVersion, string nugetFeedUrl = \"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\") Parameters Type Name Description System.String privateCoreFxNetCoreAppVersion the version of Microsoft.Private.CoreFx.NETCoreApp which should be used. Example: \"4.5.0-preview2-26307-0\" System.String nugetFeedUrl ulr to NuGet CoreFX feed, The default is: \"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" Returns Type Description CustomCoreClrToolchainBuilder"
  },
  "changelog/v0.7.1.html": {
    "href": "changelog/v0.7.1.html",
    "title": "BenchmarkDotNet v0.7.1 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.1 Milestone details In the v0.7.1 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 4 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (4) b2bc76 A bugfix (MSBuild fail case) (by @AndreyAkinshin ) ce7f58 Improved SingleRun (by @AndreyAkinshin ) 295cc2 Current values for JitVersion, Platform, and Framework (by @AndreyAkinshin ) 744eba Set library version: 0.7.1 (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much!"
  },
  "changelog/v0.7.2.html": {
    "href": "changelog/v0.7.2.html",
    "title": "BenchmarkDotNet v0.7.2 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.2 Milestone details In the v0.7.2 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 2 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (2) 19f1e2 Add templates for BenchmarkProjectGenerator (by @AndreyAkinshin ) 043c04 v0.7.2: BenchmarkMode.Throughput, OperationCountAttribute, minor improvements... (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much!"
  },
  "changelog/v0.8.2.html": {
    "href": "changelog/v0.8.2.html",
    "title": "BenchmarkDotNet v0.8.2 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.8.2 Changes in the Summary table Summary table now supports ResultExtenders that can add new column to the table Now we use StandardError (aka Error ) as the main accuracy metric Columns op/s , StdDev are disabled by default (you can add it via ResultExtenders) Statistic improvements, now you have detailed statistic in the console log like follows: Mean = 118.5298 us, StdError = 1.2863 us (N = 30, StdDev = 7.0454 us) Min = 109.1602 us, Median = 117.1794 us, Max = 132.5764 us IQR = 10.1244 us, LowerFence = 98.0834 us, UpperFence = 138.5810 us ConfidenceInterval = [116.0086 us; 121.0510 us] (CI 95%) Added the Baseline feature, see #64 Export improvements, now you have files <BenchmarkName>-report-github.md , <BenchmarkName>-report-stackoverflow.md for easy publishing results on GitHub and StackOverflow. Basic plotting. Added new BenchmarkRPlotExporter that creates BuildPlots.R in the bin directory. It is an R script that generates boxplot and barplot for your benchmarks (you should have installed R with defined R_HOME environment variable) Updated environment info Added Stopwatch Frequency and Resolution Split common benchmark properties (like Mode , Platform , Runtime ) in several lines (3 properties per line) Log improvements: add total time, statistics, list of exported files Bug fixes Milestone details In the v0.8.2 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 34 commits by 3 contributors. Resolved issues (0) Merged pull requests (0) Commits (34) de0140 Add BenchmarkEnvironmentAnalyser (by @AndreyAkinshin ) 9ea78f Improved confidence intervals (by @AndreyAkinshin ) b8d4b6 Rename: PreWarmup -> Pilot (by @AndreyAkinshin ) 988efc Reporting: change StandardDeviation to StandardError (by @AndreyAkinshin ) 4da39d Big refactoring (by @AndreyAkinshin ) 6a0caa Add BenchmarkRPlotExporter (by @AndreyAkinshin ) 3a6ea4 Allow plugins to extend the Results Table (by @mattwarren ) 7a7991 Create a \"Result Extender\" plug-in for #64 (by @mattwarren ) 70ea89 Integration tests for #64 (by @mattwarren ) a2d0ec Separate class for string extensions. (by @alinasmirnova ) 5d6c78 Multiline prefix string extension. (by @alinasmirnova ) bdd84e New logger type for adding prefix. StackOverflow markdowns. (by @alinasmirnova ) ba9ec5 Move ExportToFile to ExporterBase. Add file suffix. (by @alinasmirnova ) 38cd8c GitHub markdown support. (by @alinasmirnova ) 732420 Markdown readme edits (by @alinasmirnova ) 541eef Merge pull request #71 from alinasmirnova/refactoring (by @AndreyAkinshin ) c53618 Merge remote-tracking branch 'refs/remotes/origin/develop' into refactoring (by @AndreyAkinshin ) e3f420 Samples: add Intro_08_Baseline (by @AndreyAkinshin ) 145b78 README: add NuGet badge (by @AndreyAkinshin ) b0e108 Minor fixes (by @AndreyAkinshin ) 565c25 Update README (by @AndreyAkinshin ) 045e2a Add BenchmarkStatResultExtender (by @AndreyAkinshin ) 20c6d2 Minor fixes (by @AndreyAkinshin ) f80edc Update README (by @AndreyAkinshin ) 3d2309 README: links to wiki (by @AndreyAkinshin ) d60d0f Fix bug in TimeUnit (by @AndreyAkinshin ) 034961 Unit tests for TimeUnit (by @AndreyAkinshin ) f2c6f1 Logs: add total time (by @AndreyAkinshin ) 140dec Merge branch 'refs/heads/refactoring' into develop (by @AndreyAkinshin ) 9e16e8 Ensure that the DeltaResultExtender doesn't throw (by @mattwarren ) 60f7c9 Merge branch 'develop' of https://github.com/PerfDotNet/BenchmarkDotNet into ... (by @mattwarren ) 77b24b Rollback of bad changes from the last merge (by @AndreyAkinshin ) 3df71a More robust way of wiring up BenchmarkBaselineDeltaResultExtender (by @mattwarren ) 8e5a0e Set library version: 0.8.2 (by @AndreyAkinshin ) Contributors (3) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Date: January 19, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.8.2"
  },
  "changelog/v0.9.0.html": {
    "href": "changelog/v0.9.0.html",
    "title": "BenchmarkDotNet v0.9.0 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.0 New API Autodetermination of amount iteration for warmup/target idle/main iterations, duration of iteration, amount of CLR launches. Milestone details In the v0.9.0 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 34 commits by 4 contributors. Resolved issues (0) Merged pull requests (0) Commits (34) 71369d Add benchmarks to tests different ways of accessing arrays. Copypasted from h... (by @alexandrnikitin ) 9a5930 Merge pull request #79 from alexandrnikitin/samples-array-access (by @AndreyAkinshin ) 1b8cf9 MathSummaryTests: fix output (by @AndreyAkinshin ) 92503b BenchmarkSwitcher improvements (by @AndreyAkinshin ) ebaeea Big API refactoring (by @AndreyAkinshin ) f149cb Big API refactoring, Part 2 (by @AndreyAkinshin ) 380d9a Big API refactoring, Part 3 (by @AndreyAkinshin ) 6cd2ce Big API refactoring, Part 4 (by @AndreyAkinshin ) 1665d8 Big API refactoring, Part 5 (by @AndreyAkinshin ) 140312 A better way of running a F# integration test (by @mattwarren ) 8e58ab Big API refactoring, Part 6 (by @AndreyAkinshin ) 9ec71b Add html export, resolved #75 (by @alinasmirnova ) 7ae4ed Merge pull request #86 from alinasmirnova/refactoring (by @AndreyAkinshin ) bfbc80 Big API refactoring, Part 7 (by @AndreyAkinshin ) 256ed4 Re-design of the IDiagnoser API (by @mattwarren ) f4bad8 Initial work on ETW Diagnostic Providers (by @mattwarren ) da2e3f Big API refactoring, Part 8 (by @AndreyAkinshin ) 5df553 Big API refactoring, Part 9 (by @AndreyAkinshin ) 120b7c Big API refactoring, Part 10 (by @AndreyAkinshin ) e61425 Big API refactoring, Part 11 (by @AndreyAkinshin ) 171ba0 Big API refactoring, Part 12 (by @AndreyAkinshin ) 854633 Big API refactoring, Part 13 (by @AndreyAkinshin ) caafa9 Fix a bug in Templates/BenchmarkProgram.txt (by @AndreyAkinshin ) 568c44 Add BenchmarkDotNet.Samples.FSharp (by @AndreyAkinshin ) 2fa773 Fix a bug in Generator (by @AndreyAkinshin ) 30e855 Update README (by @AndreyAkinshin ) 1164ef Update README (by @AndreyAkinshin ) 9c357c Improved plots for benchmarks with Params (by @AndreyAkinshin ) ef41f6 Fix a bug in ClassicBuilder (by @AndreyAkinshin ) 02babc Add BaselineDiffColumn.Scaled (by @AndreyAkinshin ) 4388c8 Remove construction with description in BenchmarkAttribute (by @AndreyAkinshin ) c9c25f Update README (by @AndreyAkinshin ) 1cef82 RPlotExporter improvements (by @AndreyAkinshin ) 173abf Set library version: 0.9.0 (by @AndreyAkinshin ) Contributors (4) Alexandr Nikitin ( @alexandrnikitin ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Date: February 9, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.0"
  },
  "changelog/v0.9.1.html": {
    "href": "changelog/v0.9.1.html",
    "title": "BenchmarkDotNet v0.9.1 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.1 Milestone details In the v0.9.1 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 5 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (5) a0cfba use benchmarkSwitcher and 0.9.0 api features (by @cloudRoutine ) a88fc0 Merge pull request #89 from cloudRoutine/patch-1 (by @AndreyAkinshin ) 99d7c5 Improved ReflectionExtensions.GetCorrectTypeName; Fixed #90 (by @AndreyAkinshin ) 770510 Improved work with idle method that returns a value type; Fixed #70 (by @AndreyAkinshin ) 3c4410 Set library version: 0.9.1 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Jared Hester ( @cloudRoutine ) Thank you very much! Additional details Date: February 10, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.1"
  },
  "changelog/v0.9.2.html": {
    "href": "changelog/v0.9.2.html",
    "title": "BenchmarkDotNet v0.9.2 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.2 Dnx451 support (Closed #51 , Merged #87 ) Milestone details In the v0.9.2 scope, 1 issues were resolved and 1 pull requests where merged. This release includes 48 commits by 2 contributors. Resolved issues (1) #51 DNX Compatibility Merged pull requests (1) #87 DNX451 support (by @adamsitnik ) Commits (48) f25427 road to DNX: part I: moving from csproj to xproj (by @adamsitnik ) 2fe5cf road to DNX: part II: added dnx451 target (DNX SDK running on .Net 4.5.1) (by @adamsitnik ) 6b4400 road to DNX: part II: the moment when Unit Test has shown up in VS! (by @adamsitnik ) c97792 road to DNX: part II: able to debug Samples (by @adamsitnik ) f901d6 road to DNX: part II: the moment when Integration Test has shown up in VS! (by @adamsitnik ) f46296 road to DNX: part II: including *.txt files as resources, excluding auto-gene... (by @adamsitnik ) cfc1b6 updated gitignore to exclude files created during integration tests run (by @adamsitnik ) 60b343 Road to DNX: benchmark execution : building project.json instead of .csproj (by @adamsitnik ) 0d41cb Road to DNX: benchmark execution : compiling project.json with Microsoft.Dnx.... (by @adamsitnik ) 31bc59 updated versions in .json files after sync with master, (by @adamsitnik ) c8e826 road to DNX: compilation: adding MetadataReferences for dlls required to comp... (by @adamsitnik ) 2ebe6c road to DNX: compilation: adding executing assembly as dependency to project.... (by @adamsitnik ) 76a74e Road to DNX: removing dependencies to BenchmarkDotNet.Diagnostics for DNX451 ... (by @adamsitnik ) 40419a road to DNX: handling \"nuget-like\" package versions that can contain text (as... (by @adamsitnik ) 8f06a7 it should have never happened but it does when debugging: DirectoryNotFoundEx... (by @adamsitnik ) 7c2a96 Road to DNX: reusing MS dnu to restore and build. Simple solution that just w... (by @adamsitnik ) e51d4d Road to DNX: alternative to MS dnu. reuses nuget and roslyn but as for now it... (by @adamsitnik ) ada7cb Road to DNX: replacing dnu build with dnx run. +putting files in a folder tha... (by @adamsitnik ) 18e969 road to DNX: referencing the right thing, bitness the same as hosting process (by @adamsitnik ) 8e870c road to DNX: setting the compiler EXPLICIT to finally make it WORKING (at lea... (by @adamsitnik ) 466d13 Road to DNX: removing failed PoC,dependencies cleanup, added some comments (by @adamsitnik ) 5b3675 Road to DNX: removing dependencies to MSBuild for DNX target, some project.js... (by @adamsitnik ) 3e65e8 road to DNU: reference project during development, but package when released (by @adamsitnik ) 617a61 road to DNX: logging output from dnu restore/dnx run + default timeout (by @adamsitnik ) 075cdc road to DNX: new value for toolchain enum: DNX451 (by @adamsitnik ) bd3fea road to DNX: being able to debug NET40 from VS (by @adamsitnik ) da5a9a road to DNX: copying all files that used to be copied in \".csproj times\" (by @adamsitnik ) 5d8717 road to DNX: new debug profile with DNX trace mode ON, use when troubleshooti... (by @adamsitnik ) 8272f6 road to DNX: fixing tests (by @adamsitnik ) 96bcf8 road to DNX: make sure that our child process get the right priority and affi... (by @adamsitnik ) cd0ba8 road to DNX: respecting specified benchmark processor architecture (by @adamsitnik ) b1eb28 road to DNX: added all output files from integration tests to .gitignore (by @adamsitnik ) aa62d1 fix for 4.0 (was passing arguments in wrong order) (by @adamsitnik ) 0c1251 merge (by @adamsitnik ) 46cd5e F# support, limited to existing tools possibilities (can not run from VS, onl... (by @adamsitnik ) 74020c Merge remote-tracking branch 'upstream/master' (by @adamsitnik ) 3402f0 replacing dnx with dotnet cli (by @adamsitnik ) d634f4 road to DNX: final cleanup (by @adamsitnik ) 24cd3a removing project.lock.json files (by @adamsitnik ) 80becb removing all .csproj & packages.config file + keeping only single .sln file (by @adamsitnik ) 9633d5 removing nuspec (now auto-generated by VS based on project.json) + version in... (by @adamsitnik ) 617d82 running Classic Framework tests from console + minor cleanup (by @adamsitnik ) fc9d98 DNX: running once compiled assembly directly without dotnet cli (perf+abble t... (by @adamsitnik ) 8adad8 dnx: Diagnosers support. Currently only these which do not need umanaged libs... (by @adamsitnik ) 34c3c9 DNX: changed folder of the auto-generated files to benchmark-specific + samples (by @adamsitnik ) 9cf009 DNX: description for development (by @adamsitnik ) 43af33 update to dotnet cli changes: output path and exit codes , now we set output... (by @adamsitnik ) f59d3e Merge pull request #87 from adamsitnik/master (by @AndreyAkinshin ) Contributors (2) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Milestone: v0.9.2 Date: March 5, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.2"
  },
  "changelog/v0.9.3.html": {
    "href": "changelog/v0.9.3.html",
    "title": "BenchmarkDotNet v0.9.3 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.3 CoreCLR support (Closed #52 , Merged #113 ) Milestone details In the v0.9.3 scope, 2 issues were resolved and 1 pull requests where merged. This release includes 12 commits by 2 contributors. Resolved issues (2) #52 CoreCLR Compatibility #114 Update NETStandard.Library dependency Merged pull requests (1) #113 Core Clr support (by @adamsitnik ) Commits (12) 5b6460 Core: compilable main project (by @adamsitnik ) cfdde6 Core: compilable samples and tests projects (by @adamsitnik ) ab8b26 Core: new profile for running Samples from VS (by @adamsitnik ) 9e1372 Core: new toolchain implementation with dnx451 code reuse (by @adamsitnik ) de8bcc Core: tests: script to run both dnx and core (by @adamsitnik ) 05d50f Core: dotnet cli supports only x64 now, workaround (by @adamsitnik ) 726c66 Core: executing only supported benchmarks (x86 and Legacy Jit are not supported) (by @adamsitnik ) de3371 Core: Dnx and Core as Runtimes, removed Toolchain configuration (by @adamsitnik ) e7a3a8 Core: generating path in Linux-friendly way ;) (by @adamsitnik ) fede7c Core: notify user when the process.Priority can not be set and continue execu... (by @adamsitnik ) d59827 Merge pull request #113 from PerfDotNet/coreclr (by @AndreyAkinshin ) 939891 Set library version: 0.9.3 (by @AndreyAkinshin ) Contributors (2) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Milestone: v0.9.3 Date: March 13, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.3 https://www.nuget.org/packages/BenchmarkDotNet/0.9.3-beta"
  },
  "changelog/v0.9.4.html": {
    "href": "changelog/v0.9.4.html",
    "title": "BenchmarkDotNet v0.9.4 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.4 Improved messages about error in benchmarks, see #104 Natural sort order, see #92 , #95 , #97 Improved double / float / decimal / enum support for Params, see #96 , #105 , #116 Now environment info includes information about HardwareTimerKind and JitModules Added DryConfig Improved export performance, closed #119 , merged #124 Better cmd-line discoverability (see #78 ), e.g. run Benchmark.exe --help and some useful information will be printed Supporting all kinds of references for generated project (exact version, custom paths, GAC, sub-folders, dependent assemblies not copied), closed #41 , #49 , #72 , #123 , merged #125 Friendliness to LinqPad restored, closed #66 , merged #125 Milestone details In the v0.9.4 scope, 13 issues were resolved and 2 pull requests where merged. This release includes 55 commits by 4 contributors. Resolved issues (13) #41 Seems, not supported \"sub-folder\" #49 Dependent assemblies are not copied or added to the project file. #72 Referenced assembly dll-file (directly via file) not referenced in generated Program.csproj #78 Better command line discoverability (assignee: @mattwarren ) #92 Results in the R graphs aren't displayed in a \"Natural Sort Order\" #95 Results should preserve the order of param values definition #96 Implement enums as valid Param for test #97 Params changes an order #104 System.InvalidOperationException: StatSummary: Sequence contains no elements #105 Params Attribute bug with float type #116 Issue when ParamAttribute decorated property is double and current system culture has comma as decimal separator #119 For large benchmarks report exporting is very, very slow and has a massive Gen2 heap #123 Can not run benchmark that references custom framework library (like WindowsBase) Merged pull requests (2) #124 Faster export (by @adamsitnik ) #125 supporting all kinds of references for generated project (by @adamsitnik ) Commits (55) 74789d Sort results by Parameter, in a Natural Sort Order (by @mattwarren ) fec115 ParameterComparer refacotring (by @AndreyAkinshin ) 9d3856 Add information about JIT modules in EnvironmentHelper (by @AndreyAkinshin ) 7667ee Adding TraceEvent library for parsing ETW Events (by @mattwarren ) ae71f2 More work on the GC/Allocation diagnostics (by @mattwarren ) efa739 Allow diagnosers to be run from cmd line or via [Config(..)] (by @mattwarren ) 633f1c Throw an error when invalid Config(..) options are specified (by @mattwarren ) 04678a Add information about HardwareTimerKind (by @AndreyAkinshin ) 7f3cf0 Fix in GetCorrectTypeNameTest (by @AndreyAkinshin ) d9b890 Fix in HardwareTimerKind (by @AndreyAkinshin ) 416e36 Natural sort order for CsvMeasurementsExporter and plots, Fixed #92 (by @AndreyAkinshin ) dfc54a Ensure we sort the results by Method Name/Description (by @mattwarren ) fa6c62 Changed GCDiagnoser to inspect live ETW event stream instead of recording to ... (by @goldshtn ) d3f7ce Params: float/double/decimal support, Fixed #105 (by @AndreyAkinshin ) 7bce9b Params: enum support, Fixed #96 (by @AndreyAkinshin ) 4890dd Merge pull request #106 from goldshtn/develop (by @mattwarren ) 9072b9 More robust when a benchmark throws an exception (see #104) (by @mattwarren ) 2b9162 Work on #73 - highlighting in the Console output (by @mattwarren ) f62483 Work on #73 - highlighting in the Console output (by @mattwarren ) a639d5 Work on #73 - highlighting in Markdown output (by @mattwarren ) 1457fe Changing [ConfigWithDryJobs] -> [DryConfig] (by @mattwarren ) 396b7d Diagnostics for \"JIT In-lining\" events (by @mattwarren ) 7a1027 Merge remote-tracking branch 'origin/master' into develop (by @adamsitnik ) 6ec7f0 GC Diagnosers: reference to nuget package, unit test for both CLASSIC and DNX (by @adamsitnik ) 9e7059 Proper XML Doc comment for DryConfig attribute (by @mattwarren ) ad6be7 README.md: update (by @AndreyAkinshin ) a4d0b8 Merge branch 'master' into develop (by @adamsitnik ) 71e911 perf: CSV export: less allocations, reusing JobShortInfo (by @adamsitnik ) 409b5e perf: logging with less allocations (by @adamsitnik ) be6bfc perf: simpified LoggerWithPrefix, no need to check for multiple lines because... (by @adamsitnik ) ade8a1 perf: avoid string.Concat and string.PadLeft (by @adamsitnik ) f070eb perf: reuse AllProperties, reduced complexity (by @adamsitnik ) 57c88b perf: deffer export to enable continuous progress updates instead of single l... (by @adamsitnik ) 40071d loggers: final cleanup and fix for doubled new lines for diagnosers (by @adamsitnik ) c46854 supporting all kinds of references for generated project. This closes #49, cl... (by @adamsitnik ) a36e34 Initial work on better cmd line discoverability (part of #78) (by @mattwarren ) 3f0752 Better formatting in the Baseline column (by @mattwarren ) 8ab1a2 More samples (by @mattwarren ) 1981a3 Refactoring of ConfigParser code (part of #78) (by @mattwarren ) 3d1eba Allows \"Exporters\" and \"Analysers\" to be specified via cmd line (part of #78) (by @mattwarren ) 5d195a Allow \"all\" option, i.e. \"exporters=all\" (part of #78) (by @mattwarren ) 2146b8 Added some tests for ConfigParser (by @mattwarren ) 582e08 Merge pull request #124 from PerfDotNet/perf (by @AndreyAkinshin ) 84e67d README: Update team section (by @AndreyAkinshin ) 4d6001 README: add FAQ question (by @AndreyAkinshin ) 43ade3 BenchmarkDotNet.Samples: add #CLASSIC_RELEASE in launchSettings (by @AndreyAkinshin ) e3c2d1 README: some improvements (by @AndreyAkinshin ) c416c4 use the highest used target framework version to avoid framework mismatches +... (by @adamsitnik ) 8a49b3 Merge branch 'develop' into references (by @adamsitnik ) 23b2ea integration tests for complex references scenarios (by @adamsitnik ) ddfa4a classic: specify full name and use newer msbuild dlls to avoid calling extra bat (by @adamsitnik ) 79e8eb code cleanup after LINQPad 4 & 5 verification (by @adamsitnik ) 445137 Merge pull request #125 from PerfDotNet/references (by @AndreyAkinshin ) 4f1e1f Update package description (by @AndreyAkinshin ) 0f5531 Set library version: 0.9.4 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Sasha Goldshtein ( @goldshtn ) Thank you very much! Additional details Milestone: v0.9.4 Date: March 24, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.4 https://www.nuget.org/packages/BenchmarkDotNet/0.9.4-beta"
  },
  "changelog/v0.9.5.html": {
    "href": "changelog/v0.9.5.html",
    "title": "BenchmarkDotNet v0.9.5 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.5 Added validators, JitOptimizationsValidator detects all non-optimzied dlls that were referenced #134 Strong naming #101 Add IOrderProvider #107 Putting all the generated artifacts in a separate folder: ./BenchmarkDotNet.Artifacts/results and ./BenchmarkDotNet.Artifacts/bin #94 Printing dotnet cli version for .NET Core and Dnx451, informing user when not installed. Closed #128 Supporting assembly redirects #67 Changed used msbuild version: 12 for .NET 4.5 (VS 2013), 14 for .NET 4.6 (VS 2015). Closed #132 and #137 Switched to new ‘dotnet’ target framework monikers (dotnet5.4 instead of dnxcore50), why dnx452, dnx46, net462 support added Executing single Benchmark for multiple Runtimes also with Diagnoser attached (see #117 ) Misc minor changes Milestone details In the v0.9.5 scope, 13 issues were resolved and 0 pull requests where merged. This release includes 45 commits by 4 contributors. Resolved issues (13) #67 F# requiring assembly binding redirects for FSharp.Core #94 Put all the generated artifacts in a separate folder #101 Strong naming? #107 Specify benchmark method order #122 Reports: Move params columns next to Method column #128 Print dotnet cli version in EnvironmentInfo #129 Improve DnxAndCoreTests #132 [Bug] FileNotFoundException On 0.9.4. #134 [Feature request] Release builds only? #137 Brand new machine with VS 2015 only b0rks #142 [Suggestion] BenchmarkDotNet.Analyzers.IAnalyser - use same spelling for namespace and type? #148 Crash on [Params] with a string value that contains an invalid path char #150 Declaring nested enums and using them as parameter value make incorrectly generated code/ Merged pull requests (0) Commits (45) 2645ef use AutoGenerateBindingRedirects to avoid assembly conflicts, fixes #67 (by @adamsitnik ) 693b21 warn user if dotnet cli is not installed and print it's version in summary, f... (by @adamsitnik ) bfb017 target NET46 to reference msbuild 14 that comes with VS 2015 to make BDN work... (by @adamsitnik ) fceb3c fallback to bat if MSBuild dlls are not found + generate bat when needed (by @adamsitnik ) 49bdf0 restore: generating build script file (now for all runtimes) (by @adamsitnik ) b9b0bc scripts: cleanup -> build -> show failed tests if any ->cleanup, fixes #129 (by @adamsitnik ) ad64d8 Put all the generated artifacts in a separate folder, fixes #94 (by @adamsitnik ) 902de6 F# samples targeting .NET Core +classic F# part reorganization (by @adamsitnik ) b31c0b supported languages: updated readme & integration tests for Visual Basic (by @adamsitnik ) 24ade7 handle missing MSBuild.dll, get latest msbuild in fallback script scenario, s... (by @adamsitnik ) d371de Spelling mistake in errors message (see #139) (by @mattwarren ) c882dd core: dependencies cleanup + getting rid of warnings (by @adamsitnik ) b14e35 Add IOrderProvider, fixes #107 (by @AndreyAkinshin ) c95267 warn user if non-optimized dll is used, fixes #134 (by @adamsitnik ) 5876f5 Strong naming, fixes #101 (by @adamsitnik ) 036168 Analys(z)ers unification, lets use single spelling, fixes #142 (by @adamsitnik ) 2fa5c0 Update README.md (by @JohanLarsson ) 8b8641 Merge pull request #145 from JohanLarsson/master (by @AndreyAkinshin ) 734533 introducing Validators: validate benchmarks before running, return errors in ... (by @adamsitnik ) eaa943 ExecutionValidator: allow users to verify that all their benchmarks are runna... (by @adamsitnik ) e4fa4b support overriding with 'stronger' validators, eliminate duplicates (by @adamsitnik ) 57666a Add column order for SummaryTable, fixes #122 (by @AndreyAkinshin ) 62af92 Minor fixes in README (by @AndreyAkinshin ) 5e6877 updated README (by @adamsitnik ) 1255a4 Initial work on BenchmarkDotNet.Diagnostics.Windows rename (by @mattwarren ) 59ca8c Ensure renamed diagnostics dll is loaded (BenchmarkDotNet.Diagnostics.Windows... (by @mattwarren ) 825193 Added info about Diagnosers (by @mattwarren ) b836c5 Spelling/formatting (by @mattwarren ) 3f74c7 Fixing project.json (after I overwrite previous changes) (by @mattwarren ) c24a78 Merge branch 'develop' of https://github.com/PerfDotNet/BenchmarkDotNet into ... (by @mattwarren ) 8c678f reflecting recent Diagnosers->Diagnostics.Windows changes (by @adamsitnik ) 9bcdca Executing single Benchmark for multiple Runtimes [with Diagnoser attached] #117 (by @adamsitnik ) 4dffdb Switching to new ‘dotnet’ target framework monikers (by @adamsitnik ) 81b1e4 improved Runtimes descriptions + .NET 4.6.2 support (by @adamsitnik ) 8e92e1 dnx452 and dnx46 support (by @adamsitnik ) 06efde Fix in BaselineDiffColumnTest, see also #122 (by @AndreyAkinshin ) f79f83 DEVELOPING.md: use stable version of dotnet cli (by @AndreyAkinshin ) c2206d BenchmarkDotNet/project.json: correct version for System.IO.FileSystem (by @AndreyAkinshin ) 1b650d Support for nested Enums as Params values, fixes #150 (by @adamsitnik ) 76ef44 characters as Params support, including invalid path characters, fixes #148 (by @adamsitnik ) 14e45c Distinct jobs to avoid possible duplication when config is doubled (by @adamsitnik ) 837254 cleanup (by @adamsitnik ) d0cf6b added NETCore.Platforms dependency to make dotnet cli restore our Core projects (by @adamsitnik ) f7a20e replacing the chars that are invalid for file names, not only paths #148 (by @adamsitnik ) e31872 Set library version: 0.9.5 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Johan Larsson ( @JohanLarsson ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Milestone: v0.9.5 Date: May 02, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.5 https://www.nuget.org/packages/BenchmarkDotNet/0.9.5-beta"
  },
  "changelog/v0.9.6.html": {
    "href": "changelog/v0.9.6.html",
    "title": "BenchmarkDotNet v0.9.6 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.6 Added Percentiles (see #164 ) Added support for Json export (see #84 ) Bugfixes Milestone details In the v0.9.6 scope, 11 issues were resolved and 2 pull requests where merged. This release includes 40 commits by 5 contributors. Resolved issues (11) #100 Code generation doesn't support generic classes #112 Generic benchmark classes are not supported #140 Readd an ability to define and to use custom Toolchain #141 [Request for comments] Assembly-level config attribute? #151 Crash during benchmark with baseline #152 MarkdownExporter.Default.ExportToLog fails with NRE for Summary with Critical Validation Errors #153 ManualConfig.Add(IConfig config) does not add the validators. #156 Cleanup benchmark folders #158 BaselineDiffColumn: NullReferenceException if one of the benchmark methods was failed. #161 Build warnings after update to 0.9.5 #171 Problem with ExceptionDispatchInfo (assignee: @AndreyAkinshin ) Merged pull requests (2) #138 Percentiles added into Statistics, StatisticColumn, BaselineDiffColumn (by @ig-sinicyn ) #164 Percentiles added into Statistics, StatisticColumn, BaselineDiffColumn (by @ig-sinicyn ) Commits (40) 9e625a copying validators when merging configs, fixes #153 (by @adamsitnik ) 5d0a7d returning empty objects instead of nulls, fixes #152 (by @adamsitnik ) cfff3b switching back to the old moniker that is supported not only by dnx and dotne... (by @adamsitnik ) 522fde Initial work on Json export (#84) (by @mattwarren ) 31452f Make SimpleJson build under \"DNXCore,Version=v5.0\" - (#84) (by @mattwarren ) 48b17a Merge branch 'develop' of github.com:PerfDotNet/BenchmarkDotNet into develop (by @mattwarren ) d8dad6 removing ClrMD dependencies that were causing troubles with nuget package rel... (by @adamsitnik ) 0a81d4 removing ClrMd diagnosers, they are kept in clrmd branch (by @adamsitnik ) 972ea2 setting BenchmarkDotNet version to one that is not in the Nuget yet to get do... (by @adamsitnik ) 1e6581 Removing final traces or Runtime and Source SourceDiagnosers (by @mattwarren ) 3576d4 Make BaselineDiffColumn more robust - fixes #158 and #151 (by @mattwarren ) 3f0d7b Exclude \"BenchmarkDotNet.Artifacts\" folder (can get in the way when building) (by @mattwarren ) 00995d Percentiles added into Statistics, StatisticColumn, BaselineDiffColumn (by @ig-sinicyn ) 2410d4 Update project.json files (by @AndreyAkinshin ) ed75f6 Assembly-level config attribute, Fixes #141 (by @AndreyAkinshin ) 6f3a0c Add a BenchmarkSwitcher constructor for assembly, see #141 (by @AndreyAkinshin ) 4124d0 Catch InvalidOperationException in ClassicBuilder (by @AndreyAkinshin ) 9c8513 Cleanup benchmark folders (by default!), fixes #156 (by @adamsitnik ) d0179f merge KeepBenchmarkFiles and allow fluent api usage, #156 (by @adamsitnik ) b8130a Readd an ability to define and to use custom Toolchain, fixes #140 (by @adamsitnik ) 8a263b moving KeepBenchmarkFiles merge logic to Add method (by @adamsitnik ) e1e5c7 Sample & documentation for percentiles (by @ig-sinicyn ) 0d4262 Merge commit '00995dfac270ae71e81897348ec379cd97fb01c3' into feature-percentiles (by @ig-sinicyn ) 54b4f0 Merge pull request #164 from ig-sinicyn/feature-percentiles (by @AndreyAkinshin ) f8278c Generic benchmark support, fixes #100, fixes #112 (by @AndreyAkinshin ) c28056 Support Mono+.NET4.6 in CommonExtensions.ToStr. (by @AndreyAkinshin ) 285f77 set dependencies to MSBuild dlls as \"type\": \"build\" to make them implicit dep... (by @adamsitnik ) 42abd1 Merge remote-tracking branch 'refs/remotes/origin/develop' into develop (by @mattwarren ) 030d6c Rename \"GCDiagnoser\" -> \"MemoryDiagnoser\" (by @mattwarren ) 4e96e6 give compilation error instead of warning or exception at runtime (by @adamsitnik ) 0fbe10 Revert \"give compilation error instead of warning or exception at runtime\" (by @adamsitnik ) 19708a Tidy up of the Integration tests (by @mattwarren ) f7b3a4 Thread safe jobs, fixes #171 (by @AndreyAkinshin ) edf293 DisableTestParallelization for Classic integration tests to avoid races (by @adamsitnik ) 89165f moving dll that is required for custom path integration tests out of root folder (by @adamsitnik ) cbaa3b README: Add additional info about RPlotExprter (by @AndreyAkinshin ) 1cc936 The benchmark is improperly testing the Max operation because as all the numb... (by @redknightlois ) 40a1ea Merge pull request #173 from redknightlois/develop (by @AndreyAkinshin ) a9bf3b README: add information about the diagnostics package (by @AndreyAkinshin ) 5191bc Set library version: 0.9.6 (by @AndreyAkinshin ) Contributors (5) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) ig-sinicyn ( @ig-sinicyn ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Milestone: v0.9.6 Date: May 11, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.6 https://www.nuget.org/packages/BenchmarkDotNet/0.9.6-beta https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.6"
  },
  "articles/team.html": {
    "href": "articles/team.html",
    "title": "Team | BenchmarkDotNet",
    "keywords": "Team This project is supported by the .NET Foundation . Maintainers: Andrey Akinshin (Project Lead), Adam Sitnik Contributors: Jon Skeet , Matt Warren , Sasha Goldshtein , and others"
  },
  "articles/configs/analysers.html": {
    "href": "articles/configs/analysers.html",
    "title": "Analysers | BenchmarkDotNet",
    "keywords": "Analysers An analyser can analyse summary of your benchmarks and produce some useful warnings. For example, EnvironmentAnalyser warns you, if you build your application in the DEBUG mode or run it with an attached debugger."
  },
  "articles/configs/columns.html": {
    "href": "articles/configs/columns.html",
    "title": "Columns | BenchmarkDotNet",
    "keywords": "Columns A column is a column in the summary table. Default columns In this section, default columns (which be added to the Summary table by default) are presented. Some of columns are optional, i.e. they can be omitted (it depends on the measurements from the summary). Target There are 3 default columns which describes the target benchmark: Namespace , Type , Method . Namespace and Type will be omitted when all the benchmarks have the same namespace or type name. Method column always be a part of the summary table. Job There are many different job characteristics, but the summary includes only characteristics which has at least one non-default value. Statistics There are also a lot of different statistics which can be considered. It will be really hard to analyse the summary table, if all of the available statistics will be shown. Fortunately, BenchmarkDotNet has some heuristics for statistics columns and shows only important columns. For example, if all of the standard deviations are zero (we run our benchmarks against Dry job), this column will be omitted. The standard error will be shown only for cases when we are failed to achieve required accuracy level. Only Mean will be always shown. If the distribution looks strange, BenchmarkDotNet could also print additional columns like Median or P95 (95th percentile). If you need specific statistics, you always could add them manually. Params If you have params , the corresponded columns will be automatically added. Diagnosers If you turned on diagnosers which providers additional columns, they will be also included in the summary page. Optional columns TagColumns In the following example, we introduce two new columns which contains a tag based on a benchmark method name: [Config(typeof(Config))] public class IntroTags { private class Config : ManualConfig { public Config() { // You can add custom tags per each method using Columns Add(new TagColumn(\"Kind\", name => name.Substring(0, 3))); Add(new TagColumn(\"Number\", name => name.Substring(3))); } } [Benchmark] public void Foo1() { /* ... */ } [Benchmark] public void Foo12() { /* ... */ } [Benchmark] public void Bar3() { /* ... */ } [Benchmark] public void Bar34() { /* ... */ } } Result: Method Mean Kind Number Bar34 10.3636 ms Bar 34 Bar3 10.4662 ms Bar 3 Foo12 10.1377 ms Foo 12 Foo1 10.2814 ms Foo 1 RankColumn RankColumn allows you to rank your benchmarks. If there is no significant difference between two benchmarks, they will have the same rank. It also makes sense to define a SummaryOrderPolicy (e.g. FastestToSlowest or SlowestToFastest ) when you are using RankColumn . An example: [OrderProvider(SummaryOrderPolicy.FastestToSlowest)] [RankColumn] [RankColumn(NumeralSystem.Roman)] public class IntroRankColumn { [Params(1, 2)] public int Factor; [Benchmark] public void Foo() => Thread.Sleep(Factor * 100); [Benchmark] public void Bar() => Thread.Sleep(Factor * 200); } Result: Method | Factor | Mean | Rank | Rank | ------- |------- |------------ |----- |----- | Foo | 1 | 100.2541 ms | 1 | I | Foo | 2 | 200.3021 ms | 2 | II | Bar | 1 | 200.3863 ms | 2 | II | Bar | 2 | 400.3847 ms | 3 | III | Custom columns Of course, you can define own custom columns and use it everywhere. Here is the definition of TagColumn : public class TagColumn : IColumn { private readonly Func<string, string> getTag; public string ColumnName { get; } public TagColumn(string columnName, Func<string, string> getTag) { this.getTag = getTag; ColumnName = columnName; } public bool IsDefault(Summary summary, Benchmark benchmark) => false; public string GetValue(Summary summary, Benchmark benchmark) => getTag(benchmark.Target.Method.Name); public bool IsAvailable(Summary summary) => true; public bool AlwaysShow => true; public ColumnCategory Category => ColumnCategory.Custom; public override string ToString() => ColumnName; }"
  },
  "articles/guides/choosing-run-strategy.html": {
    "href": "articles/guides/choosing-run-strategy.html",
    "title": "Choosing RunStrategy | BenchmarkDotNet",
    "keywords": "Choosing RunStrategy If you run a benchmark, you always (explicitly or implicitly) use a job . Each Job has the RunStrategy parameter which allows switching between different benchmark modes. The default RunStrategy is Throughput , and it works fine for most cases. However, other strategies are also useful in some specific cases. Throughput Throughput is the default RunStrategy , works perfectly for microbenchmarking. It's automatically choosing the amount of operation in main iterations based on a set of pilot iterations. The amount of iterations will also be chosen automatically based on accuracy job settings. A benchmark method should have a steady state. Of course, you can manually set all the characteristics. An example: [SimpleJob(launchCount: 3, warmupCount: 10, targetCount: 30)] public class MyBenchmarkClass Monitoring If a benchmark method takes at least 100ms, you can also use the Monitoring strategy. In this case, the pilot stage will be omitted, by default you get 1 iteration = 1 operation (or you can manually set amount of operation in an iteration). Also you can use [IterationSetup] and [IterationCleanup] in this case: it shouldn't affect time measurements (but it can affect results of MemoryDiagnoser). It's a perfect mode for benchmarks which doesn't have a steady state and the performance distribution is tricky: Monitoring will help you to collect a set of measurements and get statistics. [SimpleJob(RunStrategy.Monitoring, launchCount: 10, warmupCount: 0, targetCount: 100)] public class MyBenchmarkClass ColdStart If you want to measure cold start (without the pilot and warmup stage), the ColdStart strategy is your choice. [SimpleJob(RunStrategy.ColdStart, launchCount:50)] public class MyBenchmarkClass"
  },
  "articles/guides/customizing-runtime.html": {
    "href": "articles/guides/customizing-runtime.html",
    "title": "Customizing Runtime | BenchmarkDotNet",
    "keywords": "Customizing Runtime Currently, we have only information about customzing Mono in this section. If you want to customize .NET Core, read an artcile about Toolchains . Sample: IntroCustomMono BenchmarkDotNet allows you to compare different runtimes, including Mono. If you apply [MonoJob] attribute to your class we use your default mono runtime. If you want to compare different versions of Mono you need to provide use the custom paths. You can do this today by using the overloaded ctor of MonoJob attribute or by specifying the runtime in a fluent way. Source code using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Environments; using BenchmarkDotNet.Jobs; using BenchmarkDotNet.Running; namespace BenchmarkDotNet.Samples { // *** Attribute Style *** [MonoJob(\"Mono x64\", @\"C:\\Program Files\\Mono\\bin\\mono.exe\")] [MonoJob(\"Mono x86\", @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\")] public class IntroCustomMono { [Benchmark] public void Foo() { // Benchmark body } } // *** Object Style *** [Config(typeof(Config))] public class IntroCustomMonoObjectStyle { private class Config : ManualConfig { public Config() { Add(Job.ShortRun.With(new MonoRuntime( \"Mono x64\", @\"C:\\Program Files\\Mono\\bin\\mono.exe\"))); Add(Job.ShortRun.With(new MonoRuntime( \"Mono x86\", @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\"))); } } [Benchmark] public void Foo() { // Benchmark body } } // *** Fluent Config *** public class IntroCustomMonoFluentConfig { public static void Run() { BenchmarkRunner.Run<IntroCustomMonoFluentConfig>(ManualConfig .CreateEmpty() .With(Job.ShortRun.With(new MonoRuntime( \"Mono x64\", @\"C:\\Program Files\\Mono\\bin\\mono.exe\"))) .With(Job.ShortRun.With(new MonoRuntime( \"Mono x86\", @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\")))); } [Benchmark] public void Foo() { // Benchmark body } } } See also Customizing Runtime The link to this sample: Sample: IntroCustomMono Sample: IntroCustomMonoArguments Source code using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; namespace BenchmarkDotNet.Samples { [Config(typeof(ConfigWithCustomArguments))] public class IntroCustomMonoArguments { public class ConfigWithCustomArguments : ManualConfig { public ConfigWithCustomArguments() { // --optimize=MODE , -O=mode // MODE is a comma separated list of optimizations. They also allow // optimizations to be turned off by prefixing the optimization // name with a minus sign. Add(Job.Mono .With(new[] { new MonoArgument(\"--optimize=inline\") }) .WithId(\"Inlining enabled\")); Add(Job.Mono .With(new[] { new MonoArgument(\"--optimize=-inline\") }) .WithId(\"Inlining disabled\")); } } [Benchmark] public void Sample() { ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); } void ShouldGetInlined() { } } } Output | Method | Job | Arguments | Mean | StdDev | |------- |------------------ |------------------- |-----------:|----------:| | Sample | Inlining disabled | --optimize=-inline | 19.4252 ns | 0.4525 ns | | Sample | Inlining enabled | --optimize=inline | 0.0000 ns | 0.0000 ns | See also Customizing Runtime The link to this sample: Sample: IntroCustomMonoArguments Sample: IntroEnvVars You can configure custom environment variables for the process that is running your benchmarks. One reason for doing this might be checking out how different runtime knobs affect the performance of .NET Core. Source code using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; namespace BenchmarkDotNet.Samples { [Config(typeof(ConfigWithCustomEnvVars))] public class IntroEnvVars { private class ConfigWithCustomEnvVars : ManualConfig { private const string JitNoInline = \"COMPlus_JitNoInline\"; public ConfigWithCustomEnvVars() { Add(Job.Core.WithId(\"Inlining enabled\")); Add(Job.Core .With(new[] { new EnvironmentVariable(JitNoInline, \"1\") }) .WithId(\"Inlining disabled\")); } } [Benchmark] public void Foo() { // Benchmark body } } } See also Customizing Runtime Configs Jobs The link to this sample: Sample: IntroEnvVars Sample: IntroStaThread If the code you want to benchmark requires [System.STAThread] then you need to apply this attribute to the benchmarked method. BenchmarkDotNet will generate executable with [STAThread] applied to it's Main method. Currently it does not work for .NET Core 2.0 due to this bug. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroStaThread { [Benchmark, System.STAThread] public void CheckForSTA() { if (Thread.CurrentThread.GetApartmentState() != ApartmentState.STA) { throw new ThreadStateException( \"The current threads apartment state is not STA\"); } } } } See also Customizing Runtime The link to this sample: Sample: IntroStaThread"
  },
  "articles/guides/getting-started.html": {
    "href": "articles/guides/getting-started.html",
    "title": "Getting started | BenchmarkDotNet",
    "keywords": "Getting started To get started with BenchmarkDotNet, please follow these steps. Step 1. Installation Install BenchmarkDotNet via the NuGet package: BenchmarkDotNet PM> Install-Package BenchmarkDotNet Read more about BenchmarkDotNet NuGet packages: Installing NuGet packages Step 2. Design a benchmark Create a new console application, write a class with methods that you want to measure and mark them with the Benchmark attribute. In the following example, we compare MD5 and SHA256 cryptographic hash functions: using System; using System.Security.Cryptography; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Running; namespace MyBenchmarks { public class Md5VsSha256 { private const int N = 10000; private readonly byte[] data; private readonly SHA256 sha256 = SHA256.Create(); private readonly MD5 md5 = MD5.Create(); public Md5VsSha256() { data = new byte[N]; new Random(42).NextBytes(data); } [Benchmark] public byte[] Sha256() => sha256.ComputeHash(data); [Benchmark] public byte[] Md5() => md5.ComputeHash(data); } public class Program { public static void Main(string[] args) { var summary = BenchmarkRunner.Run<Md5VsSha256>(); } } } The BenchmarkRunner.Run<Md5VsSha256>() call runs your benchmarks and print results to console output. Step 3. View results View the results. Here is an example of output from the above benchmark: BenchmarkDotNet=v0.10.1, OS=Microsoft Windows NT 6.2.9200.0 Processor=Intel(R) Core(TM) i7-4702MQ CPU 2.20GHz, ProcessorCount=8 Frequency=2143476 Hz, Resolution=466.5319 ns, Timer=TSC [Host] : Clr 4.0.30319.42000, 64bit RyuJIT-v4.6.1586.0 DefaultJob : Clr 4.0.30319.42000, 64bit RyuJIT-v4.6.1586.0 Method Mean StdDev Allocated Sha256 130.5169 us 1.8489 us 188 B Md5 25.8010 us 0.1757 us 113 B Step 4. Analyze results Analyze it. In your bin directory, you can find a lot of useful files with detailed information. For example: Csv reports with raw data: Md5VsSha256-report.csv , Md5VsSha256-runs.csv Markdown reports: Md5VsSha256-report-default.md , Md5VsSha256-report-stackoverflow.md , Md5VsSha256-report-github.md Plain report and log: Md5VsSha256-report.txt , Md5VsSha256.log Plots (if you have installed R): Md5VsSha256-barplot.png , Md5VsSha256-boxplot.png , and so on. Next steps BenchmarkDotNet provides a lot of features which help to high-quality performance research. If you want to know more about BenchmarkDotNet features, checkout the Overview page. If you want have any questions, checkout the FAQ page. If you didn't find answer for your question on this page, ask it on gitter or create an issue ."
  },
  "articles/guides/good-practices.html": {
    "href": "articles/guides/good-practices.html",
    "title": "Good Practices | BenchmarkDotNet",
    "keywords": "Good Practices Use the Release build without an attached debugger Never use the Debug build for benchmarking. Never . The debug version of the target method can run 10–100 times slower. The release mode means that you should have <Optimize>true</Optimize> in your csproj file or use /optimize for csc . Also your never should use an attached debugger (e.g. Visual Studio or WinDbg) during the benchmarking. The best way is build our benchmark in the Release mode and run it from the command line. Try different environments Please, don't extrapolate your results. Or do it very carefully. I remind you again: the results in different environments may vary significantly. If a Foo1 method is faster than a Foo2 method for CLR4, .NET Framework 4.5, x64, RyuJIT, Windows, it means that the Foo1 method is faster than the Foo2 method for CLR4, .NET Framework 4.5, x64, RyuJIT, Windows and nothing else. And you can not say anything about methods performance for CLR 2 or .NET Framework 4.6 or LegacyJIT-x64 or x86 or Linux+Mono until you try it. Avoid dead code elimination You should also use the result of calculation. For example, if you run the following code: void Foo() { Math.Exp(1); } then JIT can eliminate this code because the result of Math.Exp is not used. The better way is use it like this: double Foo() { return Math.Exp(1); } Power settings and other applications Turn off all of the applications except the benchmark process and the standard OS processes. If you run benchmark and work in the Visual Studio at the same time, it can negatively affect to benchmark results. If you use laptop for benchmarking, keep it plugged in and use the maximum performance mode."
  },
  "articles/guides/how-it-works.html": {
    "href": "articles/guides/how-it-works.html",
    "title": "How it works | BenchmarkDotNet",
    "keywords": "How it works BenchmarkDotNet follows the following steps to run your benchmarks: BenchmarkRunner generates an isolated project per each runtime settings and builds it in Release mode. Next, we take each method/job/params combination and try to measure its performance by launching benchmark process several times ( LaunchCount ). An invocation of the target method is an operation . A bunch of operation is an iteration . If you have an IterationSetup method, it will be invoked before each iteration, but not between operations. We have the following type of iterations: Pilot : The best operation count will be chosen. IdleWarmup , IdleTarget : BenchmarkDotNet overhead will be evaluated. MainWarmup : Warmup of the main method. MainTarget : Main measurements. Result = MainTarget - <AverageOverhead> After all of the measurements, BenchmarkDotNet creates: An instance of the Summary class that contains all information about benchmark runs. A set of files that contains summary in human-readable and machine-readable formats. A set of plots. Pseudocode If you don't understand our \"count terminology\", then you might find following pseudocode useful: IEnumberable<Results> Run(Benchmark benchmark) { var toolchain = benchmark.GetToolchain(); var autoGeneratedProject = toolchain.Generate(benchmark); var exe = toolchain.Build(autoGeneratedProject); foreach (var runIndex in LaunchCount) // LaunchCount = 1 by default yield return ParseResults(Process.Start(exe).Output); // calls ActualRun in a separate process } Result ActualRun(Method method) { GlobalSetup(); long perfectInvocationCount = Pilot(method); Warmup(EMPTY_METHOD, perfectInvocationCount); // EMPTY_METHOD has same return type and arguments as benchmark var overhead = Target(EMPTY_METHOD, perfectInvocationCount); Warmup(method, perfectInvocationCount); var result = Target(method, perfectInvocationCount); GlobalCleanup(); return result - Avg(overhead); } long Pilot(Method method) { // invokeCount is the equivalent of InnerIterationCount from xunit-performance long invokeCount = minInvokeCount; while (true) { var measurement = RunIteration(method, invokeCount, unrollFactor); if (heuristic.IsPilotRequirementMet(measurement)) break; invokeCount *= 2; } return invokeCount; } void Warmup(Method method, long invokeCount) { while (true) { var measurement = RunIteration(method, invokeCount, unrollFactor); if (heuristic.IsWamupRequirementMet(measurement)) break; } } IEnumberable<Measurement> Target(Method method, long invokeCount) { while (true) { var measurement = RunIteration(method, invokeCount, unrollFactor); if (measurement.IsNotOutlier) yield return measurement; if (heuristic.IsTargetRequirementMet(measurement)) yield break; } } // every iteration invokes the method (invokeCount / unrollFactor) times Measurement RunIteration(Method method, long invokeCount, long unrollFactor) { IterationSetup(); MemoryCleanup(); var clock = Clock.Start(); for (long i = 0; i < invokeCount / unrollFactor; i++) { // we perform manuall loop unrolling!! method(); // 1st call method(); // 2nd call method(); // (unrollFactor - 1)'th call method(); // unrollFactor'th call } var clockSpan = clock.GetElapsed(); IterationCleanup(); MemoryCleanup(); return Measurement(clockSpan); }"
  },
  "articles/guides/how-to-run.html": {
    "href": "articles/guides/how-to-run.html",
    "title": "How to run your benchmarks | BenchmarkDotNet",
    "keywords": "How to run your benchmarks There are several ways to run your benchmarks: Types var summary = BenchmarkRunner.Run<MyBenchmarkClass>(); var summary = BenchmarkRunner.Run(typeof(MyBenchmarkClass)); Url You can also run a benchmark directly from the internet: string url = \"<E.g. direct link to raw content of a gist>\"; var summary = BenchmarkRunner.RunUrl(url); Source string benchmarkSource = \"public class MyBenchmarkClass { ...\"; var summary = BenchmarkRunner.RunSource(benchmarkSource); BenchmarkSwitcher Or you can create a set of benchmarks and choose one from command line: static void Main(string[] args) { var switcher = new BenchmarkSwitcher(new[] { typeof(BenchmarkClass1), typeof(BenchmarkClass2), typeof(BenchmarkClass3) }); switcher.Run(args); } Also you can use the config command style to specify some config via switcher or even command line: switcher.Run(new[] { \"jobs=dry\", \"columns=min,max\" });"
  },
  "articles/guides/nuget.html": {
    "href": "articles/guides/nuget.html",
    "title": "Installing NuGet packages | BenchmarkDotNet",
    "keywords": "Installing NuGet packages Packages We have the following set of NuGet packages (you can install it directly from nuget.org ): BenchmarkDotNet : Basic BenchmarkDotNet infrastructure and logic. Doesn't have any dependencies. This is all you need to run benchmarks. BenchmarkDotNet.Diagnostics.Windows : an additional optional package that provides a set of Windows diagnosers. Versioning system and feeds We have 3 kinds of versions: stable , nightly , and develop . You can get the current version from the source code via BenchmarkDotNetInfo.FullVersion and the full title via BenchmarkDotNetInfo.FullTitle . Stable These versions are available from the official NuGet feed. <packageSources> <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" /> </packageSources> Example of the main NuGet package: BenchmarkDotNet.0.10.3.nupkg . Example of BenchmarkDotNetInfo.FullTitle : BenchmarkDotNet v0.10.3 . Nightly If you want to use a nightly version of the BenchmarkDotNet, add the https://ci.appveyor.com/nuget/benchmarkdotnet feed in the <packageSources> section of your NuGet.config : <packageSources> <add key=\"bdn-nightly\" value=\"https://ci.appveyor.com/nuget/benchmarkdotnet\" /> </packageSources> Now you can install the packages from the bdn-nightly feed. Example of the main NuGet package: BenchmarkDotNet.0.10.3.13.nupkg . Example of BenchmarkDotNetInfo.FullTitle : BenchmarkDotNet v0.10.3.13-nightly . Develop You also can build BenchmarkDotNet from source code. The .nupkg files could be build with the help of .\\build\\build-and-pack.cmd . Example of the main NuGet package: BenchmarkDotNet.0.10.3-develop.nupkg . Example of BenchmarkDotNetInfo.FullTitle : BenchmarkDotNet v0.10.3.20170304-develop ."
  },
  "changelog/v0.10.11.html": {
    "href": "changelog/v0.10.11.html",
    "title": "BenchmarkDotNet v0.10.11 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.11 Highlights ByRef and Stack-only support ( #492 , sample ) .NET Core 2.1 support ( #587 ) Improved LINQPad support Smart logic for precision in ScaledColumn ( #509 , #590 ) Better macOS version detection ( 15d72388 ) Minor fixes and improvements Milestone details In the v0.10.11 scope, 6 issues were resolved and 8 pull requests where merged. This release includes 18 commits by 8 contributors. Resolved issues (6) #509 Better formatting for the Scaled column #579 Improve error message about non-optimized dependencies (assignee: @adamsitnik ) #580 How to get benchmarks running from LINQPad? (assignee: @adamsitnik ) #587 Support netcoreapp2.1 (assignee: @eerhardt ) #588 Broken appveyor build #593 BenchmarkDotNet is not working with LinqPad (assignee: @adamsitnik ) Merged pull requests (8) #492 ByRef and Stack-only support (by @adamsitnik ) #575 xUnit runner upgrade and small tests refactoring (by @Ky7m ) #584 Fixed typo. (by @cincuranet ) #589 Add support for netcoreapp2.1 (by @eerhardt ) #590 Add precision to Scaled Column (by @Chrisgozd ) #591 Fix CI build (by @Ky7m ) #592 Removed a xunit workaround because an issue has been fixed (by @AlekseiKudelia ) #597 Fix typo in WithCustomBuildConfiguration API (by @benjamin-hodgson ) Commits (18) 2a2e6c ByRef and Stack-only support (#492) (by @adamsitnik ) 676c77 xUnit runner upgrade and small tests refactoring (#575) (by @Ky7m ) 7a89cd Fixed typo. (by @cincuranet ) dd28b2 add better error text for non-optimized dlls + add it to FAQ, fixes #579 (by @adamsitnik ) 67e659 detect LINQPad problems and tell the user how to change them, fixes #580 (by @adamsitnik ) 543bd6 don't warn about non-optimized LINQPad dependency (it's OK), #580 (by @adamsitnik ) 8a94f2 Add support for netcoreapp2.1 (by @eerhardt ) fb39db Merge pull request #589 from eerhardt/SupportNetCoreApp21 (by @adamsitnik ) ef11f0 Add CoverageFilterXml in DotSettings (by @AndreyAkinshin ) 962b6a Update DotSetttings (by @AndreyAkinshin ) 717b62 BenchmarkDotNet.Horology cleanup (by @AndreyAkinshin ) d1720b Upgrade version to 2.0.3 and explicitly specify fx version for .netcoreapp2.0 (by @Ky7m ) 94d47a Removed a xunit workaround because an issue has been fixed (by @AlekseiKudelia ) 15d723 More details in GetOsVersion on macOS (by @AndreyAkinshin ) 696f89 Add precision to Scaled Column (#590) (by @Chrisgozd ) e54924 Fix typo in WithCustomBuildConfiguration API (by @benjamin-hodgson ) 8de978 Merge pull request #597 from benjamin-hodgson/patch-1 (by @adamsitnik ) af1510 Set library version: 0.10.11 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) AlekseiKudelia ( @AlekseiKudelia ) Andrey Akinshin ( @AndreyAkinshin ) Benjamin Hodgson ( @benjamin-hodgson ) Christopher Gozdziewski ( @Chrisgozd ) Eric Erhardt ( @eerhardt ) Igor Fesenko ( @Ky7m ) Jiri Cincura ↹ ( @cincuranet ) Thank you very much! Additional details Date: December 01, 2017 Milestone: v0.10.11 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.11 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.11 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.11 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.11"
  },
  "changelog/v0.10.12.html": {
    "href": "changelog/v0.10.12.html",
    "title": "BenchmarkDotNet v0.10.12 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.12 Overview post: BenchmarkDotNet v0.10.12 Highlights Improved DisassemblyDiagnoser: BenchmarkDotNet contains an embedded disassembler so that it can print assembly code for all benchmarks; it's not easy, but the disassembler evolves in every release. Improved MemoryDiagnoser: it has a better precision level, and it takes less time to evaluate memory allocations in a benchmark. New TailCallDiagnoser: now you get notifications when JIT applies the tail call optimizations to your methods. Better environment info: when your share performance results, it's very important to share information about your environment. The library generates the environment summary for you by default. Now it contains information about the amount of physical CPU, physical cores, and logic cores. If you run a benchmark on a virtual machine, you will get the name of the hypervisor (e.g., Hyper-V, VMware, or VirtualBox). Better summary table: one of the greatest features of BenchmarkDotNet is the summary table. It shows all important information about results in a compact and understandable form. Now it has better customization options: you can display relative performance of different environments (e.g., compare .NET Framework and .NET Core) and group benchmarks by categories. Milestone details In the v0.10.12 scope, 15 issues were resolved and 10 pull requests where merged. This release includes 42 commits by 9 contributors. Resolved issues (15) #273 Create a tail call diagnoser #442 Is it possible to configure benchmark to assign rank for runtime? (assignee: @AndreyAkinshin ) #543 Run Disassembly Diagnoser without extra run (assignee: @adamsitnik ) #546 Synthesizing labels for jump targets (assignee: @adamsitnik ) #574 Display VM hypervisor in summary section (assignee: @lukasz-pyrzyk ) #582 Print amount of logical and physical core (assignee: @morgan-kn ) #599 Proper HTML escaping of BenchmarkAttribute Description #606 Improve Memory Diagnoser (assignee: @adamsitnik ) #608 Properly escaping generated markdown (assignee: @AndreyAkinshin ) #612 Disassembler DisassembleMethod fails with \"Object reference not set to an instance of an object.\", (assignee: @adamsitnik ) #617 Allow baseline per category (assignee: @AndreyAkinshin ) #618 Enable ApprovalTests in .NET Core 2.0 tests (assignee: @AndreyAkinshin ) #621 Try to search for missing references if build fails (assignee: @adamsitnik ) #622 Support of new GC settings (assignee: @adamsitnik ) #623 RPlotExporter uses wrong path to csv measurements (assignee: @AndreyAkinshin ) Merged pull requests (10) #573 Сreate a tail call diagnoser (by @GeorgePlotnikov ) #576 Display VM name in summary section, fixes #574 (by @lukasz-pyrzyk ) #595 Migrate all project to new project system. (by @mfilippov ) #598 Added info about the new TailCallDiagnoser (by @GeorgePlotnikov ) #603 Fix HTML Encoding for Html Exporter (by @Chrisgozd ) #605 Grammar (by @onionhammer ) #607 Print amount of logical and physical core #582 (by @morgan-kn ) #615 Quick fix Disassembler.Program.GetMethod when more than one method found just return null (by @nietras ) #619 Logical group support, fixes #617 (by @AndreyAkinshin ) #620 New README.md (by @AndreyAkinshin ) Commits (42) 6f587d Migrate all project to new project system. (by @mfilippov ) 47ba57 added info about the new TailCallDiagnoser (by @GeorgePlotnikov ) c1a4b2 Сreate a tail call diagnoser (#573) (by @GeorgePlotnikov ) ebe3e2 Merge pull request #598 from GeorgePlotnikov/patch-1 (by @adamsitnik ) 6249f0 some polishing of the JIT diagnosers (by @adamsitnik ) 119231 Fix HTML Encoding for Html Exporter (#603), fixes #599 (by @Chrisgozd ) fe3f30 Disassembly Prettifier, fixes #546 (by @adamsitnik ) 3eb63f Merge pull request #595 from mfilippov/new-fs-vb-proj (by @adamsitnik ) 16d03f make our F# samples work for .NET Core 2.0 (by @adamsitnik ) d06de7 bring back our old Visual Basic and F# integration tests (by @adamsitnik ) 63249b \"Kaby Lake R\" and \"Coffee Lake\" support in ProcessorBrandStringHelper (by @AndreyAkinshin ) a8a09e disassembly prettifier: highlighting references to labels, jumping to next on... (by @adamsitnik ) e6d747 Grammar (by @onionhammer ) fef4aa Merge pull request #605 from onionhammer/patch-1 (by @adamsitnik ) ffacd7 don't require extra run for DisassemblyDiagnoser, fixes #543, #542 (by @adamsitnik ) bcac26 revert last commit change (run global setup regardless of Jitting) (by @adamsitnik ) 3e87d8 don't perform an extra run to get GC stats for .NET Core, part of #550 (by @adamsitnik ) f87dbc obtain GC stats in separate iteration run, no overhead, support for iteration... (by @adamsitnik ) e5fe0f update to C# 7.1 so we can use all the latest features (by @adamsitnik ) bc50b2 build benchmarks in Parallel, part of #550 (by @adamsitnik ) e59590 Display VM name in summary section, fixes #574 (#576) (by @lukasz-pyrzyk ) 8908f8 fix GetMethod (by @nietras ) 4ca82d Merge pull request #615 from nietras/disassembler-more-than-one-method-fix (by @adamsitnik ) 387ae5 be more defensive when trying to read source code with disassembler, part of ... (by @adamsitnik ) 703815 docs: how to contribute to disassembler (by @adamsitnik ) 242671 Enable ApprovalTests in .NET Core 2.0 tests, fixes #618 (by @AndreyAkinshin ) c4d21b Print amount of logical and physical core #582 (#607) (by @morgan-kn ) e33e84 Add HtmlReady dialect for MarkdownExporter, fixes #608 (by @AndreyAkinshin ) cf167b Enable html escaping for GitHub markdown dialect, fixes #608 (by @AndreyAkinshin ) 8bb28b Logical group support, fixes #617 (by @AndreyAkinshin ) ae87c6 Merge pull request #619 from dotnet/logical-groups (by @adamsitnik ) 14e90b parallel build post fix: don't write the compilation errors to NullLogger, re... (by @adamsitnik ) db4ae8 Try to search for missing references if build fails, fixes #621 (by @adamsitnik ) 0eba0f Support of new GC settings, fixes #622 (by @adamsitnik ) e31b2d Revert Samples/Program.cs (by @AndreyAkinshin ) 7f126b Add logs in RPlotExporter (by @AndreyAkinshin ) f8a447 Fix path to csv in RPlotExporter, fixes #623 (by @AndreyAkinshin ) 273f50 New plots in RPlotExporter (by @AndreyAkinshin ) f293f0 New README.md (#620) (by @AndreyAkinshin ) 5e3366 Update copyright year in docs (by @AndreyAkinshin ) ab7458 Update index in docs (by @AndreyAkinshin ) 4616d4 Set library version: 0.10.12 (by @AndreyAkinshin ) Contributors (9) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Christopher Gozdziewski ( @Chrisgozd ) Erik O'Leary ( @onionhammer ) George Plotnikov ( @GeorgePlotnikov ) Irina Ananyeva ( @morgan-kn ) Łukasz Pyrzyk ( @lukasz-pyrzyk ) Mikhail Filippov ( @mfilippov ) nietras ( @nietras ) Thank you very much! Additional details Date: January 15, 2018 Milestone: v0.10.12 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.12 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.12 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.12 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.12"
  },
  "changelog/v0.10.13.html": {
    "href": "changelog/v0.10.13.html",
    "title": "BenchmarkDotNet v0.10.13 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.13 Overview post: BenchmarkDotNet v0.10.13 Milestone details In the v0.10.13 scope, 15 issues were resolved and 9 pull requests where merged. This release includes 50 commits by 8 contributors. Resolved issues (15) #541 Mono Support for DisassemblyDiagnoser (assignee: @morgan-kn ) #614 Build fails with \"'Microsoft.NETCore.App', version '1.1.2' was not found\" probably due to 1.1.4 runtime not being available #626 Support Visual Basic project files (.vbroj) targeting .NET Core (assignee: @adamsitnik ) #630 Bug: Statistics.DivMean - NullReferenceException (assignee: @AndreyAkinshin ) #631 Bug: Generic benchmark class fails for DisassemblyDiagnoser with \"Sequence contains no matching element\" (assignee: @adamsitnik ) #632 ParamsSource no longer sorted in results (assignee: @AndreyAkinshin ) #634 Extend SummaryOrderPolicy (assignee: @adamsitnik ) #636 Unable to run Runner.exe --method MethodName (assignee: @adamsitnik ) #640 Disassembler fails with generic instance (assignee: @adamsitnik ) #643 BenchmarkDotNet should respect LangVersion project setting (assignee: @adamsitnik ) #644 BenchmarkDotNet.Mathematics.RankHelper again. (assignee: @AndreyAkinshin ) #648 BenchmarkDotNet requires dotnet cli toolchain to be installed (assignee: @adamsitnik ) #651 Support ANY CoreFX and CoreCLR builds (assignee: @adamsitnik ) #652 BenchmarkSwitcher should support generic types with parameterless public ctors (assignee: @adamsitnik ) #653 Proper way to run BenchmarkDotNet on macOS/Linux (assignee: @adamsitnik ) Merged pull requests (9) #624 Upgrade build tools (by @Ky7m ) #625 Fix xunit warnings connected to usage of Assert.Equal() to check for Null (by @Ky7m ) #633 HostEnvironmentInfo: remove LogicalCoreCount (by @morgan-kn ) #637 Mono Support for DisassemblyDiagnoser #541 (by @morgan-kn ) #639 Portability.Cpu tests improvements (by @morgan-kn ) #642 sync DataContracts to CopiedDataContracts (by @morgan-kn ) #645 Fixing --help display for options (by @ENikS ) #646 Allow sorting by the Method name in DefaultOrderProvider and OrderProviderAttribute (by @ENikS ) #666 Plots...Examples...Added A config example in F# (by @ScottHutchinson ) Commits (50) a26e82 Upgrade build tools: (by @Ky7m ) 1643cb Merge pull request #624 from Ky7m/upgrade-build-tools (by @adamsitnik ) abae51 Fix xunit warnings connected to usage of Assert.Equal() to check for null val... (by @Ky7m ) fb68bc support Visual Basic .NET Core projects, fixes #626 (by @adamsitnik ) 067a33 Remove redundant properties in common.props (by @AndreyAkinshin ) 80deb9 BuildNumber fix in common.props (by @AndreyAkinshin ) 87b458 Add CONTRIBUTING.md (by @AndreyAkinshin ) 8bcf42 Add CODE_OF_CONDUCT.md (by @AndreyAkinshin ) d3867d HostEnvironmentInfo: remove LogicalCoreCount (#633) (by @morgan-kn ) 06e66a Specify PLACE_SIMPLE_EMBEDDED_STATEMENT_ON_SAME_LINE in DotSettings (by @AndreyAkinshin ) d8ac43 Mono Support for DisassemblyDiagnoser #541 (by @morgan-kn ) 4356da Merge pull request #637 from morgan-kn/MonoSupportForDisassemblyDiagnoser (by @AndreyAkinshin ) 7572f4 Fix paths to images in docs (by @AndreyAkinshin ) f076df Portability.Cpu tests improvements (by morgan_kn) da6499 Merge pull request #639 from morgan-kn/TestsImprovment (by @AndreyAkinshin ) 5dd1a5 Disassembly Diagnoser: support for generic types, fixes #640 fixes #631 (by @adamsitnik ) 3c0e71 diassembly diangoser: different methods can have same metadata id, add type i... (by @adamsitnik ) 294801 test fix ;) (by @adamsitnik ) 9e66bb sync DataContracts to CopiedDataContracts (by @morgan-kn ) 690f34 Merge pull request #642 from morgan-kn/sync (by @adamsitnik ) e1e3e2 don't use type.Fullname for file names, it's too long for generics (by @adamsitnik ) 43d7c2 we restore before build, so build does need to restore too (it's new default ... (by @adamsitnik ) 9d4c33 trying harder to trick the JIT (#640, #631) (by @adamsitnik ) f8f70f Natural ordering for logical groups, fixes #632 (by @AndreyAkinshin ) a2ec34 copy LanguageVersion to the output .csproj, fixes #643 (by @adamsitnik ) 31e6dd Fixing --help display for options (#645), fixes #636 (by @ENikS ) 45ace9 Allow sorting by the Method name in DefaultOrderProvider and OrderProviderAtt... (by @ENikS ) 8811f2 Fix typo in docs/guide/Contributing/Disassembler.md (by @AndreyAkinshin ) 7da7b9 allow the users to customize Artifacts Path, #377 (by @adamsitnik ) 7554bf validate CustomDotNetCliPath, fixes #648 (by @adamsitnik ) 683964 Support ANY CoreFX and CoreCLR builds, fixes #651 (by @adamsitnik ) 695386 support also only custom CoreFX scenario (default runtime), part of #651 (by @adamsitnik ) eb4dcf allow the users to copy some files after the publish, part of #651 (by @adamsitnik ) b076a3 Add Newtonsoft.Json in the README (by @AndreyAkinshin ) b4eef5 better generics support, fixes #652 (by @adamsitnik ) 77fd46 Handle null values in Statistics.DivMean and Statistics.DivVariance, fixes #630 (by @AndreyAkinshin ) e547f8 Fix NRE in RankColumn, fixes #644 (by @AndreyAkinshin ) 28aa94 allow the users to choose .NET 4.7.1 (by @adamsitnik ) 503570 Fixed image link (by @svick ) 93cc85 Merge pull request #655 from svick/patch-1 (by @adamsitnik ) d33cde Fixed code block formatting (by @svick ) cb7c09 Merge pull request #657 from svick/patch-1 (by @adamsitnik ) 650b4a host Mono process should be able to build .NET Core child process, fixes #653 (by @adamsitnik ) d1dcab List formatting for FAQ (by @svick ) fe52e3 Merge pull request #663 from svick/faq-formatting (by @adamsitnik ) 7792cb Example in F#: with corrected code formatting (by @ScottHutchinson ) e6b225 Merge pull request #666 from ScottHutchinson/patch-2 (by @AndreyAkinshin ) f90207 Allow restore and build command override (#670) (by @Matthew-Bonner ) 4443cd Update example in README (by @AndreyAkinshin ) de0b68 Set library version: 0.10.13 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Eugene Sadovoi ( @ENikS ) Igor Fesenko ( @Ky7m ) Irina Ananyeva ( @morgan-kn ) Matthew Bonner ( @Matthew-Bonner ) Petr Onderka ( @svick ) Scott Hutchinson ( @ScottHutchinson ) Thank you very much! Additional details Date: March 02, 2018 Milestone: v0.10.13 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.13 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.13 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.13 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.13"
  },
  "changelog/v0.10.14.html": {
    "href": "changelog/v0.10.14.html",
    "title": "BenchmarkDotNet v0.10.14 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.14 Per-method parameterization ( Read more ) Console histograms and multimodal disribution detection Many improvements for Mono disassembly support on Windows ( Read more ) Many bugfixes Milestone details In the v0.10.14 scope, 8 issues were resolved and 11 pull requests where merged. This release includes 47 commits by 8 contributors. Resolved issues (8) #256 Per-method parameterization (assignee: @AndreyAkinshin ) #429 Detect multimodal distributions (assignee: @AndreyAkinshin ) #496 Integration with TravisCI (assignee: @jongalloway ) #684 Horology.ClockTests.ChronometerTest fails on Travis CI (macOS) (assignee: @AndreyAkinshin ) #689 DisassemblyDiagnoser for Mono does not work on Windows and Linux (assignee: @morgan-kn ) #691 Cannot run F# benchmarks when benchmark returns F# generic (assignee: @adamsitnik ) #697 Copy custom setting from app.config in multitarget projects (assignee: @adamsitnik ) #706 Support private builds of .NET Runtime (assignee: @adamsitnik ) Merged pull requests (11) #577 Arguments (by @adamsitnik ) #647 Histograms and multimodal distribution detection, fixes #429 (by @AndreyAkinshin ) #674 Cleanup suggested by VS2017 Code Analysis (plus one typo) (by @shoelzer ) #675 Fix IDE0034: 'default' expression can be simplified (by @shoelzer ) #676 Correct NodeTime text which links to NodaTime api (by @MishaHusiuk ) #681 Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) #682 Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) #683 Integration with TravisCI (by @Ky7m ) #694 Fix 689 (by @morgan-kn ) #695 Rename Program to UniqueProgramName to avoid conflicts, fixes #691 (by @adamsitnik ) #696 Build system: Update dotnet SDK and dotnet runtime. Enable FastTests netcoreapp1.1 on non-Windows. (by @Ky7m ) Commits (47) 41aeea Histograms and multimodal distribution detection, fixes #429 (by @AndreyAkinshin ) 960e58 Handle measurements with zero operations (by @AndreyAkinshin ) 19cddd Fix typo in BaselineScaledColumn.cs (by @dfederm ) a99594 Merge pull request #673 from dfederm/dfederm/fix-typo (by @AndreyAkinshin ) 5b3425 Cleanup suggested by VS2017 Code Analysis (plus one typo) (#674) (by @shoelzer ) 16b611 Fix IDE0034: 'default' expression can be simplified (by @shoelzer ) 048b32 Merge pull request #675 from shoelzer/master (by @AndreyAkinshin ) 9d5f71 Correct NodeTime text which links to NodaTime lib (by @MishaHusiuk ) c450c7 Merge pull request #676 from MishaHusiuk/patch-1 (by @adamsitnik ) 9fad52 Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) 3d906f Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) d1a48e Merge pull request #681 from dmitry-ra/master (by @AndreyAkinshin ) 4ccd35 Merge pull request #682 from dmitry-ra/patch-1 (by @AndreyAkinshin ) f743a1 CakeBuild 0.24.0 -> 0.26.1 (by @Ky7m ) c5eb40 Remove postProjects from solution file. (by @Ky7m ) e60387 Pass correct configuration to test settings (by @Ky7m ) 224ab8 Disable public sign option for F# project (by @Ky7m ) ee98f3 Limit Max CPU count for msbuild workers (by @Ky7m ) 17031d Fix readme file (by @Ky7m ) 6fbae8 One more update to readme file (by @Ky7m ) cb90f2 disable Travis failing test #684 to unblock #683 (by @adamsitnik ) 782ca7 Merge pull request #683 from Ky7m/Integration-with-TravisCI (by @adamsitnik ) eebf92 Merge branch 'master' into multimodal (by @adamsitnik ) 10511b Merge pull request #647 from dotnet/multimodal (by @adamsitnik ) 57bc17 Fix bug in ClockTests.ChronometerTest, fixes #684 (by @AndreyAkinshin ) 7c4b14 Arguments (#577), fixes #256 (by @adamsitnik ) 40771c Update dotnet SDK (2.1.4 -> 2.1.101) and dotnet runtime (1.1.6 -> 1.1.7). (by @Ky7m ) 88a9db Merge pull request #696 from Ky7m/build-runtime-update (by @adamsitnik ) 4ac6ad we need different name than typical \"Program\" to avoid problems with referenc... (by @adamsitnik ) 1178d6 Update build badges (by @AndreyAkinshin ) 24ed1f ProcessHelper: handle null Data values in OutputDataReceived, fix #689 (by @morgan-kn ) 7a3d2b MonoDisassembler improvements (by @morgan-kn ) f1a0f5 Merge pull request #694 from morgan-kn/Fix689 (by @AndreyAkinshin ) 428905 .NET Core apps are .dlls (not .exes), fixes #697 (by @adamsitnik ) befbc8 Add FAQ notes about #692 (by @AndreyAkinshin ) b4504b Support private builds of .NET Runtime, fixes #706 (by @adamsitnik ) c93e1e Introduce separate logic for Windows10 brand strings (by @AndreyAkinshin ) 685766 Shortify Windows 10 brand strings in the summary (by @AndreyAkinshin ) 9bdd0c Shortify cpu info in summary (by @AndreyAkinshin ) 2288ad Prettify macOS brand string (by @AndreyAkinshin ) 8a0b48 Handle tailed nop instructions in mono disasm output (by @AndreyAkinshin ) d80834 Advanced DryJob attributes (by @AndreyAkinshin ) 9a37ad Handle invalid mono disasm outputs (by @AndreyAkinshin ) 21d6d7 Add IntroDisasm (by @AndreyAkinshin ) 5e37b5 Add \"Disassembly Diagnoser for Mono on Windows\" in docs (by @AndreyAkinshin ) c2c4e8 set COMPLUS_Version env var for private Clr builds even if no env vars were d... (by @adamsitnik ) 88b088 Set library version: 0.10.14 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) David Federman ( @dfederm ) Dmitry Razumikhin ( @dmitry-ra ) Igor Fesenko ( @Ky7m ) Irina Ananyeva ( @morgan-kn ) MishaHusiuk ( @MishaHusiuk ) Steve Hoelzer ( @shoelzer ) Thank you very much! Additional details Date: April 09, 2018 Milestone: v0.10.14 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.14 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.14 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.14 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.14"
  },
  "changelog/v0.10.2.html": {
    "href": "changelog/v0.10.2.html",
    "title": "BenchmarkDotNet v0.10.2 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.2 Closed #307 : culture invariant statistics output Closed #321 : persist optimized, auto-generated dll compiled from url/plain code Closed #322 : always restore the console foreground color Closed #337 : Better detection of Rscript.exe in RPlotExporter Closed #345 : fix bug in WelchTTestPValueColumn for DryJob VS 2017 compatibility fix fix bold markup for Atlassian exporter Improved precision of nanobenchmarks Minor infrastructure changes and misc fixes Milestone details In the v0.10.2 scope, 10 issues were resolved and 3 pull requests where merged. This release includes 30 commits by 7 contributors. Resolved issues (10) #295 Fix CLS-compliant warnings in Diagnostics (assignee: @adamsitnik ) #307 Output: interpolated strings & culture (assignee: @alinasmirnova ) #319 [Request] some API to public? (assignee: @adamsitnik ) #321 BenchmarkRunner.RunUrl throws BenchmarkSystem.IO.FileNotFoundException (assignee: @adamsitnik ) #327 Unable to use ClassicToolchain in explicit way (assignee: @adamsitnik ) #332 default color of terminal is changed after the run is completed (assignee: @adamsitnik ) #335 Support benchmarking startup performance (assignee: @AndreyAkinshin ) #337 Problematic mechanism/docs for locating Rscript.exe #340 [FeatureRequest] Enable Characteristic-based properties for non-job types. (assignee: @ig-sinicyn ) #345 Fail to run IntroAdvancedStats in dry mode (assignee: @AndreyAkinshin ) Merged pull requests (3) #338 Fix typo (by @roji ) #339 Better detection of Rscript in RPlotExporter (by @roji ) #341 Base types for characteristic objects: (by @ig-sinicyn ) Commits (30) e7c398 Fixes parentheses error (by Josef Ottosson) 2655b3 Merge pull request #318 from joseftw/patch-1 (by @adamsitnik ) 4115a2 make GcStats and Net46Toolchain internal members public, fixes #319 (by @adamsitnik ) 52f953 ignore the CLS compilant errors for Diagnosers package, fixes #295 (by @adamsitnik ) d96b68 Improved Consumer (by @AndreyAkinshin ) 943c49 CLSCompliant fixes in Consumer (by @AndreyAkinshin ) f4bdae specify the .NET Core sdk version in explicit way to get the solution working... (by @adamsitnik ) df8c55 always restore the console foreground color, fixes #332 (by @adamsitnik ) 24dea4 fix bold markup for Atlassian exporter (by @lahma ) 4d3c75 persist optimized, auto-generated dll compiled from url/plain code, fixes #321 (by @adamsitnik ) 2e92a2 allow to set Classic/Roslyn tool chain in explicit way, fixes #327 (by @adamsitnik ) aabece Merge pull request #329 from lahma/features/atlassian-bold-format (by @adamsitnik ) 91152c ExportToFiles now accepts console logger (by @roji ) 299375 Base types for characteristic objects: (by @ig-sinicyn ) afc65d Better detection of Rscript.exe in RPlotExporter (by @roji ) 15869b Merge pull request #339 from roji/rscript-detect (by @AndreyAkinshin ) 9f6a82 Merge pull request #341 from ig-sinicyn/feature-characteristic-object (by @AndreyAkinshin ) 432adf Fix typo (by @roji ) cfa015 Merge pull request #338 from roji/dependencies-typo (by @AndreyAkinshin ) 4d953f Temporary rollback of the link to appveyor (by @AndreyAkinshin ) 1f5a6e Update year in docs footer (by @AndreyAkinshin ) 183ab6 Fix warning in RoslynToolchain (by @AndreyAkinshin ) 6fd9f3 Used ToStr to make statistics builder culture invariant (fixed #307) (by @alinasmirnova ) 3a3100 Merge pull request #346 from alinasmirnova/master (by @AndreyAkinshin ) 7ee2f1 Fix in WelchTTestPValueColumn for DryJob, fixes #345 (by @AndreyAkinshin ) 795f4a Disable jitting for RunStrategy=ColdStart, fixes #335 (by @AndreyAkinshin ) 5b5a8c Fixed typo (by @lukasz-pyrzyk ) 54519c Merge pull request #347 from lukasz-pyrzyk/master (by @adamsitnik ) fbac75 Introduced Dummy actions (by @AndreyAkinshin ) 484f53 Set library version: 0.10.2 (by @AndreyAkinshin ) Contributors (7) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) ig-sinicyn ( @ig-sinicyn ) Łukasz Pyrzyk ( @lukasz-pyrzyk ) Marko Lahma ( @lahma ) Shay Rojansky ( @roji ) Thank you very much! Additional details Date: January 21, 2017 Milestone: v0.10.2 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.2 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.2 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.2 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.2"
  },
  "changelog/v0.10.3.html": {
    "href": "changelog/v0.10.3.html",
    "title": "BenchmarkDotNet v0.10.3 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.3 New .csprojs support for .NET Core. Also for F# ( #366 )! New plots and RPlotExporter (density plots for each job; cumulative mean plots) Fixed exporter order (now RPlotExporer uses the actual measurements instead of previous version) Xplat improvments in RuntimeInformation Introduced RunStrategy.Monitoring Possibility to set custom path for Mono ( #306 ) Possibility to set any .NET Core version >= 1.1 ( #336 ) MemoryDiagnoser is now disabled by default (Breaking changes!!) ( #369 ) Milestone details In the v0.10.3 scope, 10 issues were resolved and 2 pull requests where merged. This release includes 79 commits by 3 contributors. Resolved issues (10) #300 Switch back from project.json and xproj to csproj, support dotnet cli preview 3 (assignee: @adamsitnik ) #306 Custom path for mono (assignee: @adamsitnik ) #320 Results table should be a GitHub Flavored Markdown table (assignee: @alinasmirnova ) #322 First benchmark always fails when running on .NET Core with -c release (assignee: @adamsitnik ) #336 allow the users to choose the target .NET Core version (1.2, 2.0 etc) (assignee: @adamsitnik ) #366 Support the new .fsprojs targetting .NET Core (F# + .NET Core + MSBuild) (assignee: @adamsitnik ) #369 Consider to disable MemoryDiagnoser by default (assignee: @adamsitnik ) #372 Troubles with ClrJob from CoreCLR project (assignee: @adamsitnik ) #374 BenchmarkDotNet doesn't understand netcoreapp2.0 (assignee: @adamsitnik ) #375 Troubles with dotnet pack (assignee: @adamsitnik ) Merged pull requests (2) #355 Fixed typo in IntroBasic.cs (by @mmayr-at ) #357 Farewell project json (by @adamsitnik ) Commits (79) 8099a5 Print process.StartInfo in Executor (by @AndreyAkinshin ) abd931 Update BenchmarkDotNet.sln.DotSettings (by @AndreyAkinshin ) 5c8c75 toolchains should not require parameterless ctors, the real fix for #327 (by @adamsitnik ) b22cf2 allow the users to choose the target .NET Core version, fixes #336 (by @adamsitnik ) f99c82 .net core toolchain: root folder detection bug fix (by @adamsitnik ) c7aba1 experimental .NET Core support for the new VS 2017 csproj files, #300 (by @adamsitnik ) bca146 Additional density plots in RPlotExporter (by @AndreyAkinshin ) 4bb147 Additional cummean plots in RPlotExporter (by @AndreyAkinshin ) 8bf40c Implement top sort in CompositeExporter (by @AndreyAkinshin ) ad771d Always print the AllocationColumn in the Summary table (if MemoryDiagnoser is... (by @AndreyAkinshin ) 8a1f0e Fix order of exporters in ExporterDependencyTests (by @AndreyAkinshin ) a7366e xproj to csproj auto migration (by @adamsitnik ) cec3e2 xproj to csproj: manual changes (conditional recursive dependencies not suppo... (by @adamsitnik ) 74006d xproj to csproj: I did not ask for the .NET Standard dependency (by @adamsitnik ) bf7093 xproj to csproj: manual changes (conditional dependencies not supported anymo... (by @adamsitnik ) 4e060f xproj to csproj: manual changes (simple case not supported) (by @adamsitnik ) 59602c remove F# .NET Core samples (not working now) (by @adamsitnik ) 2488ae cleanup (by @adamsitnik ) d7925b get our toolchain up and running, thanks to @cesarbs (by @adamsitnik ) e719e7 Update IntroBasic.cs (by @mmayr-at ) 1ef000 Merge pull request #355 from mmayr-at/patch-1 (by @AndreyAkinshin ) 5cf1dc making diagnosers, ctrl+c, custom priority and affinity work for the new csprojs (by @adamsitnik ) d0f334 getting net46 toolchain work again for new .csprojs when called from .NET Cor... (by @adamsitnik ) d1bf9b removing old project.json workarounds (by @adamsitnik ) e0b134 taking advantage of the csproj (by @adamsitnik ) 001b3f appveyor stuff (by @adamsitnik ) 63d674 don't introduce limit for .sln file search depth (by @adamsitnik ) 81adbb make VS stop complaining about root namespace for BenchmarkDotNet.Core project (by @adamsitnik ) 2eee5f let's round it to reduce the side effects of Allocation quantum (by @adamsitnik ) f38e93 a project that targets AnyCPU cany be referenced by any other executable (32 ... (by @adamsitnik ) 8ed5a4 post code review changes (by @adamsitnik ) 50c938 add possibility to use RetainVMGarbageCollection config switch (by @adamsitnik ) ca1bc8 final Cleanup and some renaming ;) (by @adamsitnik ) a26d61 Update BenchmarkDotNet.sln.DotSettings (by @AndreyAkinshin ) 008819 getting all the test runnable again (by @adamsitnik ) a66913 trying to get the versioning done right (by @adamsitnik ) c6f245 the updated docs (by @adamsitnik ) f1a1fd update to the latest xUnit 2.2 + minor cleanup (by @adamsitnik ) 262c87 appveyor config + minor bug fixes (by @adamsitnik ) 1a7bd4 Support the new .fsprojs targetting .NET Core (F# + .NET Core + MSBuild), fix... (by @adamsitnik ) e8f6ac support projects without .sln file (dotnet cli only) (by @adamsitnik ) 1b71c5 update our tests to net452 because XUnit VS runner 2.2 does no longer support... (by @adamsitnik ) 6121ad disable shadow copy for our integration tests (by @adamsitnik ) 54375c warn the users when code optimization was not enabled (debug build can be opt... (by @adamsitnik ) 03ed32 stop using --binaries option which started producing new folder for every re... (by @adamsitnik ) 27f280 dotnet cli like to not release used files for a while.. (by @adamsitnik ) 7886ad Merge pull request #357 from dotnet/farewellProjectJson (by @AndreyAkinshin ) 751f64 Xplat RuntimeInformation.GetProcessorName() (by @AndreyAkinshin ) b327b7 tell why dotnet command failed + how much time it took to execute (by @adamsitnik ) b740bb WindowsVersion on CoreCLR (by @AndreyAkinshin ) 5b879b Lazty HostEnvironmentInfo.OsVersion (by @AndreyAkinshin ) 76d081 Lazy HostEnvironmentInfo.OsVersion, fix in ToFormattedString() (by @AndreyAkinshin ) 5dafb9 do not restore or build the dependent projects, just the auto-generated one (by @adamsitnik ) 5c1914 better troubleshooting: when dll is not found but somehow build has succeeded... (by @adamsitnik ) 322998 using csproj to tell msbuild where to put output so appveyor custom settings ... (by @adamsitnik ) e2a8fa post code review changes (by @adamsitnik ) 6fe93d MinIterationTimeAnalyser (by @AndreyAkinshin ) 3ac892 RunStrategy.Monitoring (by @AndreyAkinshin ) f412b9 Docs: add FAQ section about supported version of Visual Studio (by @AndreyAkinshin ) 67a007 fixing ProjectJsonToolchains after recent CsProjToolchain optimizations (by @adamsitnik ) 2b5c6e Improved RuntimeInformation.GetProcessorName() (by @AndreyAkinshin ) a44638 Improved RuntimeInformation.GetOsVersion() (by @AndreyAkinshin ) f58e06 Improved RuntimeInformation.GetRuntimeVersion() for Mono (by @AndreyAkinshin ) fdca26 Minor RuntimeInformation fixes (by @AndreyAkinshin ) 2a2168 Fix bug in ExternalToolsHelper (by @AndreyAkinshin ) 9dfd95 Custom path for mono, fixes #306 (by @adamsitnik ) 448b07 disable MemoryDiagnoser by default, BREAKING CHANGE, fixes #369 (by @adamsitnik ) 125b71 docs for Custom Mono Paths, #306 (by @adamsitnik ) a3d6e0 docs/FAQ: Add section about new .NET Core Console App in VS2017 (by @AndreyAkinshin ) b04195 give users the AnyCpu hint when they struggle with BadImageFormatException, f... (by @adamsitnik ) 7de671 generate the projects in the bin folder, not solution's root (by @adamsitnik ) 1d52ae docs/FAQ: add another question (by @AndreyAkinshin ) 06aaa0 copy NetCoreAppImplicitPackageVersion and RuntimeFrameworkVersion settings to... (by @adamsitnik ) f1fe16 shame on me for not building the code for all TFMs before pushing (by @adamsitnik ) fe33dd GitHub Markdown: every table row should start with \"|\" , fixes #320 (by @adamsitnik ) 7d0d73 remove old results, otherwise, the file will be overwritten and remaining old... (by @adamsitnik ) 80348b Change Hint color to DarkCyan #376 (by @AndreyAkinshin ) 0b35ec Increase MinIterationTime (Accuracy improvement) (by @AndreyAkinshin ) cdee09 Set library version: 0.10.3 (by @AndreyAkinshin ) Contributors (3) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Michael Mayr ( @mmayr-at ) Thank you very much! Additional details Date: March 01, 2017 Milestone: v0.10.3 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.3 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.3 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.3 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.3"
  },
  "changelog/v0.10.4.html": {
    "href": "changelog/v0.10.4.html",
    "title": "BenchmarkDotNet v0.10.4 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.4 New logo Update to Roslyn 2.0, drop .NET 4.5 support ( #303 ) Initial support of HardwareCounters (Windows only) Initial experimental support of in-process benchmarks Optional configs for BenchmarkSwitcher ( #391 , #392 ) Host API interface ( #356 ) Improved measurements for async benchmarks ( #415 ) Improved precision level (MinIterationTimes is 500ms instead of 200ms; introduced AccuracyMode.MaxAbsoluteError and AccuracyMode.MaxRelativeError instead of AccuracyMode.MaxStdErrRelative ; logic which select amount of iterations uses confidence intervals instead of standard errors; the Error column (half of CI99.9%) is shown by default instead of StdErr) Introduced ISummaryStyle , raw data in CSV reports ( #118 , #146 , #396 ) Handle cases when report files are existed and locked ( #414 , #416 ) MarkdownExporter right-justifies numeric columns ( #421 ) Better colors for console output ( #376 ) Column legends Add information about CPU microarchitecture for well-known processors to summary Fix AssemblyInformationalVersionAttribute ( #382 ) Fix incorrect method filtering in BenchmarkSwitcher ( #365 ) Fix OS Version in Summary for Windows 10 ( #351 ) Fix OS Version on Mono Fix --class and --method filtering ( #249 ) Fix --exporters option ( #189 ) Fix escaping logic in CsvExporter ( #294 , #409 ) Fix MacOS detection Minor bugfixes and API improvements Milestone details In the v0.10.4 scope, 23 issues were resolved and 14 pull requests where merged. This release includes 103 commits by 8 contributors. Resolved issues (23) #118 Raw data in CSV reports (assignee: @AmadeusW ) #146 Ability to specify units / easier comparison (assignee: @AmadeusW ) #159 Warn user if no Columns were defined (assignee: @adamsitnik ) #189 --exporters option appears not to be working (assignee: @adamsitnik ) #249 --class and --method should combine as \"AND\" filtering (assignee: @adamsitnik ) #294 [Suggestion] CSVHelper.Escape() method should check for actual separator value (assignee: @alinasmirnova ) #303 Update to Roslyn 2.0 when RTM is shipped to nuget.org (assignee: @adamsitnik ) #351 Fix OS Version in Summary for Windows 10 (assignee: @adamsitnik ) #352 Troubles with CoreJob on Linux (assignee: @adamsitnik ) #365 [Minor bug] Benchmark switcher: incorrect method filtering (assignee: @adamsitnik ) #376 Pick better background colors for output (assignee: @AndreyAkinshin ) #382 AssemblyInformationalVersion doesn't work (assignee: @AndreyAkinshin ) #388 Precise Machine Counter Diagnoser (assignee: @adamsitnik ) #391 BenchmarkSwitcher should take an optinal IConfig #393 Troubles with ClrJob in .NET Core applications (assignee: @adamsitnik ) #395 Could not load file or assembly 'System.Reflection.Metadata' (assignee: @adamsitnik ) #401 Exceptions in Roslyn.Builder (assignee: @adamsitnik ) #406 BenchmarkDotNet with netcoreapp2.0 requires using RuntimeFrameworkVersion directly in the project file (assignee: @adamsitnik ) #410 Troubles with Classic applications on nightly BenchmarkDotNet (assignee: @adamsitnik ) #412 HardwareCounter.InstructionRetired failing with ArgumentNullException. Build 82 (assignee: @adamsitnik ) #415 Allocations for async methods measures BenchmarkDotNet (assignee: @adamsitnik ) #419 Suspicious warnings about MemoryMappedFiles (assignee: @adamsitnik ) #424 Make InliningDiagnoser filtering more flexible (assignee: @adamsitnik ) Merged pull requests (14) #356 Feature: host API interface (by @ig-sinicyn ) #379 Feature: in-process benchmarks (by @ig-sinicyn ) #392 Add an optional config to BenchmarkSwitcher. (by @ILMTitan ) #396 Allow users to pick, show and hide measurement units in the reports and exports. (by @AmadeusW ) #400 fix spelling error: misspredict => mispredict (by @stevedesmond-ca ) #405 Make RoslynToolchain types public (by @cdmihai ) #407 Propagate benchmark to hooks (by @cdmihai ) #408 Small fixes before approval tests (by @alinasmirnova ) #409 CSVHelper.Escape() method should check for actual separator value (by @alinasmirnova ) #416 Exports file to temporary location if target is locked (by @AmadeusW ) #421 MarkdownExporter right-justifies numeric columns (by @stevedesmond-ca ) #423 Updated Microsoft.Net.Test.Sdk (by @alinasmirnova ) #430 Fix unix OS detection. (by @mfilippov ) #432 Fix macOS detection (by @mfilippov ) Commits (103) bd790c Simplify BenchmarkDotNet.IntegrationTests.Classic.ReferencesTests (by @AndreyAkinshin ) bf9f4e Feature: host API interface (by @ig-sinicyn ) f85ffe Merge pull request #356 from ig-sinicyn/feature-host-api (by @AndreyAkinshin ) 8ffff0 Feature: in-process benchmarks (by @ig-sinicyn ) 51fc0c Feature: in-process benchmarks, FixAffinity() helper (by @ig-sinicyn ) c5179f Feature: in-process benchmarks, review fixes (by @ig-sinicyn ) 6c5990 Feature: in-process benchmarks, review fixes, part 2 (by @ig-sinicyn ) c6b046 Feature: in-process benchmarks, STA & priority on full .Net FW (by @ig-sinicyn ) cc2c89 Feature: in-process benchmarks, env validation in toolchain, intro example ad... (by @ig-sinicyn ) 101a80 Improved versioning system (by @AndreyAkinshin ) 846532 Update links to appveyor (by @AndreyAkinshin ) 5464e4 Improved versioning system, part 2 (by @AndreyAkinshin ) e39a50 Merge pull request #379 from ig-sinicyn/feature-inprocess (by @adamsitnik ) ae4cc8 AssemblyInformationalVersion fix in common.props, resolves #382 (by @AndreyAkinshin ) d036f9 Precise Machine Counter Diagnoser #388 (by @adamsitnik ) 390442 Improved invocationCount behavior in SimpleJobAttribute (by @AndreyAkinshin ) 7b61ed add possibility to set Hardware Counters per class in runtime-independent way... (by @adamsitnik ) 6e208c Add an optional config to BenchmarkSwitcher. (by ILMTitan) 935d23 Merge pull request #392 from ILMTitan/master (by @adamsitnik ) 6b9a88 update to Roslyn 2.0, drop .NET 4.5 support, fixes #303 (by @adamsitnik ) ea4c55 BenchmarkDotNet.IntegrationTests.csproj: fix formatting (by @AndreyAkinshin ) 20a537 Update year in LICENSE.md (by @AndreyAkinshin ) 878796 Update logo (by @AndreyAkinshin ) faba77 Update README.md (by @AndreyAkinshin ) 6dce74 Update logo in README.md (by @AndreyAkinshin ) 7a750f Another fix in README.md (by @AndreyAkinshin ) 1caa0d fix spelling error: misspredict => mispredict (by @stevedesmond-ca ) 742912 use Array.Empty and Task.Completed (after upgrading to .NET 4.6) (by @adamsitnik ) 0dafac there is no need to set up with latest VS, fixes #393 (by @adamsitnik ) f5d88e Catch exceptions in BenchmarkDotNet.Running.BenchmarkRunnerCore.Run (by @AndreyAkinshin ) fa176f Merge pull request #400 from stevedesmond-ca/missspelling (by @AndreyAkinshin ) 90c3b1 Docs improvements (by @AndreyAkinshin ) 84c524 Mark SimpleJobAttribute with AllowMultiple (by @AndreyAkinshin ) 531804 Update README.md (by @AndreyAkinshin ) 7f2221 Make RoslynToolchain types public (#405) (by @cdmihai ) be8c33 Improved confidence intervals (by @AndreyAkinshin ) 767811 Propagate benchmark to hooks (#407) (by @cdmihai ) ec5e54 All exporters should not use static environment info (by @alinasmirnova ) 2b8a9e Culculate csv separator when it is needed, not in constructor (by @alinasmirnova ) 95aeb5 clean up (by @alinasmirnova ) 2e74c2 Name field for all exporters (by @alinasmirnova ) badb0b Merge pull request #408 from alinasmirnova/small-fixes (by @AndreyAkinshin ) 9da9ca search for .NET Core 2.0 settings in imported props files, fixes #406 (by @adamsitnik ) 2b08c5 filter sealed, generic and abstract classes from BenchmarkSwitcher, fixes #365 (by @adamsitnik ) 14ad55 print correct OS version in summary, fixes #351 (by @adamsitnik ) b86f48 BenchmarkDotNet does not support running .NET Core benchmarks when host proce... (by @adamsitnik ) 11b51b refactoring in TypeParser (by @adamsitnik ) 8047a7 use AND when filtering with args from command line, fixes #249 (by @adamsitnik ) 3cf8d8 handle cmd line arguments without '=', fixes #189 (by @adamsitnik ) cdc71f test fix after recent changes, #249 (by @adamsitnik ) 97c211 detect situation when users want to use Hardware Counters with InProcessToolc... (by @adamsitnik ) ba972b Warn user if no Columns were defined, fixes #159 (by @adamsitnik ) 2520f2 migrate old csprojs to the new format to get the tests running in common way,... (by @adamsitnik ) dd1b4d Improvements in StatisticsTests (by @AndreyAkinshin ) 07d149 emptyEnumerable.All(whatever) returns true (by @adamsitnik ) 0d61a7 improve dynamic diagnoser loading (case when diagnosers NuGet pacakge is inst... (by @adamsitnik ) 5a6937 Ignore BenchmarkProject.json in BenchmarkDotNet.sln.DotSettings (by @AndreyAkinshin ) 5895c4 Improvements in TypeParserTests (by @AndreyAkinshin ) 1124ae BenchmarkDotNet.Tests: cleanup (by @AndreyAkinshin ) d37ef4 CSVHelper.Escape() method should check for actual separator value (by @alinasmirnova ) 43643c move hardwareCounters from Job to Config, fixes #412 (by @adamsitnik ) 303fff pass config from runner => executor => diagnoser #412 (by @adamsitnik ) 5b432e Addded approval tests for exporters (by @alinasmirnova ) ac6507 Added more info in mock summary (by @alinasmirnova ) a59b17 MockEnvironmentInfo for approval tests (by @alinasmirnova ) 610f3b Awaiting Tasks should not interfere allocation results, fixes #415 (by @adamsitnik ) cf16f6 I forgot about aligning, #415 (by @adamsitnik ) 2860d2 help the .NET framework to resolve assemblies when binding redirects are miss... (by @adamsitnik ) e7ad36 don't log false alarms, fixes #419 (by @adamsitnik ) 803081 Allow users to pick, show and hide measurement units in the reports and expor... (by @AmadeusW ) fa3128 Exports file to temporary location if target is locked (#416) (by @AmadeusW ) c923ba MarkdownExporter right-justifies numeric columns (#421) (by @stevedesmond-ca ) aa290d Add column legends (by @AndreyAkinshin ) 8d8db5 Handle case when there are no columns with legends (by @AndreyAkinshin ) dc201c Add empty line before legends (by @AndreyAkinshin ) ff7fc9 Approved files (by @alinasmirnova ) 3f6372 Updated Microsoft.Net.Test.Sdk (by @alinasmirnova ) 7d23d1 Merge remote-tracking branch 'upstream/master' (by @alinasmirnova ) 57cbbb Merge branch 'new-test-sdk-version' (by @alinasmirnova ) c0c563 Updated Microsoft.Net.Test.Sdk (by @alinasmirnova ) 539834 Updated spproved files according last changes in md exporter (by @alinasmirnova ) f117f0 Added *.received and *.orig in .gitignore (by @alinasmirnova ) 0d7e72 Make InliningDiagnoser filtering more flexible, fixes #424 (by @adamsitnik ) d25eb0 allow to set InProcessToolchain via attribute /cc @ig-sinicyn (by @adamsitnik ) 8cf041 Mock strings in mock environment info (by @alinasmirnova ) 0db804 Changed file naming in approval files (by @alinasmirnova ) 29aeaf correct Idle implementation for Task-returning benchmarks, fixes #418 (by @adamsitnik ) c81aa5 the missing docs for Hardware Counters, fixes #388 (by @adamsitnik ) 6076e2 Improved precision (by @AndreyAkinshin ) 72b3a6 Show \"NA\" for statistic columns with double.NaN values (by @AndreyAkinshin ) ea2222 Processor brand string prettifying (by @AndreyAkinshin ) 678d43 Added approval files info links to docs (by @alinasmirnova ) 33911c Merge remote-tracking branch 'upstream/master' (by @alinasmirnova ) d4c928 Fixed approval tests according to recent changes in master (by @alinasmirnova ) eb9f4f Fix typos in docs (by @AndreyAkinshin ) 271b27 Merge pull request #348 from alinasmirnova/master (by @AndreyAkinshin ) 152f3e Parsing Gulftown processor brand strings (by @AndreyAkinshin ) 74d793 Minor improvements in docs (by @AndreyAkinshin ) 764bd3 Minor improvements in docs, part 2 (by @AndreyAkinshin ) 0a251b Fix unix OS detection. (by @mfilippov ) 5c3b39 Fix typo in PlatformID (by @mfilippov ) 7f3d06 Always use PlatformAbstractions in RuntimeInformation.GetOsVersion() (by @AndreyAkinshin ) 46d34f Set library version: 0.10.4 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Amadeusz Wieczorek ( @AmadeusW ) Andrey Akinshin ( @AndreyAkinshin ) ig-sinicyn ( @ig-sinicyn ) Mihai Codoban ( @cdmihai ) Mikhail Filippov ( @mfilippov ) Steve Desmond ( @stevedesmond-ca ) Thank you very much! Additional details Date: April 21, 2017 Milestone: v0.10.4 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.4 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.4 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.4 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.4"
  },
  "changelog/v0.10.5.html": {
    "href": "changelog/v0.10.5.html",
    "title": "BenchmarkDotNet v0.10.5 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.5 Fixed SizeUnit presentation in the summary table ( #434 ) In MemoryDiagnoser, now 1kB = 1024B (instead of 1000 in v0.10.4) ( #434 ) Fix false allocations detection ( #436 9b44de70 ) Hide ScaledSD column for small values ( da857ad7 ) Autoselecting amount of digits after the decimal point ( #404 ) Milestone details In the v0.10.5 scope, 3 issues were resolved and 2 pull requests where merged. This release includes 16 commits by 4 contributors. Resolved issues (3) #404 Autoselecting amount of digits after the decimal point (assignee: @AndreyAkinshin ) #428 Cleanup NuGet.Config (assignee: @adamsitnik ) #434 Allocation output suddenly is 0 GB (assignee: @AndreyAkinshin ) Merged pull requests (2) #435 Joined approved files according to cultures (by @alinasmirnova ) #436 Fix false allocations detection (by @ig-sinicyn ) Commits (16) d9eefd NuGet feeds cleanup, fixes #428 (by @adamsitnik ) 2a95b0 Fix SizeUnit presentation, fixes #434 (by @AndreyAkinshin ) 8eca28 Add a note about kilobytes in docs (by @AndreyAkinshin ) ae483e Separate approved files only for cultures, not for exporters (by @alinasmirnova ) 78a6a0 Improved legend for MemoryDiagnoser (by @AndreyAkinshin ) 47ae20 SizeUnitTests (by @AndreyAkinshin ) 9b44de fix false allocations detection (by @ig-sinicyn ) ffd535 Merge pull request #436 from ig-sinicyn/fix_allocations_on_run (by @adamsitnik ) 87c2bd Inclusive ConfidenceInterval.Contains (by @AndreyAkinshin ) da857a Don't show the ScaledSD column if values are small (by @AndreyAkinshin ) e0cf24 Add DefaultColumnProvidersTests (by @AndreyAkinshin ) f2baa3 Fix typo in DefaultColumnProvidersTests (by @AndreyAkinshin ) 117560 Fix BaselineScaledColumnTest.ColumnsWithBaselineGetsScaled (by @AndreyAkinshin ) 3a1fb7 Implement BestAmountOfDecimalDigits for statistics columns in SummaryTable, f... (by @AndreyAkinshin ) 4201ee Fix ToolchainTest.CustomToolchainsAreSupported (by @AndreyAkinshin ) cba245 Set library version: 0.10.5 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) ig-sinicyn ( @ig-sinicyn ) Thank you very much! Additional details Date: April 26, 2017 Milestone: v0.10.5 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.5 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.5 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.5 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.5"
  },
  "changelog/v0.7.3.html": {
    "href": "changelog/v0.7.3.html",
    "title": "BenchmarkDotNet v0.7.3 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.3 Milestone details In the v0.7.3 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 1 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (1) 42e13b v0.7.3: Small bug fixes (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much!"
  },
  "changelog/v0.7.4.html": {
    "href": "changelog/v0.7.4.html",
    "title": "BenchmarkDotNet v0.7.4 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.4 Milestone details In the v0.7.4 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 2 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (2) c5e924 Update README (by @AndreyAkinshin ) 641c95 v0.7.4: New benchmark Invoker, new samples, refactoring, minor fixes (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much!"
  },
  "changelog/v0.7.5.html": {
    "href": "changelog/v0.7.5.html",
    "title": "BenchmarkDotNet v0.7.5 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.5 Milestone details In the v0.7.5 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 4 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (4) 957a01 Update samples (by @AndreyAkinshin ) 118e2f Add the Cpu_Ilp_RyuJit sample (by @AndreyAkinshin ) b7e564 Update copyrights (by @AndreyAkinshin ) b6cce3 v0.7.5: Improved project building (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much!"
  },
  "changelog/v0.7.6.html": {
    "href": "changelog/v0.7.6.html",
    "title": "BenchmarkDotNet v0.7.6 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.6 Milestone details In the v0.7.6 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 9 commits by 5 contributors. Resolved issues (0) Merged pull requests (0) Commits (9) 8e9942 Update README.md (by @NN--- ) 51ef26 Merge pull request #11 from NN---/patch-2 (by @AndreyAkinshin ) db8791 Fixed link to samples. (by @redknightlois ) 14ddf4 Merge pull request #12 from redknightlois/patch-1 (by @mattwarren ) d70b4c Accessibility and genericness checks added for benchmark methods. (by @krk ) 04ce12 Benchmark methods defined in nested classes are supported. (by @krk ) a5caba Improvements in log parser (by @AndreyAkinshin ) d750b9 Merge pull request #13 from krk/master (by @AndreyAkinshin ) eab4bd Set library version: 0.7.6 (by @AndreyAkinshin ) Contributors (5) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) Kerem ( @krk ) Matt Warren ( @mattwarren ) NN ( @NN--- ) Thank you very much!"
  },
  "changelog/v0.7.7.html": {
    "href": "changelog/v0.7.7.html",
    "title": "BenchmarkDotNet v0.7.7 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.7 Milestone details In the v0.7.7 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 14 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (14) c94525 Add Cpu_BranchPerdictor (by @AndreyAkinshin ) 44cbb0 Add Algo_Md5VsSha256 (by @AndreyAkinshin ) 4d789c Most significant bit and bool to int conversions. (by @redknightlois ) 09446b Updated to avoid using an array. (by @redknightlois ) b16153 Fixed a bug where converting a bool to int instead to byte (which is the nati... (by @redknightlois ) 52acca Merge pull request #15 from redknightlois/master (by @AndreyAkinshin ) 66cce4 Fix troubles with inlining (by @AndreyAkinshin ) a8e641 Fixes in Jit_BoolToInt (by @AndreyAkinshin ) cfbb88 Rename task parameters: Current -> Host (by @AndreyAkinshin ) 209b4f Rename Task to BenchmarkTask, fix #9 (by @AndreyAkinshin ) 74be9d Fix typos (by @AndreyAkinshin ) adc6c2 Fix Intro_01_MethodTasks (by @AndreyAkinshin ) 438042 Add BenchmarkRunner.RunUrl (by @AndreyAkinshin ) 72d606 Set library version: 0.7.7 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) Thank you very much!"
  },
  "changelog/v0.7.8.html": {
    "href": "changelog/v0.7.8.html",
    "title": "BenchmarkDotNet v0.7.8 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.8 Milestone details In the v0.7.8 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 36 commits by 5 contributors. Resolved issues (0) Merged pull requests (0) Commits (36) 6ede76 Reporting: better number formats for ops/sec. (by @ppanyukov ) 118bc9 Merge pull request #17 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) 994cbc Markdown friendly reporting (by @AndreyAkinshin ) 91bbb4 Reporting: use fixed precision for AvrTime and StdDev. (by @ppanyukov ) e9b8fe Merge pull request #18 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) 121c3d Reporting: uniform time units across all benchmarks. (by @ppanyukov ) 1cb520 Merge pull request #21 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) a4f53e Reporting: refactor use of BenchmarkTimeSpan. (by @ppanyukov ) 7fbf63 Merge pull request #24 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) c8c893 message for Obsolete warning which tells what to use now + updated README (by @adamsitnik ) b48756 Merge pull request #26 from adamsitnik/master (by @AndreyAkinshin ) 36f849 Add Jit_RegistersVsStack (by @AndreyAkinshin ) 32cafc Allow a [Setup] method to be used on Benchmarks (by @mattwarren ) 8a14a8 Missed out of last commit (by @mattwarren ) 0103b7 Integration tests for [Setup] method closes #23, closes #7 (by @mattwarren ) 1e7c25 Display MSBuild errors in the console output, see #22 (by @mattwarren ) 876303 Added new benchmark for Stopwatch v DateTime (by @mattwarren ) e5f748 New ReportExporter system (by @AndreyAkinshin ) e0fdbc Add BenchmarkDotNet.Visualizer (by @AndreyAkinshin ) 954d08 Fix bug in op/s reporting (by @mattwarren ) d9dcf4 Tidying up BenchmarkDotNet.Samples layout see #29 (by @mattwarren ) 7abb1b Making Visualizer samples point to the new location (see #29) (by @mattwarren ) 96d5b9 Speed up the integration tests, closes #23 (by @mattwarren ) 2568a1 Initial work on Params attribute (see #8) (by @mattwarren ) 47fad8 Ensure Benchmarks with Params show up properly in Reports (by @mattwarren ) 36e060 Integration tests and sample for Params attribute (by @mattwarren ) 76ad88 Fixing some spelling mistakes (by @mattwarren ) 81e6eb Update BenchmarkProgram.txt (by @mattwarren ) 4008cf Merge pull request #32 from PerfDotNet/mattwarren-exception-handling (by @mattwarren ) 9e893e Statistic improvements (by @AndreyAkinshin ) 9ce9f9 Ensure that Params attribute can work with static fields/properties (by @mattwarren ) 7c3782 Update README.md (by @AndreyAkinshin ) 5a1783 Update Array_HeapAllocVsStackAlloc.cs (by @mattwarren ) 50ff16 Allow just number param in RunCompetitions. (by @vkkoshelev ) 04c306 Merge pull request #34 from vedun-z/master (by @AndreyAkinshin ) a630dc Set library version: 0.7.8 (by @AndreyAkinshin ) Contributors (5) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Philip Panyukov ( @ppanyukov ) vkkoshelev ( @vkkoshelev ) Thank you very much!"
  },
  "changelog/v0.8.0.html": {
    "href": "changelog/v0.8.0.html",
    "title": "BenchmarkDotNet v0.8.0 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.8.0 Milestone details In the v0.8.0 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 67 commits by 5 contributors. Resolved issues (0) Merged pull requests (0) Commits (67) 042631 Atomics sample (by @redknightlois ) 6ce693 Merge pull request #35 from redknightlois/master (by @AndreyAkinshin ) e73ce4 Update Intro_03_SingleRun (by @AndreyAkinshin ) add75c Samples: add Js_AsVsCast (by @AndreyAkinshin ) 1d4653 Samples: updates Js_AsVsCast (by @AndreyAkinshin ) 73f48f BenchmarkRuntime support (by @AndreyAkinshin ) 8e9fec BenchmarkRuntime: fix a bug (by @AndreyAkinshin ) 0d8a86 Added RotateBits (will be interested when https://github.com/dotnet/coreclr/i.. . (by @redknightlois ) 724970 Added and special case which we know it must not be optimized at all (for com... (by @redknightlois ) 30ba93 Merge pull request #43 from redknightlois/master (by @AndreyAkinshin ) a2338c Big refactoring (by @AndreyAkinshin ) dc8d02 Make the \"Getting Started\" guide read better (by @mattwarren ) 9883ca Update README.md (by @mattwarren ) 3cd76b Update README.md (by @mattwarren ) 6a3d00 Update README.md (by @mattwarren ) 7de832 Better way of generating Benchmark competition list (by @mattwarren ) 10ded0 Add Jit_GenericsMethod (by @AndreyAkinshin ) e5538b Fix for #42 (make benchmarks work in LINQPad) (by @mattwarren ) 873450 Make logging robust when strings contain '{' or '} (by @mattwarren ) 2ee55a Create a batch file that builds the benchmark (by @mattwarren ) d14b18 Adding \"Advanced Features\" section (by @mattwarren ) deb1a9 Sample benchmark for different types of loops (by @mattwarren ) 26e7b0 Move sample to correct namespace (by @mattwarren ) 505711 Grouping parameter results together (fixes #36) (by @mattwarren ) 1ee786 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @mattwarren ) 496ae1 Add support for benchmarking methods of generic classes (#44) (by @mattwarren ) ad12e1 Return of the Params (by @AndreyAkinshin ) f80613 Little cleanup (by @AndreyAkinshin ) 52a076 Little refactoring (Flow -> Toolchain) (by @AndreyAkinshin ) 2f383e Moar samples (by @mattwarren ) 30b162 Initial work on code for asm/IL viewing (by @mattwarren ) 6a8873 Initial support for printing Assembly code (by @mattwarren ) 8cd841 Print diagnostic info (with flag \"-printDiagnostics\") (by @mattwarren ) 236043 Adding missing CLRMD dependancies (by @mattwarren ) 58b7a3 Print the method when we have a \"call\" asm instruction (by @mattwarren ) 1dae2b Change Jit_GenericsMethod benchmark to reproduce on x64 both Legacy & RuyJit (by @alexandrnikitin ) 6ae157 Merge pull request #47 from alexandrnikitin/samples-Jit_GenericsMethod-x64repro (by @AndreyAkinshin ) c39b7c README: add gitter link (by @AndreyAkinshin ) b0768e Ensure we \"close\" the code section in the markdown we generate (by @mattwarren ) 6c9ae7 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @mattwarren ) 9ed66d Show how you can write \"Performance\" Unit Tests (by @mattwarren ) 7c9c6d Helper methods for Performance Unit Tests (by @mattwarren ) 3a2c75 Make Perf Unit Test more robust!! (by @mattwarren ) d1ddd3 Ensure the Description is used when sorting (if available) (by @mattwarren ) 27d662 Moving assembly viewer into BenchmarkDotNet.Diagnostics (by @mattwarren ) 1ef961 Load BenchmarkDotNet.Diagnostics dynamically (by @mattwarren ) 7eb70a New plugin system (by @AndreyAkinshin ) 2114d7 Fix typos in API (by @AndreyAkinshin ) e0a488 Fix in PerformanceUnitTest (by @AndreyAkinshin ) 02cddd BenchmarkDotNet.Tests: upgrade xunit to 2.1 (by @AndreyAkinshin ) 3d8ff2 IntegrationTests: replace GetTestOutput by AccumulationLogger (by @AndreyAkinshin ) 5ebf69 IntegrationTests: upgrade xunit to 2.1 (by @AndreyAkinshin ) 280834 Diagnostic refactoring (by @AndreyAkinshin ) 79ee42 Custom toolchains (by @AndreyAkinshin ) 527df6 Analysers (by @AndreyAkinshin ) 3d8199 Fix in BuildTable (by @AndreyAkinshin ) 699588 Tidy up of Source Diagnoser code (part of #53) (by @mattwarren ) 5ab029 Better way of getting the called method name (part of #53) (by @mattwarren ) 37f468 Integration test for Source Diagnostics (see #53) (by @mattwarren ) da0093 Spelling mistakes and remove unused using stmts (by @mattwarren ) fbf409 Fix typo in README (by @ForNeVeR ) 4895c6 Merge pull request #61 from ForNeVeR/patch-1 (by @AndreyAkinshin ) dd5f1f Rename: exec -> execute (by @AndreyAkinshin ) 6826a9 BenchmarkSwitcher: update the promt message (by @AndreyAkinshin ) f2a63f Update README.md (by @AndreyAkinshin ) 54cfdc Samples/Program.cs: small fix (by @AndreyAkinshin ) a927e9 Set library version: 0.8.0 (by @AndreyAkinshin ) Contributors (5) Alexandr Nikitin ( @alexandrnikitin ) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) Friedrich von Never ( @ForNeVeR ) Matt Warren ( @mattwarren ) Thank you very much!"
  },
  "changelog/v0.8.1.html": {
    "href": "changelog/v0.8.1.html",
    "title": "BenchmarkDotNet v0.8.1 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.8.1 Milestone details In the v0.8.1 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 12 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (12) 79ee93 README.md: small fixes (by @AndreyAkinshin ) a3e2dc Adding missing CLRMD binary dependencies (by @mattwarren ) 7492c1 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @mattwarren ) ddae06 Lazy-load the Diagnostic plug-ins, fixes #63 (by @mattwarren ) 5df0df More robust version of the Diagnostic Library (see #53) (by @mattwarren ) 9f3ba0 Ensure that non-void SingleRun Benchmarks work (by @mattwarren ) de5bca Allow Benchmarks that use Inner classes (see #55) (by @mattwarren ) 5d000f Ensure we can run Benchmarks produced by F# (see #59) (by @mattwarren ) 8b0563 Added missing binary dependency (part of #59) (by @mattwarren ) 60047e Fixing #45 (by @mattwarren ) 3bede9 Implemented Ctrl-C handling in the Console (Fixes #50) (by @mattwarren ) 719391 Set library version: 0.8.1 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much!"
  },
  "changelog/v0.9.7.html": {
    "href": "changelog/v0.9.7.html",
    "title": "BenchmarkDotNet v0.9.7 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.7 .NET Core RC2 support (see #187 ) Bugfixes Milestone details In the v0.9.7 scope, 8 issues were resolved and 0 pull requests where merged. This release includes 27 commits by 3 contributors. Resolved issues (8) #168 Unable to run tests locally #170 Error handling in the spawned Benchmark process (assignee: @mattwarren ) #172 Ensure CsvMeasurementsExporter is enabled when RPlotExporter is used (assignee: @mattwarren ) #179 Job.GetAllProperties(): old property names are used #181 CompositeValidator: some validators will be skipped #183 [Suggestion] Make ValidationError public #187 .NET Core RC2 (assignee: @adamsitnik ) #192 Avoid creating .cs files at execution time Merged pull requests (0) Commits (27) 7568c0 Initial work on #130 (currently just matching existing behaviour) (by @mattwarren ) 34965e Fixes #170 (by @mattwarren ) 4d6d32 Remove \"@\" from the ProcessorName (by @AndreyAkinshin ) 57b402 Specify HintPath for all referenced assemblies (for mono support) (by @AndreyAkinshin ) 0d065b Merge branch 'develop' of github.com:PerfDotNet/BenchmarkDotNet into develop (by @mattwarren ) c24a9c Less \"magic\" strings - Fixes #179 (by @mattwarren ) 1371ea Allow Exporters to have dependencies, fixes #172 (by @mattwarren ) d6a55c Further work on #130 (by @mattwarren ) e0ebd4 Tidy up of the Json exporter code (part of #189) (by @mattwarren ) ae330c Allow formatted/indented Json (see #189) (by @mattwarren ) 83fd20 Also allow args with \"--\", i.e. --exporters=json (see #189) (by @mattwarren ) 78af45 File missing from previous check-in \"ae330c4\" (#189) (by @mattwarren ) 9352d0 \"Measurments\" -> \"Measurements\" (by @mattwarren ) a34507 .NET Core RC2 support, fixes #187 (by @adamsitnik ) 0c9524 remove IValidationError interface, make the implementation public, fixes #183 (by @adamsitnik ) 30a6ec Avoid creating .cs files at execution time, fixes #192 (by @adamsitnik ) 792176 hiding CompositeValidator, fix few typos, fixes #181 (by @adamsitnik ) a345e7 Use short, hard coded name for folders to avoid PathTooLongEx if user does no... (by @adamsitnik ) 354b28 minor cleanup after moving to RC2 (by @adamsitnik ) 53b7ff dotnet cli bug workaround, Tornhoof's idea (by @adamsitnik ) 8e6d30 added missing Nuget feeds to NuGet.Config, removed launchSettings which we do... (by @adamsitnik ) 9addd0 Improvements in MethodInvoker (by @AndreyAkinshin ) ccd91d Update Chronometer.HardwareTimerKind (by @AndreyAkinshin ) e9db3d Update year in LICENSE.md (by @AndreyAkinshin ) acd019 updated docs for .NET Core RC2 #187 (by @adamsitnik ) 605aa1 README.md: add a link to BenchmarkDotNet.Diagnostics.Windows (by @AndreyAkinshin ) 571b3d Set library version: 0.9.7 (by @AndreyAkinshin ) Contributors (3) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Milestone: v0.9.7 Date: May 29, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.7 https://www.nuget.org/packages/BenchmarkDotNet/0.9.7-beta https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.7"
  },
  "changelog/v0.9.8.html": {
    "href": "changelog/v0.9.8.html",
    "title": "BenchmarkDotNet v0.9.8 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.8 CoreCLR RTM support (see #216 ). Breaking change: we have dropped dnx451 and dnxcore50 support. Migration from MSBuild to Roslyn, which supports Mono on Linux and MacOS (see #149 ). Breaking change: we have dropped .NET 4.0 support. Ability to manage GC mode: turn on/off the Server/Concurrent GC modes, extend to CPU groups, set gcAllowVeryLargeObjects and avoid BenchmarkDotNet from forcing GC.Collect (see #188 , #76 and #211 ) Support CopyToOutput (see #212 ). Now you can use native dependencies as well as custom files. Copying custom settings from app.config (see #108 ). It means we support assembly binding redirects as well as custom connection strings etc. AsciiDocExporter (see #169 ) Framework setting in Job has been removed (see #194 ) Minor bugfixes and improvements Milestone details In the v0.9.8 scope, 21 issues were resolved and 1 pull requests where merged. This release includes 69 commits by 5 contributors. Resolved issues (21) #57 Make Benchmark, Setup and Params attribute sealed in explicit way #76 Allow users to set gcAllowVeryLargeObjects for Runtime Settings (assignee: @AndreyAkinshin ) #77 Implement a C.I build (assignee: @mattwarren ) #108 Copy custom setting from app.config #131 [Mono] BenchmarkDotNet doesn't work on Mac OS #149 Migrate from MSBuild to Roslyn #174 NRE in Summary indexer property. #176 Split and simplify printed summaries #188 Ability to manage GC mode: turn on/off the Server/Concurrent GC modes and extend to CPU groups #191 MSBuild dependency - best way of fixing? #194 Framework settings in Jobs (assignee: @mattwarren ) #196 Allow specifying a gist url to RunUrl #197 Regression in 0.9.7: --help option fails under dotnet run #203 Third-party libraries must be explicitly included in test context to be loaded by runner #209 Fix appveyor bug #211 Possibility to turn off GC.Collect after each benchmark run (assignee: @adamsitnik ) #212 Support CopyToOutput #214 Benchmark ignores binding redirects #216 Update to .NET Core RTM (assignee: @adamsitnik ) #218 Errors in BenchmarkDotNet.Samples.FSharp.Core/projects.json #222 A problem with System.Threading.Tasks Merged pull requests (1) #169 Support export to asciidoc (by @russcam ) Commits (69) fcf48e Support export to asciidoc (by @russcam ) 590a0a Road to Roslyn: first attempt (by @AndreyAkinshin ) 704605 Added appveyor ci build (by @gigi81 ) 3859a1 Catch exception when accessing Console.WindowWidth, fixes #197 (by @mattwarren ) 7b92eb Filter tests by attribute (see #130) (by @mattwarren ) dd3464 Merge pull request #202 from gigi81/appveyor-build-2 (by @adamsitnik ) 29d106 Added missing 'build dependency' (by @gigi81 ) 2e8209 Merge pull request #205 from gigi81/fix-missing-dependency (by @AndreyAkinshin ) ff298d Appveyor build improvements (by @gigi81 ) 600cdd Merge pull request #206 from gigi81/appveyor-4 (by @AndreyAkinshin ) 68b070 Fixed tests not using OutputLogger (by @gigi81 ) 7d0501 Renamed _output to output (by @gigi81 ) ae5eab Merge pull request #207 from gigi81/fix-outputlogger (by @AndreyAkinshin ) dfe110 Small cleanup: remove compilation warnings (by @AndreyAkinshin ) ffe9f7 Clean up, part 2 (by @AndreyAkinshin ) 559f20 appveyor specific test fixes (by @AndreyAkinshin ) 38af24 MemoryDiagnoserTests: double.Parse Culture fix (by @AndreyAkinshin ) 02048d StatResultExtenderTests: SpeedUp (by @AndreyAkinshin ) f2b21f Clean up, part 3 (by @AndreyAkinshin ) d32328 SpeedUp: BaselineScaledColumnsTest, StatResultExtenderTests (by @AndreyAkinshin ) 5e37fa MemoryDiagnoserTests: additional parsing fixes (by @AndreyAkinshin ) 45c66f Merge branch 'develop' into Roslyn (by @adamsitnik ) a4cb8c MemoryDiagnoserTests: Temporarily suppressed (by @AndreyAkinshin ) ae38a5 README: add the appveyor badge (by @AndreyAkinshin ) 77bd64 README: update badges (by @AndreyAkinshin ) a74f82 README: update badges, part 2 (by @AndreyAkinshin ) 453a49 merging recent changes from develop with Roslyn branch to get it working again (by @adamsitnik ) ce4af5 add dependencies in recursive way, fixes #203 (by @adamsitnik ) a36af4 farewell MSBuid (by @adamsitnik ) d2dd83 Workaround for xunit bug (by @gigi81 ) 46f2b7 Merge pull request #210 from gigi81/xunit-workaround-2 (by @AndreyAkinshin ) c5b4ae Merge remote-tracking branch 'refs/remotes/origin/develop' into Roslyn (by @AndreyAkinshin ) 54109b copy custom settings from app.config file, fixes #108 (by @adamsitnik ) 20c41f enable GC settings customization, fixes #188 (by @adamsitnik ) dd0bc4 tests fix ;) (by @adamsitnik ) 0726b5 Possibility to turn off GC.Collect after each benchmark run, fixes #211 (by @adamsitnik ) da24b4 rename GC to GarbageCollection to avoid conflicts with System.GC (by @adamsitnik ) 3bf420 gcAllowVeryLargeObjects, fixes #76 (by @adamsitnik ) bdce98 split EnvironmentInfo into Host and Benchmark specific, make expensive method... (by @adamsitnik ) e819c8 added GC info to BenchmarkEnvironmentInfo (by @adamsitnik ) 9e0480 change GC settings display order (Workstation Concurrent => Concurrent Workst... (by @adamsitnik ) d03d17 support CopyToOutput: build in output directory + some refacotring, fixes #212 (by @adamsitnik ) 237370 minor bug fix: support spaces in parameters representation (by @adamsitnik ) 06349a Update to .NET Core RTM, drop DNX* support, fixes #216 (by @adamsitnik ) 106477 Merge branch 'develop' of https://github.com/russcam/BenchmarkDotNet into rus... (by @AndreyAkinshin ) 2e18db Merge branch 'russcam-develop' into develop (by @AndreyAkinshin ) 388155 Fix a NRE bug in Summary indexer, fixes #174 (by @AndreyAkinshin ) d448b4 Now RunUrl can work with non-raw github and gist urls, fixes #196 (by @AndreyAkinshin ) 7e1b95 Welch's Two Sample t-test (by @AndreyAkinshin ) cc70cb specify version of F# compiler in explicit way to workaround nuget bug, fixes... (by @adamsitnik ) e21373 use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes #149 (by @adamsitnik ) cd25cc use single reflection api after update to .NET 4.5 (by @adamsitnik ) 785d92 make Benchmark, Setup and Params Attribute sealed #57 (by @adamsitnik ) 8a3212 hopefully a workaround for appveyor build (by @adamsitnik ) ef7e35 hopefully a workaround for appveyor build, which does not have the latest dot... (by @adamsitnik ) 918a6d Remove xmlns for packages.config in IntegrationTests.Classic (by @AndreyAkinshin ) b897ed Merge branch 'Roslyn' into develop (by @adamsitnik ) 742a16 skip test that fails for Core on appveyor, #221 (by @adamsitnik ) a94a8b skip test that fails for Classic on appveyor, #221 (by @adamsitnik ) fec206 Fix incorrect xml-docs in MathHelper (by @AndreyAkinshin ) 1567d9 DEVELOPING.md: add a section about develop NuGet feed (by @AndreyAkinshin ) 5c3c31 appveyor: add BenchmarkDotNet.Diagnostics.Windows.nupkg to artifacts (by @AndreyAkinshin ) a69188 DEVELOPING.md: fix a typo (by @AndreyAkinshin ) 4e99b4 project.json: add tags (by @AndreyAkinshin ) 61b4c1 use System.Threading.Tasks as nuget package to fix nuget installation problem... (by @adamsitnik ) 976118 remove Framework settings from Jobs, fixes #194 (by @adamsitnik ) be0b71 try to remove the directory few more times when it's still not released to ma... (by @adamsitnik ) 0647a0 use the Configuration from the hosting process, not BDN dll (by @adamsitnik ) c6405a Set library version: 0.9.8 (by @AndreyAkinshin ) Contributors (5) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Luigi Grilli ( @gigi81 ) Matt Warren ( @mattwarren ) Russ Cam ( @russcam ) Thank you very much! Additional details Milestone: v0.9.8 Date: July 07, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.8 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.8"
  },
  "changelog/v0.9.9.html": {
    "href": "changelog/v0.9.9.html",
    "title": "BenchmarkDotNet v0.9.9 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.9.9 Attribute config style (see #166 ) Online documentation (see #219 ) Mono LLVM support (see #226 ) Async method support (see #236 ) NuGet packages and repo layout restructuring (see #225 , #228 ) [Cleanup] attribute (see #215 ) New statistics columns: Skewness , Kurtosis , WelchTTestPValue , Improved math for the Scaled column Now current default branch is master Minor improvements and bug fixes Milestone details In the v0.9.9 scope, 14 issues were resolved and 1 pull requests where merged. This release includes 46 commits by 4 contributors. Resolved issues (14) #166 Suggestion: Attribute Config style (assignee: @AndreyAkinshin ) #215 Allow a [Cleanup] method to be specified #219 Online documentation and API reference #223 Add support for System.Type in Params #224 [Breaking change] BenchmarkAttribute become sealed. #225 Refactoring the roslyn dependency into another package #226 Support Mono/LLVM as a runtime/jit #227 Suggestion: change default branch (assignee: @AndreyAkinshin ) #228 Suggestion: clean up the root folder #231 Add references to default framework assemblies (System.Runtime etc) #232 Make all tests use OutputLogger (assignee: @adamsitnik ) #235 Don't show non-error output of dotnet cli (assignee: @adamsitnik ) #236 Possibility to benchmark asynchronous methods (assignee: @adamsitnik ) #240 Total Time reports hour rounded up Merged pull requests (1) #233 Add support of Cleanup attribute #215 (by @DenisIstomin ) Commits (46) f9f748 Improved \"Scaled\" column (by @AndreyAkinshin ) 5d7ba9 Warmup improvements (by @AndreyAkinshin ) 664c64 Add Skewness, Kurtosis, and WelchTTestPValue columns and configs (by @AndreyAkinshin ) c9e802 Attribute Config style, fixes #166 (by @AndreyAkinshin ) 378173 README: add supported OS (by @AndreyAkinshin ) 50ac57 Make Benchmark, Params and Setup attributes non-sealed again, fixes #224, #57 (by @adamsitnik ) b9c815 Support Mono/LLVM as a runtime/jit, fixes #226 (by @adamsitnik ) cdfbd5 Update info about default branch, see #227 (by @AndreyAkinshin ) 42e9b9 Add System.Type support in Params, fixes #223 (by @AndreyAkinshin ) db3dc3 Suggestion: clean up the root folder, fixes #228 (by @adamsitnik ) 4e1db3 use shorter names for test for xunit test runner (method name instead of full... (by @adamsitnik ) a35b22 make sure all framework assemblies are referenced, #231 (by @adamsitnik ) 19426a spliting BenchmarkDotNet.dll to few dlls to avoid mandatory Roslyn dependency... (by @adamsitnik ) 356a39 move BenchmarkRunner's core to separate class to .Core project so it can be ... (by @adamsitnik ) 0121a6 minor cleanup: rename LLVM => Llvm, remove [Obsolete] things (by @adamsitnik ) fb8047 Make all tests use OutputLogger, fixes #232 (by @adamsitnik ) ae17a7 Add support of Cleanup attribute, fix #215 (by @DenisIstomin ) 3bf9c0 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @adamsitnik ) 355c6f Don't show non-error output of dotnet cli, fixes #235 (by @adamsitnik ) 76df80 Possibility to benchmark asynchronous methods #236 (by @adamsitnik ) 3ab578 use GetAwaiter().GetResult() for Tasks instead of .Wait or .Result, #236 (by @adamsitnik ) d1db7d Added documentation source and output based on readme.md (by @FransBouma ) ac8cf2 Updated folder structure, removed html output, updated gitignore (by @FransBouma ) bed0f9 Removed unused folder copy directive from docnet.json (by @FransBouma ) 650fca Merge pull request #239 from FransBouma/master (by @AndreyAkinshin ) aceb96 Added Api docs generation directives (by @FransBouma ) a9ee7c Fix in total time formatting, fix #240 (by @AndreyAkinshin ) 1d2141 Update README.md (by @AndreyAkinshin ) 7b9fdb Fixed a couple of issues with api doc generation (by @FransBouma ) 682837 Merge pull request #243 from FransBouma/master (by @AndreyAkinshin ) 9a2cf2 docs improvements (by @AndreyAkinshin ) 334925 Rename: GarbageCollection -> GcMode (by @AndreyAkinshin ) 7a740a SummaryTableTests and minor refactorings (by @AndreyAkinshin ) c9d358 Transform GcModeColumn with null values to a trivial column (by @AndreyAkinshin ) cb6359 Improved HardwareTimerKind detection (by @AndreyAkinshin ) 04f736 Fix references in the IntegrationTests project files (by @AndreyAkinshin ) a9403a Fix warnings (by @AndreyAkinshin ) 691a05 BenchmarkDotNet.Tests: Remove the System.Globalization dependency (by @AndreyAkinshin ) 9e97d7 Show JitModules in EnvInfo only for the classic toolchain (by @AndreyAkinshin ) 823518 Improved docs (by @AndreyAkinshin ) 5fb854 Update README (by @AndreyAkinshin ) 5ebf8b Minor fixes (by @AndreyAkinshin ) 086dfd generic wrapper for config values (by @adamsitnik ) cf58b0 Merge branch 'gc' (by @adamsitnik ) bbccbe docs: add informations about NuGet packages (by @AndreyAkinshin ) 60bea3 Set library version: 0.9.9 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Denis Istomin ( @DenisIstomin ) Frans Bouma ( @FransBouma ) Thank you very much! Additional details Date: August 18, 2016 Milestone: v0.9.9 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.9 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.9.9 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.9.9 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.9 Online Documentation: https://perfdotnet.github.io/BenchmarkDotNet/"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "BenchmarkDotNet API Reference | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet API Reference"
  },
  "index.html": {
    "href": "index.html",
    "title": "Showtime | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet is a powerful .NET library for benchmarking. Source code is available at github.com/dotnet/BenchmarkDotNet Benchmarking is really hard (especially microbenchmarking), you can easily make a mistake during performance measurements. BenchmarkDotNet will protect you from the common pitfalls (even for experienced developers) because it does all the dirty work for you: it generates an isolated project per each benchmark method, does several launches of this project, run multiple iterations of the method (include warm-up), and so on. Usually, you even shouldn't care about a number of iterations because BenchmarkDotNet chooses it automatically to achieve the requested level of precision. It's really easy to design a performance experiment with BenchmarkDotNet. Just mark your method with the [Benchmark] attribute and the benchmark is ready. Want to run your code on .NET Framework, .NET Core, and Mono? No problem: a few more attributes and the corresponded projects will be generated; the results will be presented at the same summary table. In fact, you can compare any environment that you want: you can check performance difference between processor architectures (x86/x64), JIT versions (LegacyJIT/RyuJIT), different sets of GC flags (like Server/Workstation), and so on. You can also introduce one or several parameters and check the performance on different inputs at once. BenchmarkDotNet helps you not only run benchmarks but also analyze the results: it generates reports in different formats and renders nice plots. It calculates many statistics, allows you to run statistical tests, and compares results of different benchmark methods. So it doesn't overload you with data, by default BenchmarkDotNet prints only the really important statistical values depending on your results: it allows you to keep summary small and simple for primitive cases but notify you about an additional important area for complicated cases (of course, you can request any numbers manually via additional attributes). BenchmarkDotNet doesn't just blindly run your code: it tries to help you to conduct a qualitative performance investigation. Showtime It's very easy to start using BenchmarkDotNet. Let's look at an example: using System; using System.Security.Cryptography; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Running; namespace MyBenchmarks { [ClrJob(isBaseline: true), CoreJob, MonoJob, CoreRtJob] [RPlotExporter, RankColumn] public class Md5VsSha256 { private SHA256 sha256 = SHA256.Create(); private MD5 md5 = MD5.Create(); private byte[] data; [Params(1000, 10000)] public int N; [GlobalSetup] public void Setup() { data = new byte[N]; new Random(42).NextBytes(data); } [Benchmark] public byte[] Sha256() => sha256.ComputeHash(data); [Benchmark] public byte[] Md5() => md5.ComputeHash(data); } public class Program { public static void Main(string[] args) { var summary = BenchmarkRunner.Run<Md5VsSha256>(); } } } BenchmarkDotNet allows designing a performance experiment in a user-friendly declarative way. At the end of an experiment, it will generate a summary table which contains only important data in a compact and understandable form: BenchmarkDotNet=v0.11.0, OS=Windows 10.0.16299.309 (1709/FallCreatorsUpdate/Redstone3) Intel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores Frequency=3507504 Hz, Resolution=285.1030 ns, Timer=TSC .NET Core SDK=2.1.300-preview1-008174 [Host] : .NET Core 2.1.0-preview1-26216-03 (CoreCLR 4.6.26216.04, CoreFX 4.6.26216.02), 64bit RyuJIT Job-HKEEXO : .NET Framework 4.7.1 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0 Core : .NET Core 2.1.0-preview1-26216-03 (CoreCLR 4.6.26216.04, CoreFX 4.6.26216.02), 64bit RyuJIT CoreRT : .NET CoreRT 1.0.26414.01, 64bit AOT Mono : Mono 5.10.0 (Visual Studio), 64bit | Method | Runtime | N | Mean | Error | StdDev | Scaled | Rank | |------- |-------- |------ |-----------:|----------:|----------:|-------:|-----:| | Sha256 | Clr | 1000 | 8.009 us | 0.0370 us | 0.0346 us | 1.00 | 3 | | Sha256 | Core | 1000 | 4.447 us | 0.0117 us | 0.0110 us | 0.56 | 2 | | Sha256 | CoreRT | 1000 | 4.321 us | 0.0139 us | 0.0130 us | 0.54 | 1 | | Sha256 | Mono | 1000 | 14.924 us | 0.0574 us | 0.0479 us | 1.86 | 4 | | | | | | | | | | | Md5 | Clr | 1000 | 3.051 us | 0.0604 us | 0.0742 us | 1.00 | 3 | | Md5 | Core | 1000 | 2.004 us | 0.0058 us | 0.0054 us | 0.66 | 2 | | Md5 | CoreRT | 1000 | 1.892 us | 0.0087 us | 0.0077 us | 0.62 | 1 | | Md5 | Mono | 1000 | 3.878 us | 0.0181 us | 0.0170 us | 1.27 | 4 | | | | | | | | | | | Sha256 | Clr | 10000 | 75.780 us | 1.0445 us | 0.9771 us | 1.00 | 3 | | Sha256 | Core | 10000 | 41.134 us | 0.2185 us | 0.1937 us | 0.54 | 2 | | Sha256 | CoreRT | 10000 | 40.895 us | 0.0804 us | 0.0628 us | 0.54 | 1 | | Sha256 | Mono | 10000 | 141.377 us | 0.5598 us | 0.5236 us | 1.87 | 4 | | | | | | | | | | | Md5 | Clr | 10000 | 18.575 us | 0.0727 us | 0.0644 us | 1.00 | 3 | | Md5 | Core | 10000 | 17.562 us | 0.0436 us | 0.0408 us | 0.95 | 2 | | Md5 | CoreRT | 10000 | 17.447 us | 0.0293 us | 0.0244 us | 0.94 | 1 | | Md5 | Mono | 10000 | 34.500 us | 0.1553 us | 0.1452 us | 1.86 | 4 | In artifacts, you can also find detailed information about each iteration. You can export the data in different formats like (CSV, XML, JSON, and so on) or even generate beautiful plots: Main features BenchmarkDotNet has a lot of awesome features for deep performance investigations: Standard benchmarking routine: generating an isolated project per each benchmark method; auto-selection of iteration amount; warmup; overhead evaluation; and so on Execution control: BenchmarkDotNet tries to choose the best possible way to evaluate performance, but you can also manually control amount of iterations, switch between cold start and warmed state, set the accuracy level, tune GC parameters, change environment variables, and more Statistics: by default, you will see the most important statistics like mean and standard deviation; but you can also manually ask for min/max values, confidence intervals, skewness, kurtosis, quartile, percentiles, or define own metrics Comparing environments: Easy way to compare different environments (x86 vs x64, LegacyJit vs RyuJit, Mono vs .NET Core, and so on) Relative performance: you can easily evaluate difference between different methods of environments Memory diagnostics: the library not only measure performance of your code, but also prints information about memory traffic and amount of GC collections Disassembly diagnostics: you can ask for an assembly listing with the help of single additional attribute Parametrization: performance can be evaluated for different sets of input parameters like in popular unit test frameworks Environment information: when your share performance results, it's very important to share information about your environment; BenchmarkDotNet automatically prints the exact version of your OS and processor; amount of physical CPU, physical cores, and logic cores; hypervisor (if you use it); frequency of the hardware timer; the JIT-compiler version; and more Command-line support: you can manage thousands of benchmark, group them by categories, filter and run them from command line Powerful reporting system: it's possible to export benchmark results to markdown, csv, html, plain text, png plots A few useful links for you: If you want to know more about BenchmarkDotNet features, check out the Overview Page . If you want to use BenchmarkDotNet for the first time, the Getting Started will help you. If you want to ask a quick question or discuss performance topics, use the gitter channel. Supported technologies BenchmarkDotNet supports all kinds of .NET stacks: Supported runtimes: .NET Framework (4.6+), .NET Core (2.0+), Mono, CoreRT Supported languages: C#, F#, Visual Basic Supported OS: Windows, Linux, macOS Our users The library is used by a large number of projects for performance discussions or as a part of the codebase: CoreCLR (.NET Core runtime) CoreFX (.NET Core foundational libraries; see also official benchmarking guide ), Roslyn (C# and Visual Basic compiler) KestrelHttpServer (A cross platform web server for ASP.NET Core) SignalR EntityFrameworkCore F# Orleans Newtonsoft.Json Elasticsearch.Net Dapper Expecto Accord.NET Framework ImageSharp RavenDB NodeTime Jint NServiceBus Serilog Autofac Npgsql It's not the full list. On GitHub, you can find hundreds of issues and commits which involve BenchmarkDotNet. There are tens of thousands of files which contain \"BenchmarkDotNet\". Contributions are welcome! BenchmarkDotNet is already a stable full-featured library which allows performing performance investigation on a professional level. And it continues to evolve! We add new features all the time, but we have too many new cool ideas. Any help will be appreciated. You can develop new features, fix bugs, improve the documentation, or do some other cool stuff. If you want to contribute, check out the Contributing guide and up-for-grabs issues. If you have new ideas or want to complain about bugs, feel free to create a new issue . Let's build the best tool for benchmarking together! Code of Conduct This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the .NET Foundation Code of Conduct . .NET Foundation This project is supported by the .NET Foundation ."
  },
  "articles/contributing/miscellaneous.html": {
    "href": "articles/contributing/miscellaneous.html",
    "title": "F# | BenchmarkDotNet",
    "keywords": "#Miscellaneous topics F# We have full F# support, all you have to do is to run dotnet restore to download the compilers etc. Chat room How can I help? Here is a list of up-for-grabs issues"
  },
  "articles/contributing/running-tests.html": {
    "href": "articles/contributing/running-tests.html",
    "title": "Running Tests | BenchmarkDotNet",
    "keywords": "Running Tests To run \"Classic\" tests build the solution and run runClassicTests.cmd in the tests directory or comment out the netcoreapp1.0 part of all project.json files that belong to the testing projects. To run \"Core\" tests you just need to open Test Explorer in Visual Studio and rebuild the solution. Then tests show up in Test Explorer and you can simply run them. @alert Important Remember to do both before pulling a PR or publishing new version @end For some unit tests (e.g. for exporter tests) BenchmarkDotNet uses approval tests' implementation for .NET: ApprovalTests.Net . The expected value for each test is stored in a *.approved.txt file located near the test source file in the repository. ApprovalTests.NET generates approved file's names automatically according test name and its parameters. This files must be added under the source control. It also creates a *.received file for each failed test. You can use different reporters for convenient file comparison. By default we use XUnit2Reporter, so you can find test run results on the test runner console as usual. You can add [UseReporter(typeof(KDiffReporter))] on test class and then ApprovalTests will open KDiff for each failed test. This way you can easily understand what's the difference between approved and received values and choose the correct one."
  },
  "articles/features/baselines.html": {
    "href": "articles/features/baselines.html",
    "title": "Benchmark and Job Baselines | BenchmarkDotNet",
    "keywords": "Benchmark and Job Baselines In order to scale your results, you can mark a benchmark method or a job as a baseline. Let's learn this feature by examples. Sample: IntroBenchmarkBaseline You can mark a method as a baseline with the help of [Benchmark(Baseline = true)] . Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroBenchmarkBaseline { [Benchmark] public void Time50() => Thread.Sleep(50); [Benchmark(Baseline = true)] public void Time100() => Thread.Sleep(100); [Benchmark] public void Time150() => Thread.Sleep(150); } } Output As a result, you will have additional Scaled column in the summary table: | Method | Mean | Error | StdDev | Scaled | |-------- |----------:|----------:|----------:|-------:| | Time50 | 50.46 ms | 0.0779 ms | 0.0729 ms | 0.50 | | Time100 | 100.39 ms | 0.0762 ms | 0.0713 ms | 1.00 | | Time150 | 150.48 ms | 0.0986 ms | 0.0922 ms | 1.50 | See also Benchmark and Job Baselines The link to this sample: Sample: IntroBenchmarkBaseline Sample: IntroCategoryBaseline The only way to have several baselines in the same class is to separate them by categories and mark the class with [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)] . Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; namespace BenchmarkDotNet.Samples { [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)] [CategoriesColumn] public class IntroCategoryBaseline { [BenchmarkCategory(\"Fast\"), Benchmark(Baseline = true)] public void Time50() => Thread.Sleep(50); [BenchmarkCategory(\"Fast\"), Benchmark] public void Time100() => Thread.Sleep(100); [BenchmarkCategory(\"Slow\"), Benchmark(Baseline = true)] public void Time550() => Thread.Sleep(550); [BenchmarkCategory(\"Slow\"), Benchmark] public void Time600() => Thread.Sleep(600); } } Output | Method | Categories | Mean | Error | StdDev | Scaled | |-------- |----------- |----------:|----------:|----------:|-------:| | Time50 | Fast | 50.46 ms | 0.0745 ms | 0.0697 ms | 1.00 | | Time100 | Fast | 100.47 ms | 0.0955 ms | 0.0893 ms | 1.99 | | | | | | | | | Time550 | Slow | 550.48 ms | 0.0525 ms | 0.0492 ms | 1.00 | | Time600 | Slow | 600.45 ms | 0.0396 ms | 0.0331 ms | 1.09 | See also Benchmark and Job Baselines The link to this sample: Sample: IntroCategoryBaseline Sample: IntroJobBaseline If you want to compare several runtime configuration, you can mark one of your jobs with isBaseline = true . Source code using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { [ClrJob(isBaseline: true)] [MonoJob] [CoreJob] public class IntroJobBaseline { [Benchmark] public int SplitJoin() => string.Join(\",\", new string[1000]).Split(',').Length; } } Output BenchmarkDotNet=v0.10.12, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.192) Processor=Intel Core i7-6700HQ CPU 2.60GHz (Skylake), ProcessorCount=8 Frequency=2531249 Hz, Resolution=395.0619 ns, Timer=TSC .NET Core SDK=2.0.3 [Host] : .NET Core 2.0.3 (Framework 4.6.25815.02), 64bit RyuJIT Job-MXFYPZ : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2600.0 Core : .NET Core 2.0.3 (Framework 4.6.25815.02), 64bit RyuJIT Mono : Mono 5.4.0 (Visual Studio), 64bit Method | Runtime | Mean | Error | StdDev | Scaled | ScaledSD | ---------- |-------- |---------:|----------:|----------:|-------:|---------:| SplitJoin | Clr | 19.42 us | 0.2447 us | 0.1910 us | 1.00 | 0.00 | SplitJoin | Core | 13.00 us | 0.2183 us | 0.1935 us | 0.67 | 0.01 | SplitJoin | Mono | 39.14 us | 0.7763 us | 1.3596 us | 2.02 | 0.07 | See also Benchmark and Job Baselines The link to this sample: Sample: IntroJobBaseline"
  },
  "articles/features/parameterization.html": {
    "href": "articles/features/parameterization.html",
    "title": "Parameterization | BenchmarkDotNet",
    "keywords": "Parameterization Sample: IntroParams You can mark one or several fields or properties in your class by the [Params] attribute. In this attribute, you can specify set of values. Every value must be a compile-time constant. As a result, you will get results for each combination of params values. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroParams { [Params(100, 200)] public int A { get; set; } [Params(10, 20)] public int B { get; set; } [Benchmark] public void Benchmark() => Thread.Sleep(A + B + 5); } } Output Method | Median | StdDev | A | B ---------- |------------ |---------- |---- |--- Benchmark | 115.3325 ms | 0.0242 ms | 100 | 10 Benchmark | 125.3282 ms | 0.0245 ms | 100 | 20 Benchmark | 215.3024 ms | 0.0375 ms | 200 | 10 Benchmark | 225.2710 ms | 0.0434 ms | 200 | 20 See also Parameterization The link to this sample: Sample: IntroParams Sample: IntroParamsSource In case you want to use a lot of values, you should use [ParamsSource] You can mark one or several fields or properties in your class by the [Params] attribute. In this attribute, you have to specify the name of public method/property which is going to provide the values (something that implements IEnumerable ). The source must be within benchmarked type! Source code using System.Collections.Generic; using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroParamsSource { // property with public setter [ParamsSource(nameof(ValuesForA))] public int A { get; set; } // public field [ParamsSource(nameof(ValuesForB))] public int B; // public property public IEnumerable<int> ValuesForA => new[] { 100, 200 }; // public static method public static IEnumerable<int> ValuesForB() => new[] { 10, 20 }; [Benchmark] public void Benchmark() => Thread.Sleep(A + B + 5); } } Output Method | Median | StdDev | A | B ---------- |------------ |---------- |---- |--- Benchmark | 115.3325 ms | 0.0242 ms | 100 | 10 Benchmark | 125.3282 ms | 0.0245 ms | 100 | 20 Benchmark | 215.3024 ms | 0.0375 ms | 200 | 10 Benchmark | 225.2710 ms | 0.0434 ms | 200 | 20 Remarks A remark about IParam. You don't need to use IParam anymore since 0.11.0 . Just use complex types as you wish and override ToString method to change the display names used in the results. See also Parameterization The link to this sample: Sample: IntroParamsSource Sample: IntroArguments As an alternative to using [Params] , you can specify arguments for your benchmarks. There are several ways to do it (described below). Important InProcessToolchain does not support Arguments (yet!). See #687 for more details. The [Arguments] allows you to provide a set of values. Every value must be a compile-time constant (it's C# lanugage limitation for attributes in general). You can also combine [Arguments] with [Params] . As a result, you will get results for each combination of params values. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroArguments { [Params(true, false)] // Arguments can be combined with Params public bool AddExtra5Miliseconds; [Benchmark] [Arguments(100, 10)] [Arguments(100, 20)] [Arguments(200, 10)] [Arguments(200, 20)] public void Benchmark(int a, int b) { if (AddExtra5Miliseconds) Thread.Sleep(a + b + 5); else Thread.Sleep(a + b); } } } Output | Method | AddExtra5Miliseconds | a | b | Mean | Error | StdDev | |---------- |--------------------- |---- |--- |---------:|----------:|----------:| | Benchmark | False | 100 | 10 | 110.1 ms | 0.0056 ms | 0.0044 ms | | Benchmark | False | 100 | 20 | 120.1 ms | 0.0155 ms | 0.0138 ms | | Benchmark | False | 200 | 10 | 210.2 ms | 0.0187 ms | 0.0175 ms | | Benchmark | False | 200 | 20 | 220.3 ms | 0.1055 ms | 0.0986 ms | | Benchmark | True | 100 | 10 | 115.3 ms | 0.1375 ms | 0.1286 ms | | Benchmark | True | 100 | 20 | 125.3 ms | 0.1212 ms | 0.1134 ms | | Benchmark | True | 200 | 10 | 215.4 ms | 0.0779 ms | 0.0691 ms | | Benchmark | True | 200 | 20 | 225.4 ms | 0.0775 ms | 0.0725 ms | See also Parameterization The link to this sample: Sample: IntroArguments Sample: IntroArgumentsSource In case you want to use a lot of values, you should use [ArgumentsSource] . You can mark one or several fields or properties in your class by the [ArgumentsSource] attribute. In this attribute, you have to specify the name of public method/property which is going to provide the values (something that implements IEnumerable ). The source must be within benchmarked type! Source code using System; using System.Collections.Generic; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroArgumentsSource { [Benchmark] [ArgumentsSource(nameof(Numbers))] public double Pow(double x, double y) => Math.Pow(x, y); public IEnumerable<object[]> Numbers() { yield return new object[] { 1.0, 1.0 }; yield return new object[] { 2.0, 2.0 }; yield return new object[] { 4.0, 4.0 }; yield return new object[] { 10.0, 10.0 }; } } } Output | Method | x | y | Mean | Error | StdDev | |------- |--- |--- |----------:|----------:|----------:| | Pow | 1 | 1 | 9.360 ns | 0.0190 ns | 0.0149 ns | | Pow | 2 | 2 | 40.624 ns | 0.3413 ns | 0.3192 ns | | Pow | 4 | 4 | 40.537 ns | 0.0560 ns | 0.0524 ns | | Pow | 10 | 10 | 40.395 ns | 0.3274 ns | 0.3063 ns | Another example If the values are complex types you need to override ToString method to change the display names used in the results. [DryJob] public class WithNonPrimitiveArgumentsSource { [Benchmark] [ArgumentsSource(nameof(NonPrimitive))] public void Simple(SomeClass someClass, SomeStruct someStruct) { for (int i = 0; i < someStruct.RangeEnd; i++) Console.WriteLine($\"// array.Values[{i}] = {someClass.Values[i]}\"); } public IEnumerable<object[]> NonPrimitive() { yield return new object[] { new SomeClass(Enumerable.Range(0, 10).ToArray()), new SomeStruct(10) }; yield return new object[] { new SomeClass(Enumerable.Range(0, 15).ToArray()), new SomeStruct(15) }; } public class SomeClass { public SomeClass(int[] initialValues) => Values = initialValues.Select(val => val * 2).ToArray(); public int[] Values { get; } public override string ToString() => $\"{Values.Length} items\"; } public struct SomeStruct { public SomeStruct(int rangeEnd) => RangeEnd = rangeEnd; public int RangeEnd { get; } public override string ToString() => $\"{RangeEnd}\"; } } | Method | someClass | someStruct | Mean | Error | |------- |---------- |----------- |---------:|------:| | Simple | 10 items | 10 | 887.2 us | NA | | Simple | 15 items | 15 | 963.1 us | NA | See also Parameterization The link to this sample: Sample: IntroArgumentsSource Sample: IntroArrayParam Warning The cost of creating the arguments is not included in the benchmark. So if you want to pass an array as an argument, we are going to allocate it before running the benchmark, and the benchmark will not include this operation. Source code using System; using System.Collections.Generic; using System.Linq; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Code; namespace BenchmarkDotNet.Samples { public class IntroArrayParam { [Benchmark] [ArgumentsSource(nameof(Data))] public int ArrayIndexOf(int[] array, int value) => Array.IndexOf(array, value); [Benchmark] [ArgumentsSource(nameof(Data))] public int ManualIndexOf(int[] array, int value) { for (int i = 0; i < array.Length; i++) if (array[i] == value) return i; return -1; } public IEnumerable<object[]> Data() { yield return CreateArrayAndValue(new[] { 1, 2, 3 }, 4); yield return CreateArrayAndValue(Enumerable.Range(0, 100).ToArray(), 4); yield return CreateArrayAndValue(Enumerable.Range(0, 100).ToArray(), 101); } private object[] CreateArrayAndValue(int[] array, int value) => new object[] { ArrayParam<int>.ForPrimitives(array), value }; } } Output | Method | array | value | Mean | Error | StdDev | Allocated | |-------------- |----------- |------ |----------:|----------:|----------:|----------:| | ArrayIndexOf | Array[100] | 4 | 15.558 ns | 0.0638 ns | 0.0597 ns | 0 B | | ManualIndexOf | Array[100] | 4 | 5.345 ns | 0.0668 ns | 0.0625 ns | 0 B | | ArrayIndexOf | Array[3] | 4 | 14.334 ns | 0.1758 ns | 0.1558 ns | 0 B | | ManualIndexOf | Array[3] | 4 | 2.758 ns | 0.0905 ns | 0.1208 ns | 0 B | | ArrayIndexOf | Array[100] | 101 | 78.359 ns | 1.8853 ns | 2.0955 ns | 0 B | | ManualIndexOf | Array[100] | 101 | 80.421 ns | 0.6391 ns | 0.5978 ns | 0 B | See also Parameterization The link to this sample: Sample: IntroArrayParam"
  },
  "articles/features/setup-and-cleanup.html": {
    "href": "articles/features/setup-and-cleanup.html",
    "title": "Setup And Cleanup | BenchmarkDotNet",
    "keywords": "Setup And Cleanup Sometimes we want to write some logic which should be executed before or after a benchmark, but we don't want to measure it. For this purpose, BenchmarkDotNet provides a set of attributes: [GlobalSetup] , [GlobalCleanup] , [IterationSetup] , [IterationCleanup] . Sample: IntroSetupCleanupGlobal A method which is marked by the [GlobalSetup] attribute will be executed only once per a benchmarked method after initialization of benchmark parameters and before all the benchmark method invocations. A method which is marked by the [GlobalCleanup] attribute will be executed only once per a benchmarked method after all the benchmark method invocations. If you are using some unmanaged resources (e.g., which were created in the GlobalSetup method), they can be disposed in the GlobalCleanup method. Source code using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroSetupCleanupGlobal { [Params(10, 100, 1000)] public int N; private int[] data; [GlobalSetup] public void GlobalSetup() { data = new int[N]; // executed once per each N value } [Benchmark] public int Logic() { int res = 0; for (int i = 0; i < N; i++) res += data[i]; return res; } [GlobalCleanup] public void GlobalCleanup() { // Disposing logic } } } See also Setup And Cleanup The link to this sample: Sample: IntroSetupCleanupGlobal Sample: IntroSetupCleanupIteration A method which is marked by the [IterationSetup] attribute will be executed only once before each an iteration . It's not recommended to use this attribute in microbenchmarks because it can spoil the results. However, if you are writing a macrobenchmark (e.g. a benchmark which takes at least 100ms) and you want to prepare some data before each iteration, [IterationSetup] can be useful. BenchmarkDotNet doesn't support setup/cleanup method for a single method invocation ( an operation ), but you can perform only one operation per iteration. It's recommended to use RunStrategy.Monitoring for such cases. Be careful: if you allocate any objects in the [IterationSetup] method, the MemoryDiagnoser results can also be spoiled. A method which is marked by the [IterationCleanup] attribute will be executed only once after each an iteration . This attribute has the same set of constraint with [IterationSetup] : it's not recommended to use [IterationCleanup] in microbenchmarks. Source code using System; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { [SimpleJob(RunStrategy.Monitoring, launchCount: 1, warmupCount: 2, targetCount: 3)] public class IntroSetupCleanupIteration { private int setupCounter; private int cleanupCounter; [IterationSetup] public void IterationSetup() => Console.WriteLine($\"// IterationSetup ({++setupCounter})\"); [IterationCleanup] public void IterationCleanup() => Console.WriteLine($\"// IterationCleanup ({++cleanupCounter})\"); [GlobalSetup] public void GlobalSetup() => Console.WriteLine(\"// \" + \"GlobalSetup\"); [GlobalCleanup] public void GlobalCleanup() => Console.WriteLine(\"// \" + \"GlobalCleanup\"); [Benchmark] public void Benchmark() => Console.WriteLine(\"// \" + \"Benchmark\"); } } THe order of method calls // GlobalSetup // IterationSetup (1) // IterationSetup Jitting // IterationCleanup (1) // IterationCleanup Jitting // IterationSetup (2) // MainWarmup1 // Benchmark // MainWarmup1 // IterationCleanup (2) // MainWarmup1 // IterationSetup (3) // MainWarmup2 // Benchmark // MainWarmup2 // IterationCleanup (3) // MainWarmup2 // IterationSetup (4) // MainTarget1 // Benchmark // MainTarget1 // IterationCleanup (4) // MainTarget1 // IterationSetup (5) // MainTarget2 // Benchmark // MainTarget2 // IterationCleanup (5) // MainTarget2 // IterationSetup (6) // MainTarget3 // Benchmark // MainTarget3 // IterationCleanup (6) // MainTarget3 // GlobalCleanup See also Setup And Cleanup The link to this sample: Sample: IntroSetupCleanupIteration Sample: IntroSetupCleanupTarget Sometimes it's useful to run setup or cleanups for specific benchmarks. All four setup and cleanup attributes have a Target property that allow the setup/cleanup method to be run for one or more specific benchmark methods. Source code using System; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { [SimpleJob(RunStrategy.Monitoring, launchCount: 0, warmupCount: 0, targetCount: 1)] public class IntroSetupCleanupTarget { [GlobalSetup(Target = nameof(BenchmarkA))] public void GlobalSetupA() => Console.WriteLine(\"// \" + \"GlobalSetup A\"); [Benchmark] public void BenchmarkA() => Console.WriteLine(\"// \" + \"Benchmark A\"); [GlobalSetup(Target = nameof(BenchmarkB) + \",\" + nameof(BenchmarkC))] public void GlobalSetupB() => Console.WriteLine(\"// \" + \"GlobalSetup B\"); [Benchmark] public void BenchmarkB() => Console.WriteLine(\"// \" + \"Benchmark B\"); [Benchmark] public void BenchmarkC() => Console.WriteLine(\"// \" + \"Benchmark C\"); [Benchmark] public void BenchmarkD() => Console.WriteLine(\"// \" + \"Benchmark D\"); } } THe order of method calls // GlobalSetup A // Benchmark A // GlobalSetup B // Benchmark B // GlobalSetup B // Benchmark C // Benchmark D See also Setup And Cleanup The link to this sample: Sample: IntroSetupCleanupTarget"
  },
  "articles/features/statistics.html": {
    "href": "articles/features/statistics.html",
    "title": "Statistics | BenchmarkDotNet",
    "keywords": "Statistics Sample: IntroStatisticsColumns Source code using System; using System.Security.Cryptography; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { [MediumRunJob, SkewnessColumn, KurtosisColumn, WelchTTestPValueColumn] public class IntroStatisticsColumns { private const int N = 10000; private readonly byte[] data; private readonly MD5 md5 = MD5.Create(); private readonly SHA256 sha256 = SHA256.Create(); public IntroStatisticsColumns() { data = new byte[N]; new Random(42).NextBytes(data); } [Benchmark(Baseline = true)] public byte[] Md5A() => md5.ComputeHash(data); [Benchmark] public byte[] Md5B() => md5.ComputeHash(data); [Benchmark] public byte[] Sha256() => sha256.ComputeHash(data); } } Output Method Mean Error StdDev Skewness Kurtosis Scaled ScaledSD t-test p-value Md5A 15.91 us 0.0807 us 0.1209 us 0.4067 1.646 1.00 0.00 1.0000 Md5B 15.89 us 0.0709 us 0.1062 us 0.5893 2.141 1.00 0.01 0.5426 Sha256 36.62 us 0.6390 us 0.9564 us 1.1363 4.014 2.30 0.06 0.0000 See also Statistics The link to this sample: Sample: IntroStatisticsColumns Sample: IntroPercentiles The percentile represents a higher boundary for specified percentage of the measurements. For example, 95th percentile = 500ms means that 95% of all samples are not slower than 500ms. This metric is not very useful in microbenchmarks, as the values from consequent runs have a very narrow distribution. However, real-world scenarios often have so-called long tail distribution (due to IO delays, locks, memory access latency and so on), so the average execution time cannot be trusted. The percentiles allow to include the tail of distribution into the comparison. However, it requires some preparations steps. At first, you should have enough runs to count percentiles from. The TargetCount in the config should be set to 10-20 runs at least. Second, the count of iterations for each run should not be very high, or the peak timings will be averaged. The IterationTime = 25 works fine for most cases; for long-running benchmarks the Mode = Mode.SingleRun will be the best choice. However, feel free to experiment with the config values. Third, if you want to be sure that measurements are repeatable, set the LaunchCount to 3 or higher. And last, don't forget to include the columns into the config. They are not included by default (as said above, these are not too useful for most of the benchmarks). There're predefined StatisticColumn.P0 .. StatisticColumn.P100 for absolute timing percentiles and BaselineDiffColumn.Scaled50 .. BaselineDiffColumn.Scaled95 for relative percentiles. Example Run the IntroPercentiles sample. It contains three benchmark methods. First delays for 20 ms constantly. The second has random delays for 10..30 ms. And the third delays for 10ms 85 times of 100 and delays for 40ms 15 times of 100. Here's the output from the benchmark (some columns removed for brevity): Method Median StdDev Scaled P0 P50 P80 P85 P95 P100 ScaledP50 ScaledP85 ScaledP95 ConstantDelays 20.3813 ms 0.2051 ms 1.00 20.0272 ms 20.3813 ms 20.4895 ms 20.4954 ms 20.5869 ms 21.1471 ms 1.00 1.00 1.00 RandomDelays 19.8055 ms 5.7556 ms 0.97 10.0793 ms 19.8055 ms 25.4173 ms 26.5187 ms 29.0313 ms 29.4550 ms 0.97 1.29 1.41 RareDelays 10.3385 ms 11.4828 ms 0.51 10.0157 ms 10.3385 ms 10.5211 ms 40.0560 ms 40.3992 ms 40.4674 ms 0.51 1.95 1.96 Note that the 'Scaled' column kinda lies to you. The \"almost same\" RandomDelays method is actually not so performant and the seems-to-be-fastest RareDelays method is 2 times slower 15 times of 100. Also, it's very easy to screw the results with incorrect setup. For example, the same code being run with new Job { TargetCount = 5, IterationTime = 500 } completely hides the peak values: Method Median StdDev Scaled P0 P50 P80 P85 P95 P100 ScaledP50 ScaledP85 ScaledP95 ConstantDelays 20.2692 ms 0.0308 ms 1.00 20.1986 ms 20.2692 ms 20.2843 ms 20.2968 ms 20.3097 ms 20.3122 ms 1.00 1.00 1.00 RandomDelays 18.9965 ms 0.8601 ms 0.94 18.1339 ms 18.9965 ms 19.8126 ms 19.8278 ms 20.4485 ms 20.9466 ms 0.94 0.98 1.01 RareDelays 14.0912 ms 2.8619 ms 0.70 10.2606 ms 14.0912 ms 15.7653 ms 17.3862 ms 18.6728 ms 18.6940 ms 0.70 0.86 0.92 Source code using System; using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Columns; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { // Using percentiles for adequate timings representation [Config(typeof(Config))] [SimpleJob(RunStrategy.ColdStart, launchCount: 4, warmupCount: 3, targetCount: 20, id: \"MyJob\")] public class IntroPercentiles { // To share between runs. // DO NOT do this in production code. The System.Random IS NOT threadsafe. private static readonly Random Rnd = new Random(); private class Config : ManualConfig { public Config() { Add(StatisticColumn.P0, StatisticColumn.P25, StatisticColumn.P50, StatisticColumn.P67, StatisticColumn.P80, StatisticColumn.P85, StatisticColumn.P90, StatisticColumn.P95, StatisticColumn.P100); } } [Benchmark(Baseline = true)] public void ConstantDelays() => Thread.Sleep(20); [Benchmark] public void RandomDelays() => Thread.Sleep(10 + (int) (20 * Rnd.NextDouble())); [Benchmark] public void RareDelays() { int rndTime = 10; // Bigger delays for 15% of the runs if (Rnd.NextDouble() > 0.85) { rndTime += 30; } Thread.Sleep(rndTime); } } } See also Statistics The link to this sample: Sample: IntroPercentiles Sample: IntroRankColumn Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Mathematics; using BenchmarkDotNet.Order; namespace BenchmarkDotNet.Samples { [ShortRunJob] [OrderProvider(SummaryOrderPolicy.FastestToSlowest)] [RankColumn(NumeralSystem.Arabic)] [RankColumn(NumeralSystem.Roman)] [RankColumn(NumeralSystem.Stars)] public class IntroRankColumn { [Params(1, 2)] public int Factor; [Benchmark] public void Foo() => Thread.Sleep(Factor * 100); [Benchmark] public void Bar() => Thread.Sleep(Factor * 200); } } Output Method | Factor | Mean | Error | StdDev | Rank | Rank | Rank | ------- |------- |---------:|---------:|----------:|-----:|-----:|-----:| Foo | 1 | 100.8 ms | 2.250 ms | 0.1272 ms | 1 | I | * | Foo | 2 | 200.8 ms | 4.674 ms | 0.2641 ms | 2 | II | ** | Bar | 1 | 200.9 ms | 2.012 ms | 0.1137 ms | 2 | II | ** | Bar | 2 | 400.7 ms | 4.509 ms | 0.2548 ms | 3 | III | *** | See also Statistics The link to this sample: Sample: IntroRankColumn Sample: IntroMultimodal Source code using System; using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { [MValueColumn] [SimpleJob(RunStrategy.Throughput, 1, 0, -1, 1, \"MainJob\")] public class IntroMultimodal { private readonly Random rnd = new Random(42); private void Multimodal(int n) => Thread.Sleep((rnd.Next(n) + 1) * 100); [Benchmark] public void Unimodal() => Multimodal(1); [Benchmark] public void Bimodal() => Multimodal(2); [Benchmark] public void Trimodal() => Multimodal(3); [Benchmark] public void Quadrimodal() => Multimodal(4); } } Output Method | Mean | Error | StdDev | Median | MValue | ------------ |---------:|-----------:|------------:|---------:|-------:| Unimodal | 100.5 ms | 0.0713 ms | 0.0667 ms | 100.5 ms | 2.000 | Bimodal | 144.5 ms | 16.9165 ms | 49.8787 ms | 100.6 ms | 3.571 | Trimodal | 182.5 ms | 27.4285 ms | 80.8734 ms | 200.5 ms | 4.651 | Quadrimodal | 226.6 ms | 37.2269 ms | 109.7644 ms | 200.7 ms | 5.882 | // * Warnings * MultimodalDistribution IntroMultimodal.Bimodal: MainJob -> It seems that the distribution is bimodal (mValue = 3.57) IntroMultimodal.Trimodal: MainJob -> It seems that the distribution is multimodal (mValue = 4.65) IntroMultimodal.Quadrimodal: MainJob -> It seems that the distribution is multimodal (mValue = 5.88) See also Statistics The link to this sample: Sample: IntroMultimodal Sample: IntroOutliers Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; using BenchmarkDotNet.Mathematics; namespace BenchmarkDotNet.Samples { [Config(typeof(Config))] public class IntroOutliers { private class Config : ManualConfig { public Config() { var jobBase = Job.Default.WithWarmupCount(0).WithTargetCount(10).WithInvocationCount(1).WithUnrollFactor(1); Add(jobBase.WithOutlierMode(OutlierMode.None).WithId(\"DontRemoveOutliers\")); Add(jobBase.WithOutlierMode(OutlierMode.OnlyUpper).WithId(\"RemoveUpperOutliers\")); } } private int counter = 0; [Benchmark] public void Foo() { counter++; int noise = counter % 10 == 0 ? 500 : 0; Thread.Sleep(100 + noise); } } } Output Method | Job | OutlierMode | Mean | Error | StdDev | ------- |-------------------- |------------ |---------:|------------:|------------:| Foo | DontRemoveOutliers | None | 150.5 ms | 239.1911 ms | 158.2101 ms | Foo | RemoveUpperOutliers | OnlyUpper | 100.5 ms | 0.1931 ms | 0.1149 ms | // * Hints * Outliers IntroOutliers.Foo: DontRemoveOutliers -> 1 outlier was detected IntroOutliers.Foo: RemoveUpperOutliers -> 1 outlier was removed See also Statistics The link to this sample: Sample: IntroOutliers"
  },
  "api/BenchmarkDotNet.Analysers.ConclusionKind.html": {
    "href": "api/BenchmarkDotNet.Analysers.ConclusionKind.html",
    "title": "Enum ConclusionKind | BenchmarkDotNet",
    "keywords": "Enum ConclusionKind Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public enum ConclusionKind Fields Name Description Error Hint Warning"
  },
  "api/BenchmarkDotNet.Analysers.OutliersAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.OutliersAnalyser.html",
    "title": "Class OutliersAnalyser | BenchmarkDotNet",
    "keywords": "Class OutliersAnalyser Inheritance System.Object AnalyserBase OutliersAnalyser Implements IAnalyser Inherited Members AnalyserBase.Analyse(Summary) AnalyserBase.AnalyseSummary(Summary) AnalyserBase.CreateHint(String, BenchmarkReport) AnalyserBase.CreateWarning(String, BenchmarkReport) AnalyserBase.CreateError(String, BenchmarkReport) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class OutliersAnalyser : AnalyserBase, IAnalyser Fields Default Declaration public static readonly IAnalyser Default Field Value Type Description IAnalyser Properties Id Declaration public override string Id { get; } Property Value Type Description System.String Overrides AnalyserBase.Id Methods AnalyseReport(BenchmarkReport, Summary) Declaration public override IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseReport(BenchmarkReport, Summary) GetMessage(Int32, Int32) Returns a nice message which can be displayed in the summary. Declaration public static string GetMessage(int actualOutliers, int allOutliers) Parameters Type Name Description System.Int32 actualOutliers Actual outliers which were removed from the statistics System.Int32 allOutliers All outliers which present in the distribution (lower and upper) Returns Type Description System.String The message Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Attributes.ArtifactsPathAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ArtifactsPathAttribute.html",
    "title": "Class ArtifactsPathAttribute | BenchmarkDotNet",
    "keywords": "Class ArtifactsPathAttribute Inheritance System.Object System.Attribute ArtifactsPathAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ArtifactsPathAttribute : Attribute, IConfigSource Constructors ArtifactsPathAttribute(String) Declaration public ArtifactsPathAttribute(string value) Parameters Type Name Description System.String value Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Value Declaration public string Value { get; } Property Value Type Description System.String Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ConfigAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ConfigAttribute.html",
    "title": "Class ConfigAttribute | BenchmarkDotNet",
    "keywords": "Class ConfigAttribute Inheritance System.Object System.Attribute ConfigAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public class ConfigAttribute : Attribute, IConfigSource Constructors ConfigAttribute(String) Declaration public ConfigAttribute(string command) Parameters Type Name Description System.String command ConfigAttribute(Type) Declaration public ConfigAttribute(Type type) Parameters Type Name Description System.Type type Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.DryCoreRtJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.DryCoreRtJobAttribute.html",
    "title": "Class DryCoreRtJobAttribute | BenchmarkDotNet",
    "keywords": "Class DryCoreRtJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute DryCoreRtJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class DryCoreRtJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors DryCoreRtJobAttribute() Declaration public DryCoreRtJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.FilterConfigBaseAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.FilterConfigBaseAttribute.html",
    "title": "Class FilterConfigBaseAttribute | BenchmarkDotNet",
    "keywords": "Class FilterConfigBaseAttribute Inheritance System.Object System.Attribute FilterConfigBaseAttribute AllCategoriesFilterAttribute AnyCategoriesFilterAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public abstract class FilterConfigBaseAttribute : Attribute, IConfigSource Constructors FilterConfigBaseAttribute() Declaration protected FilterConfigBaseAttribute() FilterConfigBaseAttribute(IFilter[]) Declaration protected FilterConfigBaseAttribute(params IFilter[] filters) Parameters Type Name Description IFilter [] filters Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.IsBaselineColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.IsBaselineColumnAttribute.html",
    "title": "Class IsBaselineColumnAttribute | BenchmarkDotNet",
    "keywords": "Class IsBaselineColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute IsBaselineColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class IsBaselineColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors IsBaselineColumnAttribute() Declaration public IsBaselineColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.Full.html": {
    "href": "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.Full.html",
    "title": "Class JsonExporterAttribute.Full | BenchmarkDotNet",
    "keywords": "Class JsonExporterAttribute.Full Inheritance System.Object System.Attribute ExporterConfigBaseAttribute JsonExporterAttribute JsonExporterAttribute.Full Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Full : JsonExporterAttribute, IConfigSource Constructors Full() Declaration public Full() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.GitHub.html": {
    "href": "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.GitHub.html",
    "title": "Class MarkdownExporterAttribute.GitHub | BenchmarkDotNet",
    "keywords": "Class MarkdownExporterAttribute.GitHub Inheritance System.Object System.Attribute ExporterConfigBaseAttribute MarkdownExporterAttribute.GitHub Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class GitHub : ExporterConfigBaseAttribute, IConfigSource Constructors GitHub() Declaration public GitHub() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.StackOverflow.html": {
    "href": "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.StackOverflow.html",
    "title": "Class MarkdownExporterAttribute.StackOverflow | BenchmarkDotNet",
    "keywords": "Class MarkdownExporterAttribute.StackOverflow Inheritance System.Object System.Attribute ExporterConfigBaseAttribute MarkdownExporterAttribute.StackOverflow Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class StackOverflow : ExporterConfigBaseAttribute, IConfigSource Constructors StackOverflow() Declaration public StackOverflow() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.PlainExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.PlainExporterAttribute.html",
    "title": "Class PlainExporterAttribute | BenchmarkDotNet",
    "keywords": "Class PlainExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute PlainExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class PlainExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors PlainExporterAttribute() Declaration public PlainExporterAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.Q1ColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.Q1ColumnAttribute.html",
    "title": "Class Q1ColumnAttribute | BenchmarkDotNet",
    "keywords": "Class Q1ColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute Q1ColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Q1ColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors Q1ColumnAttribute() Declaration public Q1ColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.VeryLongRunJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.VeryLongRunJobAttribute.html",
    "title": "Class VeryLongRunJobAttribute | BenchmarkDotNet",
    "keywords": "Class VeryLongRunJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute VeryLongRunJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class VeryLongRunJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors VeryLongRunJobAttribute() Declaration public VeryLongRunJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.SetupAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.SetupAttribute.html",
    "title": "Class SetupAttribute | BenchmarkDotNet",
    "keywords": "Class SetupAttribute Marks method to be executed before all benchmark iterations. It's going to be executed only once, just before warm up. Inheritance System.Object System.Attribute TargetedAttribute GlobalSetupAttribute SetupAttribute Inherited Members TargetedAttribute.Target System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] [Obsolete(\"Use GlobalSetupAttribute\")] public class SetupAttribute : GlobalSetupAttribute"
  },
  "api/BenchmarkDotNet.Attributes.ShortRunJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ShortRunJobAttribute.html",
    "title": "Class ShortRunJobAttribute | BenchmarkDotNet",
    "keywords": "Class ShortRunJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute ShortRunJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ShortRunJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors ShortRunJobAttribute() Declaration public ShortRunJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Characteristics.Characteristic-1.html": {
    "href": "api/BenchmarkDotNet.Characteristics.Characteristic-1.html",
    "title": "Class Characteristic<T> | BenchmarkDotNet",
    "keywords": "Class Characteristic<T> Inheritance System.Object Characteristic Characteristic<T> Inherited Members Characteristic.EmptyValue Characteristic.Create<TOwner, T>(String) Characteristic.Create<TOwner, T>(String, T) Characteristic.Create<TOwner, T>(String, Func<CharacteristicObject, T, T>, T, Boolean) Characteristic.Id Characteristic.FullId Characteristic.IgnoreOnApply Characteristic.CharacteristicType Characteristic.DeclaringType Characteristic.HasChildCharacteristics Characteristic.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public class Characteristic<T> : Characteristic Type Parameters Name Description T Properties FallbackValue Declaration public T FallbackValue { get; } Property Value Type Description T Item[CharacteristicObject] Declaration public T this[CharacteristicObject obj] { get; set; } Parameters Type Name Description CharacteristicObject obj Property Value Type Description T Resolver Declaration public Func<CharacteristicObject, T, T> Resolver { get; } Property Value Type Description System.Func < CharacteristicObject , T, T> Extension Methods CharacteristicHelper.IsPresentableCharacteristic(Characteristic, Boolean)"
  },
  "api/BenchmarkDotNet.Characteristics.Characteristic.html": {
    "href": "api/BenchmarkDotNet.Characteristics.Characteristic.html",
    "title": "Class Characteristic | BenchmarkDotNet",
    "keywords": "Class Characteristic Inheritance System.Object Characteristic Characteristic <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public abstract class Characteristic Constructors Characteristic(String, Type, Type, Object, Boolean) Declaration protected Characteristic(string id, Type characteristicType, Type declaringType, object fallbackValue, bool ignoreOnApply) Parameters Type Name Description System.String id System.Type characteristicType System.Type declaringType System.Object fallbackValue System.Boolean ignoreOnApply Fields EmptyValue Declaration public static readonly object EmptyValue Field Value Type Description System.Object Properties CharacteristicType Declaration public Type CharacteristicType { get; } Property Value Type Description System.Type DeclaringType Declaration public Type DeclaringType { get; } Property Value Type Description System.Type FallbackValue Declaration public object FallbackValue { get; } Property Value Type Description System.Object FullId Declaration public string FullId { get; } Property Value Type Description System.String HasChildCharacteristics Declaration public bool HasChildCharacteristics { get; } Property Value Type Description System.Boolean Id Declaration public string Id { get; } Property Value Type Description System.String IgnoreOnApply Declaration public bool IgnoreOnApply { get; } Property Value Type Description System.Boolean Item[CharacteristicObject] Declaration public object this[CharacteristicObject obj] { get; set; } Parameters Type Name Description CharacteristicObject obj Property Value Type Description System.Object Methods Create<TOwner, T>(String) Declaration public static Characteristic<T> Create<TOwner, T>(string memberName) where TOwner : CharacteristicObject Parameters Type Name Description System.String memberName Returns Type Description Characteristic <T> Type Parameters Name Description TOwner T Create<TOwner, T>(String, T) Declaration public static Characteristic<T> Create<TOwner, T>(string memberName, T fallbackValue) where TOwner : CharacteristicObject Parameters Type Name Description System.String memberName T fallbackValue Returns Type Description Characteristic <T> Type Parameters Name Description TOwner T Create<TOwner, T>(String, Func<CharacteristicObject, T, T>, T, Boolean) Declaration public static Characteristic<T> Create<TOwner, T>(string memberName, Func<CharacteristicObject, T, T> resolver, T fallbackValue, bool ignoreOnApply) where TOwner : CharacteristicObject Parameters Type Name Description System.String memberName System.Func < CharacteristicObject , T, T> resolver T fallbackValue System.Boolean ignoreOnApply Returns Type Description Characteristic <T> Type Parameters Name Description TOwner T ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods CharacteristicHelper.IsPresentableCharacteristic(Characteristic, Boolean)"
  },
  "api/BenchmarkDotNet.Columns.BaselineScaledColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.BaselineScaledColumn.html",
    "title": "Class BaselineScaledColumn | BenchmarkDotNet",
    "keywords": "Class BaselineScaledColumn Inheritance System.Object BaselineScaledColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class BaselineScaledColumn : IColumn Fields Scaled Declaration public static readonly IColumn Scaled Field Value Type Description IColumn ScaledStdDev Declaration public static readonly IColumn ScaledStdDev Field Value Type Description IColumn WelchTTestPValue Declaration public static readonly IColumn WelchTTestPValue Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Kind Declaration public BaselineScaledColumn.DiffKind Kind { get; } Property Value Type Description BaselineScaledColumn.DiffKind Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean IsNonBaselinesPrecise(Summary, Statistics, Benchmark) Declaration public bool IsNonBaselinesPrecise(Summary summary, Statistics baselineStat, Benchmark benchmark) Parameters Type Name Description Summary summary Statistics baselineStat Benchmark benchmark Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Columns.CategoriesColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.CategoriesColumn.html",
    "title": "Class CategoriesColumn | BenchmarkDotNet",
    "keywords": "Class CategoriesColumn Inheritance System.Object CategoriesColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class CategoriesColumn : IColumn Fields Default Declaration public static readonly IColumn Default Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Columns.StatisticColumn.Priority.html": {
    "href": "api/BenchmarkDotNet.Columns.StatisticColumn.Priority.html",
    "title": "Enum StatisticColumn.Priority | BenchmarkDotNet",
    "keywords": "Enum StatisticColumn.Priority Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public enum Priority Fields Name Description Additional Main Percentiles Quartile"
  },
  "api/BenchmarkDotNet.Columns.StatisticColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.StatisticColumn.html",
    "title": "Class StatisticColumn | BenchmarkDotNet",
    "keywords": "Class StatisticColumn Inheritance System.Object StatisticColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class StatisticColumn : IColumn Fields AllStatistics Declaration public static readonly IColumn[] AllStatistics Field Value Type Description IColumn [] Error Declaration public static readonly IColumn Error Field Value Type Description IColumn Iterations Declaration public static readonly IColumn Iterations Field Value Type Description IColumn Kurtosis Declaration public static readonly IColumn Kurtosis Field Value Type Description IColumn Max Declaration public static readonly IColumn Max Field Value Type Description IColumn Mean Declaration public static readonly IColumn Mean Field Value Type Description IColumn Median Declaration public static readonly IColumn Median Field Value Type Description IColumn Min Declaration public static readonly IColumn Min Field Value Type Description IColumn MValue See http://www.brendangregg.com/FrequencyTrails/modes.html Declaration public static readonly IColumn MValue Field Value Type Description IColumn OperationsPerSecond Declaration public static readonly IColumn OperationsPerSecond Field Value Type Description IColumn P0 Declaration public static readonly IColumn P0 Field Value Type Description IColumn P100 Declaration public static readonly IColumn P100 Field Value Type Description IColumn P25 Declaration public static readonly IColumn P25 Field Value Type Description IColumn P50 Declaration public static readonly IColumn P50 Field Value Type Description IColumn P67 Declaration public static readonly IColumn P67 Field Value Type Description IColumn P80 Declaration public static readonly IColumn P80 Field Value Type Description IColumn P85 Declaration public static readonly IColumn P85 Field Value Type Description IColumn P90 Declaration public static readonly IColumn P90 Field Value Type Description IColumn P95 Declaration public static readonly IColumn P95 Field Value Type Description IColumn Q1 Declaration public static readonly IColumn Q1 Field Value Type Description IColumn Q3 Declaration public static readonly IColumn Q3 Field Value Type Description IColumn Skewness Declaration public static readonly IColumn Skewness Field Value Type Description IColumn StdDev Declaration public static readonly IColumn StdDev Field Value Type Description IColumn StdErr Declaration public static readonly IColumn StdErr Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods CiError(ConfidenceLevel) Declaration public static IColumn CiError(ConfidenceLevel level) Parameters Type Name Description ConfidenceLevel level Returns Type Description IColumn CiLower(ConfidenceLevel) Declaration public static IColumn CiLower(ConfidenceLevel level) Parameters Type Name Description ConfidenceLevel level Returns Type Description IColumn CiUpper(ConfidenceLevel) Declaration public static IColumn CiUpper(ConfidenceLevel level) Parameters Type Name Description ConfidenceLevel level Returns Type Description IColumn GetBestAmountOfDecimalDigits(Double) Declaration public static int GetBestAmountOfDecimalDigits(double value) Parameters Type Name Description System.Double value Returns Type Description System.Int32 GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Diagnosers.Asm.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.Asm.html",
    "title": "Class Asm | BenchmarkDotNet",
    "keywords": "Class Asm Inheritance System.Object Code Asm Inherited Members Code.TextRepresentation Code.Comment System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class Asm : Code Properties EndAddress The native end offset of this ASM representation Declaration public ulong EndAddress { get; set; } Property Value Type Description System.UInt64 StartAddress The native start offset of this ASM representation Declaration public ulong StartAddress { get; set; } Property Value Type Description System.UInt64"
  },
  "api/BenchmarkDotNet.Diagnosers.Code.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.Code.html",
    "title": "Class Code | BenchmarkDotNet",
    "keywords": "Class Code Inheritance System.Object Code Asm IL Sharp Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class Code Properties Comment Declaration public string Comment { get; set; } Property Value Type Description System.String TextRepresentation Declaration public string TextRepresentation { get; set; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Diagnosers.Map.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.Map.html",
    "title": "Class Map | BenchmarkDotNet",
    "keywords": "Class Map Inheritance System.Object Map Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class Map Properties Instructions Declaration public Code[] Instructions { get; set; } Property Value Type Description Code []"
  },
  "api/BenchmarkDotNet.Diagnosers.MemoryDiagnoser.AllocationColumn.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.MemoryDiagnoser.AllocationColumn.html",
    "title": "Class MemoryDiagnoser.AllocationColumn | BenchmarkDotNet",
    "keywords": "Class MemoryDiagnoser.AllocationColumn Inheritance System.Object MemoryDiagnoser.AllocationColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class AllocationColumn : IColumn Constructors AllocationColumn(Dictionary<Benchmark, GcStats>) Declaration public AllocationColumn(Dictionary<Benchmark, GcStats> results) Parameters Type Name Description System.Collections.Generic.Dictionary < Benchmark , GcStats > results Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Engines.EngineParameters.html": {
    "href": "api/BenchmarkDotNet.Engines.EngineParameters.html",
    "title": "Class EngineParameters | BenchmarkDotNet",
    "keywords": "Class EngineParameters Inheritance System.Object EngineParameters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class EngineParameters Fields DefaultResolver Declaration public static readonly IResolver DefaultResolver Field Value Type Description IResolver Properties Dummy1Action Declaration public Action Dummy1Action { get; set; } Property Value Type Description System.Action Dummy2Action Declaration public Action Dummy2Action { get; set; } Property Value Type Description System.Action Dummy3Action Declaration public Action Dummy3Action { get; set; } Property Value Type Description System.Action Encoding Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding GlobalCleanupAction Declaration public Action GlobalCleanupAction { get; set; } Property Value Type Description System.Action GlobalSetupAction Declaration public Action GlobalSetupAction { get; set; } Property Value Type Description System.Action HasInvocationCount Declaration public bool HasInvocationCount { get; } Property Value Type Description System.Boolean HasUnrollFactor Declaration public bool HasUnrollFactor { get; } Property Value Type Description System.Boolean Host Declaration public IHost Host { get; set; } Property Value Type Description IHost IdleActionNoUnroll Declaration public Action<long> IdleActionNoUnroll { get; set; } Property Value Type Description System.Action < System.Int64 > IdleActionUnroll Declaration public Action<long> IdleActionUnroll { get; set; } Property Value Type Description System.Action < System.Int64 > IterationCleanupAction Declaration public Action IterationCleanupAction { get; set; } Property Value Type Description System.Action IterationSetupAction Declaration public Action IterationSetupAction { get; set; } Property Value Type Description System.Action IterationTime Declaration public TimeInterval IterationTime { get; } Property Value Type Description TimeInterval MainActionNoUnroll Declaration public Action<long> MainActionNoUnroll { get; set; } Property Value Type Description System.Action < System.Int64 > MainActionUnroll Declaration public Action<long> MainActionUnroll { get; set; } Property Value Type Description System.Action < System.Int64 > MeasureGcStats Declaration public bool MeasureGcStats { get; set; } Property Value Type Description System.Boolean NeedsJitting Declaration public bool NeedsJitting { get; } Property Value Type Description System.Boolean OperationsPerInvoke Declaration public long OperationsPerInvoke { get; set; } Property Value Type Description System.Int64 TargetJob Declaration public Job TargetJob { get; set; } Property Value Type Description Job UnrollFactor Declaration public int UnrollFactor { get; } Property Value Type Description System.Int32"
  },
  "api/BenchmarkDotNet.Engines.EngineResolver.html": {
    "href": "api/BenchmarkDotNet.Engines.EngineResolver.html",
    "title": "Class EngineResolver | BenchmarkDotNet",
    "keywords": "Class EngineResolver Inheritance System.Object Resolver EngineResolver Implements IResolver Inherited Members Resolver.Register<T>(Characteristic<T>, Func<T>) Resolver.Register<T>(Characteristic<T>, Func<CharacteristicObject, T>) Resolver.CanResolve(Characteristic) Resolver.Resolve(CharacteristicObject, Characteristic) Resolver.Resolve<T>(CharacteristicObject, Characteristic<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class EngineResolver : Resolver, IResolver Fields Instance Declaration public static readonly IResolver Instance Field Value Type Description IResolver Implements IResolver"
  },
  "api/BenchmarkDotNet.Environments.Platform.html": {
    "href": "api/BenchmarkDotNet.Environments.Platform.html",
    "title": "Enum Platform | BenchmarkDotNet",
    "keywords": "Enum Platform Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public enum Platform Fields Name Description AnyCpu AnyCPU X64 x64 X86 x86 Extension Methods ConfigurationExtensions.ToConfig()"
  },
  "api/BenchmarkDotNet.Environments.ProcessorBrandStringHelper.html": {
    "href": "api/BenchmarkDotNet.Environments.ProcessorBrandStringHelper.html",
    "title": "Class ProcessorBrandStringHelper | BenchmarkDotNet",
    "keywords": "Class ProcessorBrandStringHelper Inheritance System.Object ProcessorBrandStringHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public static class ProcessorBrandStringHelper Methods Prettify(String) Transform a processor brand string to a nice form for summary. Declaration public static string Prettify(string processorName) Parameters Type Name Description System.String processorName Original processor brand string Returns Type Description System.String Prettified version"
  },
  "api/BenchmarkDotNet.Portability.Cpu.html": {
    "href": "api/BenchmarkDotNet.Portability.Cpu.html",
    "title": "Namespace BenchmarkDotNet.Portability.Cpu | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Portability.Cpu Classes CpuInfo CpuInfoFormatter"
  },
  "api/BenchmarkDotNet.Running.BuildPartition.html": {
    "href": "api/BenchmarkDotNet.Running.BuildPartition.html",
    "title": "Class BuildPartition | BenchmarkDotNet",
    "keywords": "Class BuildPartition Inheritance System.Object BuildPartition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class BuildPartition Constructors BuildPartition(BenchmarkBuildInfo[], IResolver) Declaration public BuildPartition(BenchmarkBuildInfo[] benchmarks, IResolver resolver) Parameters Type Name Description BenchmarkBuildInfo [] benchmarks IResolver resolver Properties AssemblyLocation Declaration public string AssemblyLocation { get; } Property Value Type Description System.String Benchmarks Declaration public BenchmarkBuildInfo[] Benchmarks { get; } Property Value Type Description BenchmarkBuildInfo [] BuildConfiguration Declaration public string BuildConfiguration { get; } Property Value Type Description System.String IsCoreRT Declaration public bool IsCoreRT { get; } Property Value Type Description System.Boolean Jit Declaration public Jit Jit { get; } Property Value Type Description Jit Platform Declaration public Platform Platform { get; } Property Value Type Description Platform ProgramName Declaration public string ProgramName { get; } Property Value Type Description System.String RepresentativeBenchmark the benchmarks are groupped by the build settings so you can use this benchmark to get the runtime settings Declaration public Benchmark RepresentativeBenchmark { get; } Property Value Type Description Benchmark Resolver Declaration public IResolver Resolver { get; } Property Value Type Description IResolver Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Running.Target.html": {
    "href": "api/BenchmarkDotNet.Running.Target.html",
    "title": "Class Target | BenchmarkDotNet",
    "keywords": "Class Target Inheritance System.Object Target Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class Target Constructors Target(Type, MethodInfo, MethodInfo, MethodInfo, MethodInfo, MethodInfo, String, String, Boolean, String[], Int32, Int32) Declaration public Target(Type type, MethodInfo method, MethodInfo globalSetupMethod = null, MethodInfo globalCleanupMethod = null, MethodInfo iterationSetupMethod = null, MethodInfo iterationCleanupMethod = null, string description = null, string additionalLogic = null, bool baseline = false, string[] categories = null, int operationsPerInvoke = 1, int methodIndex = 0) Parameters Type Name Description System.Type type System.Reflection.MethodInfo method System.Reflection.MethodInfo globalSetupMethod System.Reflection.MethodInfo globalCleanupMethod System.Reflection.MethodInfo iterationSetupMethod System.Reflection.MethodInfo iterationCleanupMethod System.String description System.String additionalLogic System.Boolean baseline System.String [] categories System.Int32 operationsPerInvoke System.Int32 methodIndex Properties AdditionalLogic Declaration public string AdditionalLogic { get; } Property Value Type Description System.String Baseline Declaration public bool Baseline { get; } Property Value Type Description System.Boolean Categories Declaration public string[] Categories { get; } Property Value Type Description System.String [] DisplayInfo Declaration public string DisplayInfo { get; } Property Value Type Description System.String FolderInfo Declaration public string FolderInfo { get; } Property Value Type Description System.String GlobalCleanupMethod Declaration public MethodInfo GlobalCleanupMethod { get; } Property Value Type Description System.Reflection.MethodInfo GlobalSetupMethod Declaration public MethodInfo GlobalSetupMethod { get; } Property Value Type Description System.Reflection.MethodInfo IterationCleanupMethod Declaration public MethodInfo IterationCleanupMethod { get; } Property Value Type Description System.Reflection.MethodInfo IterationSetupMethod Declaration public MethodInfo IterationSetupMethod { get; } Property Value Type Description System.Reflection.MethodInfo Method Declaration public MethodInfo Method { get; } Property Value Type Description System.Reflection.MethodInfo MethodDisplayInfo Declaration public string MethodDisplayInfo { get; } Property Value Type Description System.String MethodIndex Declaration public int MethodIndex { get; } Property Value Type Description System.Int32 OperationsPerInvoke Declaration public int OperationsPerInvoke { get; } Property Value Type Description System.Int32 Type Declaration public Type Type { get; } Property Value Type Description System.Type Methods HasCategory(String) Declaration public bool HasCategory(string category) Parameters Type Name Description System.String category Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Running.html": {
    "href": "api/BenchmarkDotNet.Running.html",
    "title": "Namespace BenchmarkDotNet.Running | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Running Classes Benchmark BenchmarkBuildInfo BenchmarkConverter BenchmarkPartitioner BenchmarkRunInfo BenchmarkRunner BenchmarkSwitcher BuildPartition Target Structs BenchmarkId represents an internal entity used to identify a benchmark within an executable with multiple benchmarks"
  },
  "api/BenchmarkDotNet.Toolchains.ArtifactsPaths.html": {
    "href": "api/BenchmarkDotNet.Toolchains.ArtifactsPaths.html",
    "title": "Class ArtifactsPaths | BenchmarkDotNet",
    "keywords": "Class ArtifactsPaths Inheritance System.Object ArtifactsPaths Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public class ArtifactsPaths Constructors ArtifactsPaths(String, String, String, String, String, String, String, String, String, String, String) Declaration public ArtifactsPaths(string rootArtifactsFolderPath, string buildArtifactsDirectoryPath, string binariesDirectoryPath, string programCodePath, string appConfigPath, string nugetConfigPath, string projectFilePath, string buildScriptFilePath, string executablePath, string programName, string packagesDirectoryName) Parameters Type Name Description System.String rootArtifactsFolderPath System.String buildArtifactsDirectoryPath System.String binariesDirectoryPath System.String programCodePath System.String appConfigPath System.String nugetConfigPath System.String projectFilePath System.String buildScriptFilePath System.String executablePath System.String programName System.String packagesDirectoryName Fields Empty Declaration public static ArtifactsPaths Empty Field Value Type Description ArtifactsPaths Properties AppConfigPath Declaration public string AppConfigPath { get; } Property Value Type Description System.String BinariesDirectoryPath Declaration public string BinariesDirectoryPath { get; } Property Value Type Description System.String BuildArtifactsDirectoryPath Declaration public string BuildArtifactsDirectoryPath { get; } Property Value Type Description System.String BuildScriptFilePath Declaration public string BuildScriptFilePath { get; } Property Value Type Description System.String ExecutablePath Declaration public string ExecutablePath { get; } Property Value Type Description System.String NuGetConfigPath Declaration public string NuGetConfigPath { get; } Property Value Type Description System.String PackagesDirectoryName Declaration public string PackagesDirectoryName { get; } Property Value Type Description System.String ProgramCodePath Declaration public string ProgramCodePath { get; } Property Value Type Description System.String ProgramName Declaration public string ProgramName { get; } Property Value Type Description System.String ProjectFilePath Declaration public string ProjectFilePath { get; } Property Value Type Description System.String RootArtifactsFolderPath Declaration public string RootArtifactsFolderPath { get; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.InProcessBuilder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.InProcessBuilder.html",
    "title": "Class InProcessBuilder | BenchmarkDotNet",
    "keywords": "Class InProcessBuilder Inheritance System.Object InProcessBuilder Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public class InProcessBuilder : IBuilder Methods Build(GenerateResult, BuildPartition, ILogger) always returns success Declaration public BuildResult Build(GenerateResult generateResult, BuildPartition buildPartition, ILogger logger) Parameters Type Name Description GenerateResult generateResult BuildPartition buildPartition ILogger logger Returns Type Description BuildResult Implements IBuilder"
  },
  "changelog/v0.10.9.html": {
    "href": "changelog/v0.10.9.html",
    "title": "BenchmarkDotNet v0.10.9 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.9 Migrate from custom build scripts to Cake (C# Make) ( #426 , #475 , thanks @Ky7m ) Target Setup methods for specific Benchmarks ( #469 , #501 , thanks @ipjohnson ) Many improvements in XmlExporter ( #476 , #488 , thanks @Teknikaali ) Add MemoryDiagnoser results to JsonExporter output ( #453 , #478 , thanks @Teknikaali ) Detect correct version of .NET Core (+ improved presentation for information about runtime) ( #448 , ed586585...ed586585 ) Fix UnauthorizedAccessException ( #380 , #390 , #490 , #491 , 8505abb5 ) Fix app.config generation ( #499 , dc6dc411 ) Fix incorrect order of IterationCleanup and Benchmark jitting ( #481 , #503 ) Fix test scripts for MacOS+zsh ( 1177c8 ) Unix-related ProcessorAffinity fixes ( #474 , 26d44411 ) Minor fixes in docs ( #465 , #467 , #473 , #480 , #483 , thanks @mtschneiders , @davkean , @aarondandy , @AmadeusW ) Temporary hacks for appveyor connectivity incident ( #497 , #506 ) Additional warnings for incorrect Configs ( #482 , eb84825f ) Additional warnings for F# methods with spaces ( #479 , 3c2c8dec , 7ba1c809 , 3ca39afe ) Milestone details In the v0.10.9 scope, 13 issues were resolved and 14 pull requests where merged. This release includes 37 commits by 10 contributors. Resolved issues (13) #380 Problem running benchmark due to \"could not copy\" during build (assignee: @adamsitnik ) #390 Crashing benchmark (assignee: @adamsitnik ) #426 Migrate from custom build scripts to Cake (C# Make) #448 Detect correct version of .NET Core (assignee: @AndreyAkinshin ) #453 MemoryDiagnoser and JsonExporter #469 [Suggestion] Specify Setup per benchmark (assignee: @AndreyAkinshin ) #474 PlatformNotSupportedException when reading ProcessorAffinity on non-Windows platforms (assignee: @AndreyAkinshin ) #479 Invalid C# code generated for valid F# identifiers (assignee: @adamsitnik ) #481 Iteration cleanup runs before the benchmark (assignee: @AndreyAkinshin ) #482 Benchmark seems to hang when no logger is defined (assignee: @adamsitnik ) #490 BDN.Generated.exe is locking files when killed with ctrl+c (assignee: @adamsitnik ) #491 UnauthorizedAccessException preventing report to be written (assignee: @adamsitnik ) #499 Opting into app-compat switches in a benchmark doesn't work (assignee: @adamsitnik ) Merged pull requests (14) #465 Small correction in Filters.md (by @mtschneiders ) #467 Small improvements to FAQ.md (by @mtschneiders ) #471 Corrected typos in Filters.md and IntroFilters.cs (by @mtschneiders ) #473 Adds ISummaryStyle information to the Exporters guide (by @AmadeusW ) #475 Cake (C# Make) integration. Migration from custom build scripts. (by @Ky7m ) #476 Improve Xml exporter's discoverability (by @Teknikaali ) #478 Add MemoryDiagnoser results to JsonExporter output (by @Teknikaali ) #480 Fix links to Overview/FAQ (by @davkean ) #483 Update jobs docs (by @aarondandy ) #488 Improve XmlExporter (by @Teknikaali ) #497 Add temporary solution to address connectivity issues to nuget.org (by @Ky7m ) #501 Target Setup methods for specific Benchmarks (by @ipjohnson ) #503 Make sure IterationCleanup is run after Jitting (by @smitpatel ) #506 Removes a temporary solution related to connectivity issues to nuget (by @Ky7m ) Commits (37) 0b5657 Small correction in comments (by @mtschneiders ) b1ad2c Merge pull request #465 from mtschneiders/patch-1 (by @adamsitnik ) 3bb154 Small corrections to FAQ.md (by @mtschneiders ) 1a8559 Merge pull request #467 from mtschneiders/patch-2 (by @adamsitnik ) fc4dfe Corrected typos in Filters.md and IntroFilters.cs (by @mtschneiders ) cb5072 Remove UpgradeLog.htm (by @AndreyAkinshin ) 7013bd Adds ISummaryStyle information to the Exporters guide (by @AmadeusW ) 345af7 wording (by @AmadeusW ) a114ea Merge pull request #473 from AmadeusW/docs/exporters (by @adamsitnik ) 26d444 Unix-related ProcessorAffinity fixes (fix #474) (by @AndreyAkinshin ) 2d8a53 Improve Xml exporter's discoverability (#476) (by @Teknikaali ) baebf9 Add MemoryDiagnoser results to JsonExporter output (#478) (by @Teknikaali ) 32993c Fix links to Overview/FAQ (by @davkean ) 8e712c Merge pull request #480 from davkean/FixLinks (by @adamsitnik ) 43405d Update jobs docs (by @aarondandy ) 1bacac Merge pull request #483 from aarondandy/docs-changes (by @adamsitnik ) 3c2c8d print nice error for F# methods that contain whitespaces, fixes #479 (by @adamsitnik ) 7ba1c8 post code review #479 (by @adamsitnik ) 3ca39a even more post code review #479 (by @adamsitnik ) eb8482 warn the users if no logger, columns or exporters were defined, fixes #482 (by @adamsitnik ) 8505ab unique file names by default, are removed after printing the results, fix #49... (by @adamsitnik ) 3e74aa Improve XmlExporter (#488) (by @Teknikaali ) 6e2577 Cake (C# Make) integration. Migration from custom build scripts. (#475) (by @Ky7m ) 6e6fcc Add temporary solution to address connectivity issues to nuget.org https://ap.. . (by @Ky7m ) dc6dc4 all runtime settings, that do not belong to Job must be rewritten by default ... (by @adamsitnik ) ed5865 Rename \"dotnet cli version\" to \".NET Core SDK\", see #448 (by @AndreyAkinshin ) 857f2b Detecting the correct version of .NET Core, fixing #448 (by @AndreyAkinshin ) 7ec001 Don't print information about unknown timers in HostEnvironmentInfo (by @AndreyAkinshin ) 4c3c82 Add missing space in HostRuntimeInfo (by @AndreyAkinshin ) da8226 Print actual information about .NET Framework version in summary, see #448 (by @AndreyAkinshin ) cea199 Fix MultipleRuntimesTest.SingleBenchmarkCanBeExecutedForMultpleRuntimes (by @AndreyAkinshin ) db56bc Make sure IterationCleanup is run after Jitting (by @smitpatel ) 3df90f Merge pull request #503 from smitpatel/orderingissue (by @adamsitnik ) 1177c8 Improve tests/runCoreTests.sh (by @AndreyAkinshin ) 976900 Removes a temporary solution related to connectivity issues to nuget.org http... (by @Ky7m ) 557246 Target Setup methods for specific Benchmarks (#501) (by @ipjohnson ) 80d70a Set library version: 0.10.9 (by @AndreyAkinshin ) Contributors (10) Aaron Dandy ( @aarondandy ) Adam Sitnik ( @adamsitnik ) Amadeusz Wieczorek ( @AmadeusW ) Andrey Akinshin ( @AndreyAkinshin ) Anssi Kettunen ( @Teknikaali ) David Kean ( @davkean ) Ian Johnson ( @ipjohnson ) Igor Fesenko ( @Ky7m ) Mateus Artur Schneiders ( @mtschneiders ) Smit Patel ( @smitpatel ) Thank you very much! Additional details Date: July 28, 2017 Milestone: v0.10.9 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.9 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.9 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.9 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.9"
  },
  "changelog/v0.11.0.html": {
    "href": "changelog/v0.11.0.html",
    "title": "BenchmarkDotNet v0.11.0 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.11.0"
  },
  "changelog/v0.7.0.html": {
    "href": "changelog/v0.7.0.html",
    "title": "BenchmarkDotNet v0.7.0 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.7.0 Milestone details In the v0.7.0 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 59 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (59) 7f1c49 Add ShiftVsMultiplyBenchmark (by @AndreyAkinshin ) 21298c Renaming (by @AndreyAkinshin ) 86aada Add ReverseSortProgram (by @AndreyAkinshin ) 5830ef Add MakeRefVsBoxingProgram (by @AndreyAkinshin ) fe121e Automatic adjustment WarmUpIterationCount (by @AndreyAkinshin ) d3dd9c Improved console output (by @AndreyAkinshin ) 5e5df2 Update IncrementProgram (by @AndreyAkinshin ) dca61d Change Average statistic to Median (by @AndreyAkinshin ) 9d57e6 Update README.md (by @AndreyAkinshin ) 7cca77 StaticFieldProgram -> ArrayIterationProgram (by @AndreyAkinshin ) e02906 Add ForeachArray and ForeachList programs (by @AndreyAkinshin ) 8e3f6e Add StandardDeviation calculation (by @AndreyAkinshin ) 8b0c50 Add BenchmarkSettings singleton with DetailedMode property (by @AndreyAkinshin ) eae5bf Add useful arguments for console application (by @AndreyAkinshin ) 6f15f0 Update README.md (by @AndreyAkinshin ) c1c44b Add StackFrameProgram (by @AndreyAkinshin ) bbc6e7 Update StackFrameProgram (by @AndreyAkinshin ) 5f8121 Set version number and add NuGet package metadata (by @AndreyAkinshin ) 9425cb Add ProcessorAffinity to settings (by @AndreyAkinshin ) bcc037 Add single result benchmark mode (--single) and disable warmup mode (--disabl... (by @AndreyAkinshin ) 4ce0b4 Add build.bat for Benchmarks project (by @AndreyAkinshin ) 69fbc7 Add --output-file option (by @AndreyAkinshin ) df2092 Update build system (by @AndreyAkinshin ) addd25 Update run.bat (by @AndreyAkinshin ) b5c154 Add Mono support to run.bat (by @AndreyAkinshin ) a4b42a Update build system (by @AndreyAkinshin ) 65bbf7 Benchmarks: add support of selecting target program via number (by @AndreyAkinshin ) d4317b Add MedianTicks to CompetitionResult report in DetailedMode fixed #1 (by @AndreyAkinshin ) 3999e0 Update README.md (by @AndreyAkinshin ) bd7452 Update EnvironmentTickCount hack (by @AndreyAkinshin ) cf7aa6 Add CultureInfo setting (by @AndreyAkinshin ) 16bb5e Set BenchmarkDotNet version: 0.5.1 (by @AndreyAkinshin ) 07cf52 Add CompetitionBase: now competitions can be created in form of unit tests. (by @mijay ) 284b78 Full refactoring (by @AndreyAkinshin ) 2943d9 Add BenchmarkDotNet.Samples project (by @AndreyAkinshin ) 572483 Merge branch 'dev' (by @AndreyAkinshin ) 324d99 Remove ReflectionVsExpressionCompetition (by @AndreyAkinshin ) ce5c67 Add CacheConsiousBinarySearchCompetition (by @AndreyAkinshin ) ba8725 Add SelectVsConvertAllCompetition (by @AndreyAkinshin ) 60b002 Set BenchmarkDotNet version: 0.5.2 (by @AndreyAkinshin ) 3a4213 Fix in GetBenchmarkMethodClean (by @AndreyAkinshin ) 73ee56 Add BitCountCompetition (by @AndreyAkinshin ) 72836a Add missed Clean in BenchmarkCompetitionTask, Fixed #4 (by @AndreyAkinshin ) 1258cb Big refactoring (by @AndreyAkinshin ) 03bf14 Attributes renaming (by @AndreyAkinshin ) 98a3cd Improved environment info (by @AndreyAkinshin ) fe6e4e New benchmarks: ArrayBoundEliminationCompetition, InstructionLevelParallelism... (by @AndreyAkinshin ) c89054 Fix in EnvironmentHelper.GetConfiguration() (by @AndreyAkinshin ) 90d260 Add icon (by @AndreyAkinshin ) beb681 Improved WarmUp (by @AndreyAkinshin ) 7a63b6 Big refactoring (by @AndreyAkinshin ) 8197e5 Update samples (by @AndreyAkinshin ) c8d348 Add BenchmarkProperties (by @AndreyAkinshin ) 97c73a Update Cpu_InstructionLevelParallelism (by @AndreyAkinshin ) 957714 Small fixes (by @AndreyAkinshin ) fdf4dd Update README (by @AndreyAkinshin ) 8ac1ab Merge branch 'big-refactoring' (by @AndreyAkinshin ) 18a256 Small fixes (by @AndreyAkinshin ) 20df13 NuGet version: 0.7.0 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Dmitry Kononchuk ( @mijay ) Thank you very much!"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.InProcess | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.InProcess Classes BenchmarkAction Common API to run the Setup/Clean/Idle/Run methods BenchmarkActionFactory Helper class that creates BenchmarkAction instances. InProcessBuilder InProcessExecutor Implementation of IExecutor for in-process benchmarks. InProcessGenerator Implementation of IGenerator for in-process benchmarks. InProcessHost Host API for in-process benchmarks. InProcessToolchain A toolchain to run the benchmarks in-process. InProcessValidator Validator to be used together with InProcessToolchain to proof that the config matches the environment. Enums BenchmarkActionCodegen How benchmark action code is generated"
  },
  "api/BenchmarkDotNet.Toolchains.IToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.IToolchain.html",
    "title": "Interface IToolchain | BenchmarkDotNet",
    "keywords": "Interface IToolchain Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public interface IToolchain Properties Builder Declaration IBuilder Builder { get; } Property Value Type Description IBuilder Executor Declaration IExecutor Executor { get; } Property Value Type Description IExecutor Generator Declaration IGenerator Generator { get; } Property Value Type Description IGenerator Name Declaration string Name { get; } Property Value Type Description System.String Methods IsSupported(Benchmark, ILogger, IResolver) Declaration bool IsSupported(Benchmark benchmark, ILogger logger, IResolver resolver) Parameters Type Name Description Benchmark benchmark ILogger logger IResolver resolver Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Validators.ShadowCopyValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.ShadowCopyValidator.html",
    "title": "Class ShadowCopyValidator | BenchmarkDotNet",
    "keywords": "Class ShadowCopyValidator Inheritance System.Object ShadowCopyValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class ShadowCopyValidator : IValidator Fields Default Declaration public static readonly IValidator Default Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.ValidationError.html": {
    "href": "api/BenchmarkDotNet.Validators.ValidationError.html",
    "title": "Class ValidationError | BenchmarkDotNet",
    "keywords": "Class ValidationError Inheritance System.Object ValidationError Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class ValidationError Constructors ValidationError(Boolean, String, Benchmark) Declaration public ValidationError(bool isCritical, string message, Benchmark benchmark = null) Parameters Type Name Description System.Boolean isCritical System.String message Benchmark benchmark Properties Benchmark Declaration public Benchmark Benchmark { get; } Property Value Type Description Benchmark IsCritical Declaration public bool IsCritical { get; } Property Value Type Description System.Boolean Message Declaration public string Message { get; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Validators.ValidationErrorReporter.html": {
    "href": "api/BenchmarkDotNet.Validators.ValidationErrorReporter.html",
    "title": "Class ValidationErrorReporter | BenchmarkDotNet",
    "keywords": "Class ValidationErrorReporter Inheritance System.Object ValidationErrorReporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public static class ValidationErrorReporter Fields ConsoleErrorPrefix Declaration public const string ConsoleErrorPrefix = \"// ERROR: \" Field Value Type Description System.String Methods ReportIfAny(IEnumerable<ValidationError>, IHost) Declaration public static bool ReportIfAny(IEnumerable<ValidationError> validationErrors, IHost host) Parameters Type Name Description System.Collections.Generic.IEnumerable < ValidationError > validationErrors IHost host Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Validators.ValidationParameters.html": {
    "href": "api/BenchmarkDotNet.Validators.ValidationParameters.html",
    "title": "Class ValidationParameters | BenchmarkDotNet",
    "keywords": "Class ValidationParameters Inheritance System.Object ValidationParameters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class ValidationParameters Constructors ValidationParameters(IReadOnlyList<Benchmark>, IConfig) Declaration public ValidationParameters(IReadOnlyList<Benchmark> benchmarks, IConfig config) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Benchmark > benchmarks IConfig config Properties Benchmarks Declaration public IReadOnlyList<Benchmark> Benchmarks { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Benchmark > Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Operators Implicit(Benchmark[] to ValidationParameters) Declaration public static implicit operator ValidationParameters(Benchmark[] benchmarks) Parameters Type Name Description Benchmark [] benchmarks Returns Type Description ValidationParameters Implicit(BenchmarkRunInfo to ValidationParameters) Declaration public static implicit operator ValidationParameters(BenchmarkRunInfo benchmarkRunInfo) Parameters Type Name Description BenchmarkRunInfo benchmarkRunInfo Returns Type Description ValidationParameters"
  },
  "api/BenchmarkDotNet.Analysers.Conclusion.html": {
    "href": "api/BenchmarkDotNet.Analysers.Conclusion.html",
    "title": "Class Conclusion | BenchmarkDotNet",
    "keywords": "Class Conclusion Inheritance System.Object Conclusion Implements System.IEquatable < Conclusion > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public sealed class Conclusion : IEquatable<Conclusion> Properties AnalyserId Declaration public string AnalyserId { get; } Property Value Type Description System.String Kind Declaration public ConclusionKind Kind { get; } Property Value Type Description ConclusionKind Message Declaration public string Message { get; } Property Value Type Description System.String Report Declaration public BenchmarkReport Report { get; } Property Value Type Description BenchmarkReport Methods CreateError(String, String, BenchmarkReport) Declaration public static Conclusion CreateError(string analyserId, string message, BenchmarkReport report = null) Parameters Type Name Description System.String analyserId System.String message BenchmarkReport report Returns Type Description Conclusion CreateHint(String, String, BenchmarkReport) Declaration public static Conclusion CreateHint(string analyserId, string message, BenchmarkReport report = null) Parameters Type Name Description System.String analyserId System.String message BenchmarkReport report Returns Type Description Conclusion CreateWarning(String, String, BenchmarkReport) Declaration public static Conclusion CreateWarning(string analyserId, string message, BenchmarkReport report = null) Parameters Type Name Description System.String analyserId System.String message BenchmarkReport report Returns Type Description Conclusion Equals(Conclusion) Declaration public bool Equals(Conclusion other) Parameters Type Name Description Conclusion other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements System.IEquatable<T>"
  },
  "api/BenchmarkDotNet.Analysers.RuntimeErrorAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.RuntimeErrorAnalyser.html",
    "title": "Class RuntimeErrorAnalyser | BenchmarkDotNet",
    "keywords": "Class RuntimeErrorAnalyser Inheritance System.Object AnalyserBase RuntimeErrorAnalyser Implements IAnalyser Inherited Members AnalyserBase.Analyse(Summary) AnalyserBase.AnalyseSummary(Summary) AnalyserBase.CreateHint(String, BenchmarkReport) AnalyserBase.CreateWarning(String, BenchmarkReport) AnalyserBase.CreateError(String, BenchmarkReport) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class RuntimeErrorAnalyser : AnalyserBase, IAnalyser Fields Default Declaration public static readonly IAnalyser Default Field Value Type Description IAnalyser Properties Id Declaration public override string Id { get; } Property Value Type Description System.String Overrides AnalyserBase.Id Methods AnalyseReport(BenchmarkReport, Summary) Declaration public override IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseReport(BenchmarkReport, Summary) Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Attributes.CategoriesColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.CategoriesColumnAttribute.html",
    "title": "Class CategoriesColumnAttribute | BenchmarkDotNet",
    "keywords": "Class CategoriesColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute CategoriesColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class CategoriesColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors CategoriesColumnAttribute() Declaration public CategoriesColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.CsvExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.CsvExporterAttribute.html",
    "title": "Class CsvExporterAttribute | BenchmarkDotNet",
    "keywords": "Class CsvExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute CsvExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class CsvExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors CsvExporterAttribute(CsvSeparator) Declaration public CsvExporterAttribute(CsvSeparator separator = CsvSeparator.CurrentCulture) Parameters Type Name Description CsvSeparator separator Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ExporterConfigBaseAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ExporterConfigBaseAttribute.html",
    "title": "Class ExporterConfigBaseAttribute | BenchmarkDotNet",
    "keywords": "Class ExporterConfigBaseAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute AsciiDocExporterAttribute CsvExporterAttribute CsvMeasurementsExporterAttribute HtmlExporterAttribute JsonExporterAttribute MarkdownExporterAttribute MarkdownExporterAttribute.Atlassian MarkdownExporterAttribute.Default MarkdownExporterAttribute.GitHub MarkdownExporterAttribute.StackOverflow PlainExporterAttribute RPlotExporterAttribute XmlExporterAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public class ExporterConfigBaseAttribute : Attribute, IConfigSource Constructors ExporterConfigBaseAttribute() Declaration protected ExporterConfigBaseAttribute() ExporterConfigBaseAttribute(IExporter[]) Declaration protected ExporterConfigBaseAttribute(params IExporter[] exporters) Parameters Type Name Description IExporter [] exporters Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.InProcessAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.InProcessAttribute.html",
    "title": "Class InProcessAttribute | BenchmarkDotNet",
    "keywords": "Class InProcessAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute InProcessAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class InProcessAttribute : JobConfigBaseAttribute, IConfigSource Constructors InProcessAttribute(Boolean) Declaration public InProcessAttribute(bool dontLogOutput = false) Parameters Type Name Description System.Boolean dontLogOutput Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.FullCompressed.html": {
    "href": "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.FullCompressed.html",
    "title": "Class JsonExporterAttribute.FullCompressed | BenchmarkDotNet",
    "keywords": "Class JsonExporterAttribute.FullCompressed Inheritance System.Object System.Attribute ExporterConfigBaseAttribute JsonExporterAttribute JsonExporterAttribute.FullCompressed Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class FullCompressed : JsonExporterAttribute, IConfigSource Constructors FullCompressed() Declaration public FullCompressed() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.html",
    "title": "Class MarkdownExporterAttribute | BenchmarkDotNet",
    "keywords": "Class MarkdownExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute MarkdownExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MarkdownExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors MarkdownExporterAttribute() Declaration public MarkdownExporterAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MonoJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MonoJobAttribute.html",
    "title": "Class MonoJobAttribute | BenchmarkDotNet",
    "keywords": "Class MonoJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute MonoJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class MonoJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors MonoJobAttribute(Boolean) Declaration public MonoJobAttribute(bool isBaseline = false) Parameters Type Name Description System.Boolean isBaseline MonoJobAttribute(String, String, Boolean) Declaration public MonoJobAttribute(string name, string path, bool isBaseline = false) Parameters Type Name Description System.String name System.String path System.Boolean isBaseline Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MValueColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MValueColumnAttribute.html",
    "title": "Class MValueColumnAttribute | BenchmarkDotNet",
    "keywords": "Class MValueColumnAttribute Prints mvalue. See http://www.brendangregg.com/FrequencyTrails/modes.html Inheritance System.Object System.Attribute ColumnConfigBaseAttribute MValueColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MValueColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors MValueColumnAttribute() Declaration public MValueColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.SimpleJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.SimpleJobAttribute.html",
    "title": "Class SimpleJobAttribute | BenchmarkDotNet",
    "keywords": "Class SimpleJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute SimpleJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class SimpleJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors SimpleJobAttribute(RunStrategy, Int32, Int32, Int32, Int32, String, Boolean) Declaration public SimpleJobAttribute(RunStrategy runStrategy, int launchCount = -1, int warmupCount = -1, int targetCount = -1, int invocationCount = -1, string id = null, bool isBaseline = false) Parameters Type Name Description RunStrategy runStrategy System.Int32 launchCount System.Int32 warmupCount System.Int32 targetCount System.Int32 invocationCount System.String id System.Boolean isBaseline SimpleJobAttribute(Int32, Int32, Int32, Int32, String, Boolean) Declaration public SimpleJobAttribute(int launchCount = -1, int warmupCount = -1, int targetCount = -1, int invocationCount = -1, string id = null, bool isBaseline = false) Parameters Type Name Description System.Int32 launchCount System.Int32 warmupCount System.Int32 targetCount System.Int32 invocationCount System.String id System.Boolean isBaseline Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.SkewnessColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.SkewnessColumnAttribute.html",
    "title": "Class SkewnessColumnAttribute | BenchmarkDotNet",
    "keywords": "Class SkewnessColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute SkewnessColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class SkewnessColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors SkewnessColumnAttribute() Declaration public SkewnessColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Characteristics.CharacteristicHelper.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CharacteristicHelper.html",
    "title": "Class CharacteristicHelper | BenchmarkDotNet",
    "keywords": "Class CharacteristicHelper Inheritance System.Object CharacteristicHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public static class CharacteristicHelper Methods GetAllCharacteristics(CharacteristicObject) Declaration public static IReadOnlyList<Characteristic> GetAllCharacteristics(this CharacteristicObject obj) Parameters Type Name Description CharacteristicObject obj Returns Type Description System.Collections.Generic.IReadOnlyList < Characteristic > GetAllCharacteristics(Type) Declaration public static IReadOnlyList<Characteristic> GetAllCharacteristics(Type characteristicObjectType) Parameters Type Name Description System.Type characteristicObjectType Returns Type Description System.Collections.Generic.IReadOnlyList < Characteristic > GetAllPresentableCharacteristics(Type, Boolean) Declaration public static IReadOnlyList<Characteristic> GetAllPresentableCharacteristics(Type characteristicObjectType, bool includeIgnoreOnApply = false) Parameters Type Name Description System.Type characteristicObjectType System.Boolean includeIgnoreOnApply Returns Type Description System.Collections.Generic.IReadOnlyList < Characteristic > GetThisTypeCharacteristics(CharacteristicObject) Declaration public static IReadOnlyList<Characteristic> GetThisTypeCharacteristics(this CharacteristicObject obj) Parameters Type Name Description CharacteristicObject obj Returns Type Description System.Collections.Generic.IReadOnlyList < Characteristic > GetThisTypeCharacteristics(Type) Declaration public static IReadOnlyList<Characteristic> GetThisTypeCharacteristics(Type characteristicObjectType) Parameters Type Name Description System.Type characteristicObjectType Returns Type Description System.Collections.Generic.IReadOnlyList < Characteristic > IsPresentableCharacteristic(Characteristic, Boolean) Declaration public static bool IsPresentableCharacteristic(this Characteristic c, bool includeIgnoreOnApply = false) Parameters Type Name Description Characteristic c System.Boolean includeIgnoreOnApply Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Characteristics.CharacteristicObject-1.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CharacteristicObject-1.html",
    "title": "Class CharacteristicObject<T> | BenchmarkDotNet",
    "keywords": "Class CharacteristicObject<T> Inheritance System.Object CharacteristicObject CharacteristicObject<T> CharacteristicSet JobMode<T> Inherited Members CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public abstract class CharacteristicObject<T> : CharacteristicObject where T : CharacteristicObject<T>, new() Type Parameters Name Description T Constructors CharacteristicObject() Declaration protected CharacteristicObject() CharacteristicObject(String) Declaration protected CharacteristicObject(string id) Parameters Type Name Description System.String id Methods Apply(CharacteristicObject) Declaration public T Apply(CharacteristicObject other) Parameters Type Name Description CharacteristicObject other Returns Type Description T Apply(CharacteristicObject[]) Declaration public T Apply(params CharacteristicObject[] others) Parameters Type Name Description CharacteristicObject [] others Returns Type Description T ApplyAndFreeze(CharacteristicObject) Declaration public T ApplyAndFreeze(CharacteristicObject other) Parameters Type Name Description CharacteristicObject other Returns Type Description T ApplyAndFreeze(CharacteristicObject[]) Declaration public T ApplyAndFreeze(params CharacteristicObject[] others) Parameters Type Name Description CharacteristicObject [] others Returns Type Description T CreateCharacteristic<TC>(String) Declaration protected static Characteristic<TC> CreateCharacteristic<TC>(string memberName) Parameters Type Name Description System.String memberName Returns Type Description Characteristic <TC> Type Parameters Name Description TC Freeze() Declaration public T Freeze() Returns Type Description T UnfreezeCopy() Declaration public T UnfreezeCopy() Returns Type Description T Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Columns.ColumnCategory.html": {
    "href": "api/BenchmarkDotNet.Columns.ColumnCategory.html",
    "title": "Enum ColumnCategory | BenchmarkDotNet",
    "keywords": "Enum ColumnCategory Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public enum ColumnCategory Fields Name Description Baseline Custom Diagnoser Job Meta Params Statistics"
  },
  "api/BenchmarkDotNet.Columns.ColumnExtensions.html": {
    "href": "api/BenchmarkDotNet.Columns.ColumnExtensions.html",
    "title": "Class ColumnExtensions | BenchmarkDotNet",
    "keywords": "Class ColumnExtensions Inheritance System.Object ColumnExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public static class ColumnExtensions Methods ToProvider(IColumn) Declaration public static IColumnProvider ToProvider(this IColumn column) Parameters Type Name Description IColumn column Returns Type Description IColumnProvider"
  },
  "api/BenchmarkDotNet.Columns.TagColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.TagColumn.html",
    "title": "Class TagColumn | BenchmarkDotNet",
    "keywords": "Class TagColumn Inheritance System.Object TagColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class TagColumn : IColumn Constructors TagColumn(String, Func<String, String>) Declaration public TagColumn(string columnName, Func<string, string> getTag) Parameters Type Name Description System.String columnName System.Func < System.String , System.String > getTag Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Columns.TargetMethodColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.TargetMethodColumn.html",
    "title": "Class TargetMethodColumn | BenchmarkDotNet",
    "keywords": "Class TargetMethodColumn Inheritance System.Object TargetMethodColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class TargetMethodColumn : IColumn Fields Method Declaration public static readonly IColumn Method Field Value Type Description IColumn Namespace Declaration public static readonly IColumn Namespace Field Value Type Description IColumn Type Declaration public static readonly IColumn Type Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Diagnosers.CompositeDiagnoser.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.CompositeDiagnoser.html",
    "title": "Class CompositeDiagnoser | BenchmarkDotNet",
    "keywords": "Class CompositeDiagnoser Inheritance System.Object CompositeDiagnoser Implements IDiagnoser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class CompositeDiagnoser : IDiagnoser Constructors CompositeDiagnoser(IDiagnoser[]) Declaration public CompositeDiagnoser(params IDiagnoser[] diagnosers) Parameters Type Name Description IDiagnoser [] diagnosers Properties Analysers Declaration public IEnumerable<IAnalyser> Analysers { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAnalyser > Exporters Declaration public IEnumerable<IExporter> Exporters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExporter > Ids Declaration public IEnumerable<string> Ids { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Methods DisplayResults(ILogger) Declaration public void DisplayResults(ILogger logger) Parameters Type Name Description ILogger logger GetColumnProvider() Declaration public IColumnProvider GetColumnProvider() Returns Type Description IColumnProvider GetRunMode(Benchmark) Declaration public RunMode GetRunMode(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description RunMode Handle(HostSignal, DiagnoserActionParameters) Declaration public void Handle(HostSignal signal, DiagnoserActionParameters parameters) Parameters Type Name Description HostSignal signal DiagnoserActionParameters parameters ProcessResults(DiagnoserResults) Declaration public void ProcessResults(DiagnoserResults results) Parameters Type Name Description DiagnoserResults results Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IDiagnoser"
  },
  "api/BenchmarkDotNet.Diagnosers.DiagnoserActionParameters.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DiagnoserActionParameters.html",
    "title": "Class DiagnoserActionParameters | BenchmarkDotNet",
    "keywords": "Class DiagnoserActionParameters Inheritance System.Object DiagnoserActionParameters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DiagnoserActionParameters Constructors DiagnoserActionParameters(Process, Benchmark, BenchmarkId, IConfig) Declaration public DiagnoserActionParameters(Process process, Benchmark benchmark, BenchmarkId benchmarkId, IConfig config) Parameters Type Name Description System.Diagnostics.Process process Benchmark benchmark BenchmarkId benchmarkId IConfig config Properties Benchmark Declaration public Benchmark Benchmark { get; } Property Value Type Description Benchmark BenchmarkId Declaration public BenchmarkId BenchmarkId { get; } Property Value Type Description BenchmarkId Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Process Declaration public Process Process { get; } Property Value Type Description System.Diagnostics.Process"
  },
  "api/BenchmarkDotNet.Diagnosers.MemoryDiagnoser.GCCollectionColumn.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.MemoryDiagnoser.GCCollectionColumn.html",
    "title": "Class MemoryDiagnoser.GCCollectionColumn | BenchmarkDotNet",
    "keywords": "Class MemoryDiagnoser.GCCollectionColumn Inheritance System.Object MemoryDiagnoser.GCCollectionColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class GCCollectionColumn : IColumn Constructors GCCollectionColumn(Dictionary<Benchmark, GcStats>, Int32) Declaration public GCCollectionColumn(Dictionary<Benchmark, GcStats> results, int generation) Parameters Type Name Description System.Collections.Generic.Dictionary < Benchmark , GcStats > results System.Int32 generation Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Diagnosers.MemoryDiagnoser.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.MemoryDiagnoser.html",
    "title": "Class MemoryDiagnoser | BenchmarkDotNet",
    "keywords": "Class MemoryDiagnoser Inheritance System.Object MemoryDiagnoser Implements IDiagnoser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class MemoryDiagnoser : IDiagnoser Fields Default Declaration public static readonly MemoryDiagnoser Default Field Value Type Description MemoryDiagnoser DiagnoserId Declaration public const string DiagnoserId = \"MemoryDiagnoser\" Field Value Type Description System.String Properties Analysers Declaration public IEnumerable<IAnalyser> Analysers { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAnalyser > Exporters Declaration public IEnumerable<IExporter> Exporters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExporter > Ids Declaration public IEnumerable<string> Ids { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Methods DisplayResults(ILogger) Declaration public void DisplayResults(ILogger logger) Parameters Type Name Description ILogger logger GetColumnProvider() Declaration public IColumnProvider GetColumnProvider() Returns Type Description IColumnProvider GetRunMode(Benchmark) Declaration public RunMode GetRunMode(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description RunMode Handle(HostSignal, DiagnoserActionParameters) Declaration public void Handle(HostSignal signal, DiagnoserActionParameters parameters) Parameters Type Name Description HostSignal signal DiagnoserActionParameters parameters ProcessResults(DiagnoserResults) Declaration public void ProcessResults(DiagnoserResults results) Parameters Type Name Description DiagnoserResults results Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IDiagnoser"
  },
  "api/BenchmarkDotNet.Engines.EngineStage.html": {
    "href": "api/BenchmarkDotNet.Engines.EngineStage.html",
    "title": "Class EngineStage | BenchmarkDotNet",
    "keywords": "Class EngineStage Inheritance System.Object EngineStage EngineTargetStage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class EngineStage Constructors EngineStage(IEngine) Declaration protected EngineStage(IEngine engine) Parameters Type Name Description IEngine engine Properties TargetJob Declaration protected Job TargetJob { get; } Property Value Type Description Job Methods RunIteration(IterationMode, Int32, Int64, Int32) Declaration protected Measurement RunIteration(IterationMode mode, int index, long invokeCount, int unrollFactor) Parameters Type Name Description IterationMode mode System.Int32 index System.Int64 invokeCount System.Int32 unrollFactor Returns Type Description Measurement ShouldRunAuto(RunMode, Characteristic<Int32>) Declaration protected bool ShouldRunAuto(RunMode runMode, Characteristic<int> iterationCount) Parameters Type Name Description RunMode runMode Characteristic < System.Int32 > iterationCount Returns Type Description System.Boolean WriteLine() Declaration protected void WriteLine() WriteLine(String) Declaration protected void WriteLine(string line) Parameters Type Name Description System.String line"
  },
  "api/BenchmarkDotNet.Engines.EngineTargetStage.html": {
    "href": "api/BenchmarkDotNet.Engines.EngineTargetStage.html",
    "title": "Class EngineTargetStage | BenchmarkDotNet",
    "keywords": "Class EngineTargetStage Inheritance System.Object EngineStage EngineTargetStage Inherited Members EngineStage.TargetJob EngineStage.RunIteration(IterationMode, Int32, Int64, Int32) EngineStage.ShouldRunAuto(RunMode, Characteristic<Int32>) EngineStage.WriteLine() EngineStage.WriteLine(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class EngineTargetStage : EngineStage Constructors EngineTargetStage(IEngine) Declaration public EngineTargetStage(IEngine engine) Parameters Type Name Description IEngine engine Methods RunIdle(Int64, Int32) Declaration public IReadOnlyList<Measurement> RunIdle(long invokeCount, int unrollFactor) Parameters Type Name Description System.Int64 invokeCount System.Int32 unrollFactor Returns Type Description System.Collections.Generic.IReadOnlyList < Measurement > RunMain(Int64, Int32, Boolean) Declaration public IReadOnlyList<Measurement> RunMain(long invokeCount, int unrollFactor, bool forceSpecific = false) Parameters Type Name Description System.Int64 invokeCount System.Int32 unrollFactor System.Boolean forceSpecific Returns Type Description System.Collections.Generic.IReadOnlyList < Measurement >"
  },
  "api/BenchmarkDotNet.Exporters.AsciiDocExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.AsciiDocExporter.html",
    "title": "Class AsciiDocExporter | BenchmarkDotNet",
    "keywords": "Class AsciiDocExporter Inheritance System.Object ExporterBase AsciiDocExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class AsciiDocExporter : ExporterBase, IExporter Fields Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Properties FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.BenchmarkReportExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.BenchmarkReportExporter.html",
    "title": "Class BenchmarkReportExporter | BenchmarkDotNet",
    "keywords": "Class BenchmarkReportExporter Inheritance System.Object ExporterBase BenchmarkReportExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileExtension ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class BenchmarkReportExporter : ExporterBase, IExporter Fields Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Horology.html": {
    "href": "api/BenchmarkDotNet.Horology.html",
    "title": "Namespace BenchmarkDotNet.Horology | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Horology Classes Chronometer ClockExtensions FrequencyUnit TimeUnit Structs ClockSpan Frequency StartedClock TimeInterval Interfaces IClock Enums HardwareTimerKind"
  },
  "api/BenchmarkDotNet.Jobs.AccuracyMode.html": {
    "href": "api/BenchmarkDotNet.Jobs.AccuracyMode.html",
    "title": "Class AccuracyMode | BenchmarkDotNet",
    "keywords": "Class AccuracyMode Inheritance System.Object CharacteristicObject CharacteristicObject < AccuracyMode > JobMode < AccuracyMode > AccuracyMode Inherited Members JobMode<AccuracyMode>.Default JobMode<AccuracyMode>.Job CharacteristicObject<AccuracyMode>.Apply(CharacteristicObject) CharacteristicObject<AccuracyMode>.Apply(CharacteristicObject[]) CharacteristicObject<AccuracyMode>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<AccuracyMode>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<AccuracyMode>.Freeze() CharacteristicObject<AccuracyMode>.UnfreezeCopy() CharacteristicObject<AccuracyMode>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public sealed class AccuracyMode : JobMode<AccuracyMode> Fields AnalyzeLaunchVarianceCharacteristic Declaration public static readonly Characteristic<bool> AnalyzeLaunchVarianceCharacteristic Field Value Type Description Characteristic < System.Boolean > EvaluateOverheadCharacteristic Declaration public static readonly Characteristic<bool> EvaluateOverheadCharacteristic Field Value Type Description Characteristic < System.Boolean > MaxAbsoluteErrorCharacteristic Declaration public static readonly Characteristic<TimeInterval> MaxAbsoluteErrorCharacteristic Field Value Type Description Characteristic < TimeInterval > MaxRelativeErrorCharacteristic Declaration public static readonly Characteristic<double> MaxRelativeErrorCharacteristic Field Value Type Description Characteristic < System.Double > MinInvokeCountCharacteristic Declaration public static readonly Characteristic<int> MinInvokeCountCharacteristic Field Value Type Description Characteristic < System.Int32 > MinIterationTimeCharacteristic Declaration public static readonly Characteristic<TimeInterval> MinIterationTimeCharacteristic Field Value Type Description Characteristic < TimeInterval > OutlierModeCharacteristic Declaration public static readonly Characteristic<OutlierMode> OutlierModeCharacteristic Field Value Type Description Characteristic < OutlierMode > Properties AnalyzeLaunchVariance Declaration public bool AnalyzeLaunchVariance { get; set; } Property Value Type Description System.Boolean EvaluateOverhead Declaration public bool EvaluateOverhead { get; set; } Property Value Type Description System.Boolean MaxAbsoluteError Declaration public TimeInterval MaxAbsoluteError { get; set; } Property Value Type Description TimeInterval MaxRelativeError Declaration public double MaxRelativeError { get; set; } Property Value Type Description System.Double MinInvokeCount Declaration public int MinInvokeCount { get; set; } Property Value Type Description System.Int32 MinIterationTime Declaration public TimeInterval MinIterationTime { get; set; } Property Value Type Description TimeInterval OutlierMode Declaration public OutlierMode OutlierMode { get; set; } Property Value Type Description OutlierMode Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Jobs.Argument.html": {
    "href": "api/BenchmarkDotNet.Jobs.Argument.html",
    "title": "Class Argument | BenchmarkDotNet",
    "keywords": "Class Argument Inheritance System.Object Argument MonoArgument MsBuildArgument Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public abstract class Argument Properties TextRepresentation Declaration public virtual string TextRepresentation { get; protected set; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Jobs.EnvironmentVariable.html": {
    "href": "api/BenchmarkDotNet.Jobs.EnvironmentVariable.html",
    "title": "Class EnvironmentVariable | BenchmarkDotNet",
    "keywords": "Class EnvironmentVariable Inheritance System.Object EnvironmentVariable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public class EnvironmentVariable Constructors EnvironmentVariable(String, String) Declaration public EnvironmentVariable(string key, string value) Parameters Type Name Description System.String key System.String value Properties Key Declaration public string Key { get; } Property Value Type Description System.String Value Declaration public string Value { get; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.Histogram.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.Histogram.html",
    "title": "Class Histogram | BenchmarkDotNet",
    "keywords": "Class Histogram Inheritance System.Object Histogram Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public class Histogram Properties Bins Declaration public HistogramBin[] Bins { get; } Property Value Type Description HistogramBin [] BinSize Declaration public double BinSize { get; } Property Value Type Description System.Double Extension Methods HistogramExtensions.GetBinCount(Histogram) HistogramExtensions.GetAllValues(Histogram) HistogramExtensions.ToTimeStr(Histogram, TimeUnit, Char, Boolean, Encoding)"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.HistogramBin.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.HistogramBin.html",
    "title": "Class HistogramBin | BenchmarkDotNet",
    "keywords": "Class HistogramBin Inheritance System.Object HistogramBin Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public class HistogramBin Constructors HistogramBin(Double, Double, Double[]) Declaration public HistogramBin(double lower, double upper, double[] values) Parameters Type Name Description System.Double lower System.Double upper System.Double [] values Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Gap Declaration public double Gap { get; } Property Value Type Description System.Double HasAny Declaration public bool HasAny { get; } Property Value Type Description System.Boolean IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Lower Declaration public double Lower { get; } Property Value Type Description System.Double Upper Declaration public double Upper { get; } Property Value Type Description System.Double Values Declaration public double[] Values { get; } Property Value Type Description System.Double [] Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() ToString(Encoding) Declaration public string ToString(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding Returns Type Description System.String Union(HistogramBin, HistogramBin) Declaration public static HistogramBin Union(HistogramBin bin1, HistogramBin bin2) Parameters Type Name Description HistogramBin bin1 HistogramBin bin2 Returns Type Description HistogramBin"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.HistogramBuilder.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.HistogramBuilder.html",
    "title": "Class HistogramBuilder | BenchmarkDotNet",
    "keywords": "Class HistogramBuilder Inheritance System.Object HistogramBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public static class HistogramBuilder Fields Adaptive Declaration public static readonly IHistogramBuilder Adaptive Field Value Type Description IHistogramBuilder AllBuilders Declaration public static readonly IHistogramBuilder[] AllBuilders Field Value Type Description IHistogramBuilder [] Simple Declaration public static readonly IHistogramBuilder Simple Field Value Type Description IHistogramBuilder"
  },
  "api/BenchmarkDotNet.Mathematics.Histograms.HistogramExtensions.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Histograms.HistogramExtensions.html",
    "title": "Class HistogramExtensions | BenchmarkDotNet",
    "keywords": "Class HistogramExtensions Inheritance System.Object HistogramExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Mathematics.Histograms Assembly : BenchmarkDotNet.dll Syntax public static class HistogramExtensions Methods GetAllValues(Histogram) Declaration public static IEnumerable<double> GetAllValues(this Histogram histogram) Parameters Type Name Description Histogram histogram Returns Type Description System.Collections.Generic.IEnumerable < System.Double > GetBinCount(Histogram) Declaration public static int GetBinCount(this Histogram histogram) Parameters Type Name Description Histogram histogram Returns Type Description System.Int32 GetOptimalBinSize(Statistics, Nullable<BinSizeRule>) Declaration public static double GetOptimalBinSize(this Statistics s, BinSizeRule? rule = default(BinSizeRule? )) Parameters Type Name Description Statistics s System.Nullable < BinSizeRule > rule Returns Type Description System.Double ToTimeStr(Histogram, TimeUnit, Char, Boolean, Encoding) Declaration public static string ToTimeStr(this Histogram histogram, TimeUnit unit = null, char binSymbol = '@', bool full = false, Encoding encoding = null) Parameters Type Name Description Histogram histogram TimeUnit unit System.Char binSymbol System.Boolean full System.Text.Encoding encoding Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Portability.html": {
    "href": "api/BenchmarkDotNet.Portability.html",
    "title": "Namespace BenchmarkDotNet.Portability | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Portability Classes Antivirus HyperV VirtualBox VirtualMachineHypervisor VMware"
  },
  "api/BenchmarkDotNet.Properties.BenchmarkDotNetInfo.html": {
    "href": "api/BenchmarkDotNet.Properties.BenchmarkDotNetInfo.html",
    "title": "Class BenchmarkDotNetInfo | BenchmarkDotNet",
    "keywords": "Class BenchmarkDotNetInfo Inheritance System.Object BenchmarkDotNetInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Properties Assembly : BenchmarkDotNet.dll Syntax public static class BenchmarkDotNetInfo Fields PrereleaseLabel Declaration public const string PrereleaseLabel = \"-develop\" Field Value Type Description System.String Properties FullTitle Declaration public static string FullTitle { get; } Property Value Type Description System.String FullVersion Declaration public static string FullVersion { get; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Properties.html": {
    "href": "api/BenchmarkDotNet.Properties.html",
    "title": "Namespace BenchmarkDotNet.Properties | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Properties Classes BenchmarkDotNetInfo"
  },
  "api/BenchmarkDotNet.Reports.BenchmarkReport.html": {
    "href": "api/BenchmarkDotNet.Reports.BenchmarkReport.html",
    "title": "Class BenchmarkReport | BenchmarkDotNet",
    "keywords": "Class BenchmarkReport Inheritance System.Object BenchmarkReport Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public sealed class BenchmarkReport Constructors BenchmarkReport(Benchmark, GenerateResult, BuildResult, IReadOnlyList<ExecuteResult>, IReadOnlyList<Measurement>, GcStats) Declaration public BenchmarkReport(Benchmark benchmark, GenerateResult generateResult, BuildResult buildResult, IReadOnlyList<ExecuteResult> executeResults, IReadOnlyList<Measurement> allMeasurements, GcStats gcStats) Parameters Type Name Description Benchmark benchmark GenerateResult generateResult BuildResult buildResult System.Collections.Generic.IReadOnlyList < ExecuteResult > executeResults System.Collections.Generic.IReadOnlyList < Measurement > allMeasurements GcStats gcStats Properties AllMeasurements Declaration public IReadOnlyList<Measurement> AllMeasurements { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Measurement > Benchmark Declaration public Benchmark Benchmark { get; } Property Value Type Description Benchmark BuildResult Declaration public BuildResult BuildResult { get; } Property Value Type Description BuildResult ExecuteResults Declaration public IReadOnlyList<ExecuteResult> ExecuteResults { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ExecuteResult > GcStats Declaration public GcStats GcStats { get; } Property Value Type Description GcStats GenerateResult Declaration public GenerateResult GenerateResult { get; } Property Value Type Description GenerateResult ResultStatistics Declaration public Statistics ResultStatistics { get; } Property Value Type Description Statistics Methods GetResultRuns() Declaration public IReadOnlyList<Measurement> GetResultRuns() Returns Type Description System.Collections.Generic.IReadOnlyList < Measurement > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods BenchmarkReportExtensions.GetRuntimeInfo(BenchmarkReport) BenchmarkReportExtensions.GetGcInfo(BenchmarkReport)"
  },
  "api/BenchmarkDotNet.Toolchains.CoreRt.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CoreRt.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.CoreRt | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.CoreRt Classes CoreRtToolchain CoreRtToolchainBuilder Generator generates new csproj file for self-contained .NET Core RT app based on https://github.com/dotnet/corert/blob/7f902d4d8b1c3280e60f5e06c71951a60da173fb/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built and https://github.com/dotnet/corert/tree/7f902d4d8b1c3280e60f5e06c71951a60da173fb/samples/HelloWorld#add-corert-to-your-project Publisher"
  },
  "api/BenchmarkDotNet.Toolchains.CsProj.CsProjClassicNetToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CsProj.CsProjClassicNetToolchain.html",
    "title": "Class CsProjClassicNetToolchain | BenchmarkDotNet",
    "keywords": "Class CsProjClassicNetToolchain this toolchain is designed for the new .csprojs, to build .NET 4.x benchmarks from the context of .NET Core host process it does not work with the old .csprojs or project.json! Inheritance System.Object Toolchain CsProjClassicNetToolchain Implements IToolchain Inherited Members Toolchain.Name Toolchain.Generator Toolchain.Builder Toolchain.Executor Toolchain.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.CsProj Assembly : BenchmarkDotNet.dll Syntax public class CsProjClassicNetToolchain : Toolchain, IToolchain Fields Current Declaration public static readonly Lazy<IToolchain> Current Field Value Type Description System.Lazy < IToolchain > Net46 Declaration public static readonly IToolchain Net46 Field Value Type Description IToolchain Net461 Declaration public static readonly IToolchain Net461 Field Value Type Description IToolchain Net462 Declaration public static readonly IToolchain Net462 Field Value Type Description IToolchain Net47 Declaration public static readonly IToolchain Net47 Field Value Type Description IToolchain Net471 Declaration public static readonly IToolchain Net471 Field Value Type Description IToolchain Net472 Declaration public static readonly IToolchain Net472 Field Value Type Description IToolchain Methods From(String) Declaration public static IToolchain From(string targetFrameworkMoniker) Parameters Type Name Description System.String targetFrameworkMoniker Returns Type Description IToolchain IsSupported(Benchmark, ILogger, IResolver) Declaration public override bool IsSupported(Benchmark benchmark, ILogger logger, IResolver resolver) Parameters Type Name Description Benchmark benchmark ILogger logger IResolver resolver Returns Type Description System.Boolean Overrides Toolchain.IsSupported(Benchmark, ILogger, IResolver) Implements IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.CsProj.CsProjCoreToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CsProj.CsProjCoreToolchain.html",
    "title": "Class CsProjCoreToolchain | BenchmarkDotNet",
    "keywords": "Class CsProjCoreToolchain Inheritance System.Object Toolchain CsProjCoreToolchain Implements IToolchain Inherited Members Toolchain.Name Toolchain.Generator Toolchain.Builder Toolchain.Executor Toolchain.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.CsProj Assembly : BenchmarkDotNet.dll Syntax public class CsProjCoreToolchain : Toolchain, IToolchain Fields Current Declaration public static readonly Lazy<IToolchain> Current Field Value Type Description System.Lazy < IToolchain > NetCoreApp20 Declaration public static readonly IToolchain NetCoreApp20 Field Value Type Description IToolchain NetCoreApp21 Declaration public static readonly IToolchain NetCoreApp21 Field Value Type Description IToolchain NetCoreApp22 Declaration public static readonly IToolchain NetCoreApp22 Field Value Type Description IToolchain Methods From(NetCoreAppSettings) Declaration public static IToolchain From(NetCoreAppSettings settings) Parameters Type Name Description NetCoreAppSettings settings Returns Type Description IToolchain IsSupported(Benchmark, ILogger, IResolver) Declaration public override bool IsSupported(Benchmark benchmark, ILogger logger, IResolver resolver) Parameters Type Name Description Benchmark benchmark ILogger logger IResolver resolver Returns Type Description System.Boolean Overrides Toolchain.IsSupported(Benchmark, ILogger, IResolver) Implements IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.CustomDotNetCliToolchainBuilder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.CustomDotNetCliToolchainBuilder.html",
    "title": "Class CustomDotNetCliToolchainBuilder | BenchmarkDotNet",
    "keywords": "Class CustomDotNetCliToolchainBuilder Inheritance System.Object CustomDotNetCliToolchainBuilder CoreRtToolchainBuilder CustomCoreClrToolchainBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.DotNetCli Assembly : BenchmarkDotNet.dll Syntax public abstract class CustomDotNetCliToolchainBuilder Fields customDotNetCliPath Declaration protected string customDotNetCliPath Field Value Type Description System.String displayName Declaration protected string displayName Field Value Type Description System.String feeds Declaration protected Dictionary<string, string> feeds Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > runtimeFrameworkVersion Declaration protected string runtimeFrameworkVersion Field Value Type Description System.String runtimeIdentifier Declaration protected string runtimeIdentifier Field Value Type Description System.String targetFrameworkMoniker Declaration protected string targetFrameworkMoniker Field Value Type Description System.String useNuGetClearTag Declaration protected bool useNuGetClearTag Field Value Type Description System.Boolean useTempFolderForRestore Declaration protected bool useTempFolderForRestore Field Value Type Description System.Boolean Methods AdditionalNuGetFeed(String, String) it allows you to define an additional NuGet feed, you can seal the feeds list by using the UseNuGetClearTag() method Declaration public CustomDotNetCliToolchainBuilder AdditionalNuGetFeed(string feedName, string feedAddress) Parameters Type Name Description System.String feedName the name of the feed, will be used in the auto-generated NuGet.config file System.String feedAddress the address of the feed, will be used in the auto-generated NuGet.config file Returns Type Description CustomDotNetCliToolchainBuilder DisplayName(String) Declaration public CustomDotNetCliToolchainBuilder DisplayName(string displayName) Parameters Type Name Description System.String displayName the name of the toolchain to be displayed in results Returns Type Description CustomDotNetCliToolchainBuilder DotNetCli(String) Declaration public CustomDotNetCliToolchainBuilder DotNetCli(string customDotNetCliPath) Parameters Type Name Description System.String customDotNetCliPath if not provided, the one from PATH will be used Returns Type Description CustomDotNetCliToolchainBuilder GetPortableRuntimeIdentifier() Declaration protected static string GetPortableRuntimeIdentifier() Returns Type Description System.String RuntimeFrameworkVersion(String) Declaration public CustomDotNetCliToolchainBuilder RuntimeFrameworkVersion(string runtimeFrameworkVersion) Parameters Type Name Description System.String runtimeFrameworkVersion optional, when set it's copied to the generated .csproj file Returns Type Description CustomDotNetCliToolchainBuilder RuntimeIdentifier(String) Declaration public CustomDotNetCliToolchainBuilder RuntimeIdentifier(string runtimeIdentifier) Parameters Type Name Description System.String runtimeIdentifier if not provided, portable OS-arch will be used (example: \"win-x64\", \"linux-x86\") Returns Type Description CustomDotNetCliToolchainBuilder TargetFrameworkMoniker(String) Declaration public CustomDotNetCliToolchainBuilder TargetFrameworkMoniker(string targetFrameworkMoniker = \"netcoreapp2.1\") Parameters Type Name Description System.String targetFrameworkMoniker TFM, netcoreapp2.1 is the default Returns Type Description CustomDotNetCliToolchainBuilder ToToolchain() Declaration public abstract IToolchain ToToolchain() Returns Type Description IToolchain UseNuGetClearTag(Boolean) emits clear tag in the auto-generated NuGet.config file Declaration public CustomDotNetCliToolchainBuilder UseNuGetClearTag(bool value) Parameters Type Name Description System.Boolean value Returns Type Description CustomDotNetCliToolchainBuilder UseTempFolderForRestore(Boolean) restore to temp folder to keep your CI clean or install same package many times (perhaps with different content but same version number), by default true for local builds https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md#3---consuming-subsequent-code-changes-by-rebuilding-the-package-alternative-2 Declaration public CustomDotNetCliToolchainBuilder UseTempFolderForRestore(bool value) Parameters Type Name Description System.Boolean value Returns Type Description CustomDotNetCliToolchainBuilder"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliBuilder.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliBuilder.html",
    "title": "Class DotNetCliBuilder | BenchmarkDotNet",
    "keywords": "Class DotNetCliBuilder Inheritance System.Object DotNetCliBuilder Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.DotNetCli Assembly : BenchmarkDotNet.dll Syntax public class DotNetCliBuilder : IBuilder Constructors DotNetCliBuilder(String, String) Declaration public DotNetCliBuilder(string targetFrameworkMoniker, string customDotNetCliPath = null) Parameters Type Name Description System.String targetFrameworkMoniker System.String customDotNetCliPath Properties RestoreCommand Declaration public virtual string RestoreCommand { get; } Property Value Type Description System.String Methods Build(GenerateResult, BuildPartition, ILogger) Declaration public BuildResult Build(GenerateResult generateResult, BuildPartition buildPartition, ILogger logger) Parameters Type Name Description GenerateResult generateResult BuildPartition buildPartition ILogger logger Returns Type Description BuildResult GetBuildCommand(String, Boolean, String) Declaration public virtual string GetBuildCommand(string frameworkMoniker, bool justTheProjectItself, string configuration) Parameters Type Name Description System.String frameworkMoniker System.Boolean justTheProjectItself System.String configuration Returns Type Description System.String Implements IBuilder"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliExecutor.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliExecutor.html",
    "title": "Class DotNetCliExecutor | BenchmarkDotNet",
    "keywords": "Class DotNetCliExecutor Inheritance System.Object DotNetCliExecutor Implements IExecutor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.DotNetCli Assembly : BenchmarkDotNet.dll Syntax public class DotNetCliExecutor : IExecutor Constructors DotNetCliExecutor(String) Declaration public DotNetCliExecutor(string customDotNetCliPath) Parameters Type Name Description System.String customDotNetCliPath Methods Execute(ExecuteParameters) Declaration public ExecuteResult Execute(ExecuteParameters executeParameters) Parameters Type Name Description ExecuteParameters executeParameters Returns Type Description ExecuteResult Implements IExecutor"
  },
  "api/BenchmarkDotNet.Toolchains.Roslyn.RoslynToolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Roslyn.RoslynToolchain.html",
    "title": "Class RoslynToolchain | BenchmarkDotNet",
    "keywords": "Class RoslynToolchain Build a benchmark program with the Roslyn compiler. Inheritance System.Object Toolchain RoslynToolchain Implements IToolchain Inherited Members Toolchain.Name Toolchain.Generator Toolchain.Builder Toolchain.Executor Toolchain.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains.Roslyn Assembly : BenchmarkDotNet.dll Syntax public class RoslynToolchain : Toolchain, IToolchain Constructors RoslynToolchain() Declaration public RoslynToolchain() Fields Instance Declaration public static IToolchain Instance Field Value Type Description IToolchain Methods IsSupported(Benchmark, ILogger, IResolver) Declaration public override bool IsSupported(Benchmark benchmark, ILogger logger, IResolver resolver) Parameters Type Name Description Benchmark benchmark ILogger logger IResolver resolver Returns Type Description System.Boolean Overrides Toolchain.IsSupported(Benchmark, ILogger, IResolver) Implements IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.Roslyn.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Roslyn.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.Roslyn | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.Roslyn Classes Builder Generator RoslynToolchain Build a benchmark program with the Roslyn compiler."
  },
  "api/BenchmarkDotNet.Toolchains.Toolchain.html": {
    "href": "api/BenchmarkDotNet.Toolchains.Toolchain.html",
    "title": "Class Toolchain | BenchmarkDotNet",
    "keywords": "Class Toolchain Inheritance System.Object Toolchain CoreRtToolchain CsProjClassicNetToolchain CsProjCoreToolchain CustomCoreClrToolchain RoslynToolchain Implements IToolchain Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public class Toolchain : IToolchain Constructors Toolchain(String, IGenerator, IBuilder, IExecutor) Declaration public Toolchain(string name, IGenerator generator, IBuilder builder, IExecutor executor) Parameters Type Name Description System.String name IGenerator generator IBuilder builder IExecutor executor Properties Builder Declaration public IBuilder Builder { get; } Property Value Type Description IBuilder Executor Declaration public IExecutor Executor { get; } Property Value Type Description IExecutor Generator Declaration public IGenerator Generator { get; } Property Value Type Description IGenerator Name Declaration public string Name { get; } Property Value Type Description System.String Methods IsSupported(Benchmark, ILogger, IResolver) Declaration public virtual bool IsSupported(Benchmark benchmark, ILogger logger, IResolver resolver) Parameters Type Name Description Benchmark benchmark ILogger logger IResolver resolver Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IToolchain"
  },
  "api/BenchmarkDotNet.Toolchains.html": {
    "href": "api/BenchmarkDotNet.Toolchains.html",
    "title": "Namespace BenchmarkDotNet.Toolchains | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains Classes ArtifactsPaths Executor GeneratorBase Toolchain Interfaces IBuilder IExecutor IGenerator IToolchain"
  },
  "api/BenchmarkDotNet.Analysers.CompositeAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.CompositeAnalyser.html",
    "title": "Class CompositeAnalyser | BenchmarkDotNet",
    "keywords": "Class CompositeAnalyser Inheritance System.Object CompositeAnalyser Implements IAnalyser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class CompositeAnalyser : IAnalyser Constructors CompositeAnalyser(IAnalyser[]) Declaration public CompositeAnalyser(IAnalyser[] analysers) Parameters Type Name Description IAnalyser [] analysers Properties Id Declaration public string Id { get; } Property Value Type Description System.String Methods Analyse(Summary) Declaration public IEnumerable<Conclusion> Analyse(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Analysers.MinIterationTimeAnalyser.html": {
    "href": "api/BenchmarkDotNet.Analysers.MinIterationTimeAnalyser.html",
    "title": "Class MinIterationTimeAnalyser | BenchmarkDotNet",
    "keywords": "Class MinIterationTimeAnalyser Inheritance System.Object AnalyserBase MinIterationTimeAnalyser Implements IAnalyser Inherited Members AnalyserBase.Analyse(Summary) AnalyserBase.AnalyseSummary(Summary) AnalyserBase.CreateHint(String, BenchmarkReport) AnalyserBase.CreateWarning(String, BenchmarkReport) AnalyserBase.CreateError(String, BenchmarkReport) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public class MinIterationTimeAnalyser : AnalyserBase, IAnalyser Fields Default Declaration public static readonly IAnalyser Default Field Value Type Description IAnalyser Properties Id Declaration public override string Id { get; } Property Value Type Description System.String Overrides AnalyserBase.Id Methods AnalyseReport(BenchmarkReport, Summary) Declaration public override IEnumerable<Conclusion> AnalyseReport(BenchmarkReport report, Summary summary) Parameters Type Name Description BenchmarkReport report Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Overrides AnalyserBase.AnalyseReport(BenchmarkReport, Summary) Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Attributes.AnyCategoriesFilterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.AnyCategoriesFilterAttribute.html",
    "title": "Class AnyCategoriesFilterAttribute | BenchmarkDotNet",
    "keywords": "Class AnyCategoriesFilterAttribute Inheritance System.Object System.Attribute FilterConfigBaseAttribute AnyCategoriesFilterAttribute Implements IConfigSource Inherited Members FilterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class AnyCategoriesFilterAttribute : FilterConfigBaseAttribute, IConfigSource Constructors AnyCategoriesFilterAttribute() Declaration public AnyCategoriesFilterAttribute() AnyCategoriesFilterAttribute(String[]) Declaration public AnyCategoriesFilterAttribute(params string[] targetCategories) Parameters Type Name Description System.String [] targetCategories Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ColumnConfigBaseAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ColumnConfigBaseAttribute.html",
    "title": "Class ColumnConfigBaseAttribute | BenchmarkDotNet",
    "keywords": "Class ColumnConfigBaseAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute AllStatisticsColumnAttribute CategoriesColumnAttribute ConfidenceIntervalErrorColumnAttribute IsBaselineColumnAttribute IterationsColumnAttribute KurtosisColumnAttribute LogicalGroupColumnAttribute MaxColumnAttribute MeanColumnAttribute MedianColumnAttribute MinColumnAttribute MValueColumnAttribute NamespaceColumnAttribute Q1ColumnAttribute Q3ColumnAttribute RankColumnAttribute SkewnessColumnAttribute StdDevColumnAttribute StdErrorColumnAttribute WelchTTestPValueColumnAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public abstract class ColumnConfigBaseAttribute : Attribute, IConfigSource Constructors ColumnConfigBaseAttribute() Declaration protected ColumnConfigBaseAttribute() ColumnConfigBaseAttribute(IColumn[]) Declaration protected ColumnConfigBaseAttribute(params IColumn[] columns) Parameters Type Name Description IColumn [] columns Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.DryClrJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.DryClrJobAttribute.html",
    "title": "Class DryClrJobAttribute | BenchmarkDotNet",
    "keywords": "Class DryClrJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute DryClrJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class DryClrJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors DryClrJobAttribute() Declaration public DryClrJobAttribute() DryClrJobAttribute(Jit) Declaration public DryClrJobAttribute(Jit jit) Parameters Type Name Description Jit jit DryClrJobAttribute(Jit, Platform) Declaration public DryClrJobAttribute(Jit jit, Platform platform) Parameters Type Name Description Jit jit Platform platform DryClrJobAttribute(Platform) Declaration public DryClrJobAttribute(Platform platform) Parameters Type Name Description Platform platform Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.EncodingAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.EncodingAttribute.html",
    "title": "Class EncodingAttribute | BenchmarkDotNet",
    "keywords": "Class EncodingAttribute Inheritance System.Object System.Attribute EncodingAttribute EncodingAttribute.ASCII EncodingAttribute.Unicode Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class EncodingAttribute : Attribute, IConfigSource Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.HardwareCountersAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.HardwareCountersAttribute.html",
    "title": "Class HardwareCountersAttribute | BenchmarkDotNet",
    "keywords": "Class HardwareCountersAttribute Inheritance System.Object System.Attribute HardwareCountersAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public class HardwareCountersAttribute : Attribute, IConfigSource Constructors HardwareCountersAttribute() Declaration protected HardwareCountersAttribute() HardwareCountersAttribute(HardwareCounter[]) Declaration public HardwareCountersAttribute(params HardwareCounter[] counters) Parameters Type Name Description HardwareCounter [] counters Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.BriefAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.BriefAttribute.html",
    "title": "Class JsonExporterAttribute.BriefAttribute | BenchmarkDotNet",
    "keywords": "Class JsonExporterAttribute.BriefAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute JsonExporterAttribute JsonExporterAttribute.BriefAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class BriefAttribute : JsonExporterAttribute, IConfigSource Constructors BriefAttribute() Declaration public BriefAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.LogicalGroupColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.LogicalGroupColumnAttribute.html",
    "title": "Class LogicalGroupColumnAttribute | BenchmarkDotNet",
    "keywords": "Class LogicalGroupColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute LogicalGroupColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class LogicalGroupColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors LogicalGroupColumnAttribute() Declaration public LogicalGroupColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.LongRunJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.LongRunJobAttribute.html",
    "title": "Class LongRunJobAttribute | BenchmarkDotNet",
    "keywords": "Class LongRunJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute LongRunJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class LongRunJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors LongRunJobAttribute() Declaration public LongRunJobAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.ParamsAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ParamsAttribute.html",
    "title": "Class ParamsAttribute | BenchmarkDotNet",
    "keywords": "Class ParamsAttribute Inheritance System.Object System.Attribute ParamsAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class ParamsAttribute : Attribute Constructors ParamsAttribute() Declaration public ParamsAttribute() ParamsAttribute(Object[]) Declaration public ParamsAttribute(params object[] values) Parameters Type Name Description System.Object [] values Properties Values Declaration public object[] Values { get; } Property Value Type Description System.Object []"
  },
  "api/BenchmarkDotNet.Attributes.ParamsSourceAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ParamsSourceAttribute.html",
    "title": "Class ParamsSourceAttribute | BenchmarkDotNet",
    "keywords": "Class ParamsSourceAttribute Inheritance System.Object System.Attribute ParamsSourceAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class ParamsSourceAttribute : Attribute Constructors ParamsSourceAttribute(String) Declaration public ParamsSourceAttribute(string name) Parameters Type Name Description System.String name Properties Name Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Attributes.TargetedAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.TargetedAttribute.html",
    "title": "Class TargetedAttribute | BenchmarkDotNet",
    "keywords": "Class TargetedAttribute Base class for attributes that are targeted at one method Inheritance System.Object System.Attribute TargetedAttribute GlobalCleanupAttribute GlobalSetupAttribute IterationCleanupAttribute IterationSetupAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public abstract class TargetedAttribute : Attribute Properties Target Target method for attribute Declaration public string Target { get; set; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Attributes.ValidatorConfigBaseAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ValidatorConfigBaseAttribute.html",
    "title": "Class ValidatorConfigBaseAttribute | BenchmarkDotNet",
    "keywords": "Class ValidatorConfigBaseAttribute Inheritance System.Object System.Attribute ValidatorConfigBaseAttribute ExecutionValidatorAttribute ReturnValueValidatorAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public abstract class ValidatorConfigBaseAttribute : Attribute, IConfigSource Constructors ValidatorConfigBaseAttribute() Declaration protected ValidatorConfigBaseAttribute() ValidatorConfigBaseAttribute(IValidator[]) Declaration protected ValidatorConfigBaseAttribute(params IValidator[] validators) Parameters Type Name Description IValidator [] validators Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Characteristics.CharacteristicSet.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CharacteristicSet.html",
    "title": "Class CharacteristicSet | BenchmarkDotNet",
    "keywords": "Class CharacteristicSet Inheritance System.Object CharacteristicObject CharacteristicObject < CharacteristicSet > CharacteristicSet Inherited Members CharacteristicObject<CharacteristicSet>.Apply(CharacteristicObject) CharacteristicObject<CharacteristicSet>.Apply(CharacteristicObject[]) CharacteristicObject<CharacteristicSet>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<CharacteristicSet>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<CharacteristicSet>.Freeze() CharacteristicObject<CharacteristicSet>.UnfreezeCopy() CharacteristicObject<CharacteristicSet>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public sealed class CharacteristicSet : CharacteristicObject<CharacteristicSet> Constructors CharacteristicSet() Declaration public CharacteristicSet() CharacteristicSet(CharacteristicObject) Declaration public CharacteristicSet(CharacteristicObject other) Parameters Type Name Description CharacteristicObject other CharacteristicSet(CharacteristicObject[]) Declaration public CharacteristicSet(params CharacteristicObject[] others) Parameters Type Name Description CharacteristicObject [] others Properties IsPropertyBag Declaration protected override bool IsPropertyBag { get; } Property Value Type Description System.Boolean Overrides CharacteristicObject.IsPropertyBag Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Characteristics.CharacteristicSetPresenter.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CharacteristicSetPresenter.html",
    "title": "Class CharacteristicSetPresenter | BenchmarkDotNet",
    "keywords": "Class CharacteristicSetPresenter Inheritance System.Object CharacteristicSetPresenter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public abstract class CharacteristicSetPresenter Fields Default Declaration public static readonly CharacteristicSetPresenter Default Field Value Type Description CharacteristicSetPresenter Display Declaration public static readonly CharacteristicSetPresenter Display Field Value Type Description CharacteristicSetPresenter Folder Declaration public static readonly CharacteristicSetPresenter Folder Field Value Type Description CharacteristicSetPresenter SourceCode Declaration public static readonly CharacteristicSetPresenter SourceCode Field Value Type Description CharacteristicSetPresenter Methods GetPresentableCharacteristics(CharacteristicObject, Boolean) Declaration protected virtual IEnumerable<Characteristic> GetPresentableCharacteristics(CharacteristicObject obj, bool includeIgnoreOnApply = false) Parameters Type Name Description CharacteristicObject obj System.Boolean includeIgnoreOnApply Returns Type Description System.Collections.Generic.IEnumerable < Characteristic > ToPresentation(CharacteristicObject) Declaration public abstract string ToPresentation(CharacteristicObject obj) Parameters Type Name Description CharacteristicObject obj Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Columns.EmptyColumnProvider.html": {
    "href": "api/BenchmarkDotNet.Columns.EmptyColumnProvider.html",
    "title": "Class EmptyColumnProvider | BenchmarkDotNet",
    "keywords": "Class EmptyColumnProvider Inheritance System.Object EmptyColumnProvider Implements IColumnProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class EmptyColumnProvider : IColumnProvider Fields Instance Declaration public static readonly IColumnProvider Instance Field Value Type Description IColumnProvider Methods GetColumns(Summary) Declaration public IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < IColumn > Implements IColumnProvider"
  },
  "api/BenchmarkDotNet.Columns.IColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.IColumn.html",
    "title": "Interface IColumn | BenchmarkDotNet",
    "keywords": "Interface IColumn Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public interface IColumn Properties AlwaysShow Declaration bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Display column title in the summary. Declaration string ColumnName { get; } Property Value Type Description System.String Id An unique identificator of the column. If there are several columns with the same Id, only one of them will be shown in the summary. Declaration string Id { get; } Property Value Type Description System.String IsNumeric Defines if the column's value represents a number Declaration bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Column description. Declaration string Legend { get; } Property Value Type Description System.String PriorityInCategory Defines order of column in the same category. Declaration int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Defines how to format column's value Declaration UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Value in this column formatted using the default style. Declaration string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Value in this column formatted using the specified style. Declaration string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Configs.BenchmarkLogicalGroupRule.html": {
    "href": "api/BenchmarkDotNet.Configs.BenchmarkLogicalGroupRule.html",
    "title": "Enum BenchmarkLogicalGroupRule | BenchmarkDotNet",
    "keywords": "Enum BenchmarkLogicalGroupRule Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public enum BenchmarkLogicalGroupRule Fields Name Description ByCategory ByJob ByMethod ByParams"
  },
  "api/BenchmarkDotNet.Configs.ConfigExtensions.html": {
    "href": "api/BenchmarkDotNet.Configs.ConfigExtensions.html",
    "title": "Class ConfigExtensions | BenchmarkDotNet",
    "keywords": "Class ConfigExtensions Inheritance System.Object ConfigExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public static class ConfigExtensions Methods AsReadOnly(IConfig) Declaration public static ReadOnlyConfig AsReadOnly(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description ReadOnlyConfig GetCompositeAnalyser(IConfig) Declaration public static IAnalyser GetCompositeAnalyser(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description IAnalyser GetCompositeDiagnoser(IConfig) Declaration public static IDiagnoser GetCompositeDiagnoser(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description IDiagnoser GetCompositeDiagnoser(IConfig, Benchmark, RunMode) Declaration public static IDiagnoser GetCompositeDiagnoser(this IConfig config, Benchmark benchmark, RunMode runMode) Parameters Type Name Description IConfig config Benchmark benchmark RunMode runMode Returns Type Description IDiagnoser GetCompositeExporter(IConfig) Declaration public static IExporter GetCompositeExporter(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description IExporter GetCompositeLogger(IConfig) Declaration public static ILogger GetCompositeLogger(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description ILogger GetCompositeValidator(IConfig) Declaration public static IValidator GetCompositeValidator(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description IValidator HasMemoryDiagnoser(IConfig) Declaration public static bool HasMemoryDiagnoser(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description System.Boolean KeepBenchmarkFiles(IConfig, Boolean) Declaration public static IConfig KeepBenchmarkFiles(this IConfig config, bool value = true) Parameters Type Name Description IConfig config System.Boolean value Returns Type Description IConfig RemoveBenchmarkFiles(IConfig) Declaration public static IConfig RemoveBenchmarkFiles(this IConfig config) Parameters Type Name Description IConfig config Returns Type Description IConfig With(IConfig, IAnalyser[]) Declaration public static IConfig With(this IConfig config, params IAnalyser[] analysers) Parameters Type Name Description IConfig config IAnalyser [] analysers Returns Type Description IConfig With(IConfig, IColumn[]) Declaration public static IConfig With(this IConfig config, params IColumn[] columns) Parameters Type Name Description IConfig config IColumn [] columns Returns Type Description IConfig With(IConfig, IColumnProvider[]) Declaration public static IConfig With(this IConfig config, params IColumnProvider[] columnProviders) Parameters Type Name Description IConfig config IColumnProvider [] columnProviders Returns Type Description IConfig With(IConfig, BenchmarkLogicalGroupRule[]) Declaration public static IConfig With(this IConfig config, params BenchmarkLogicalGroupRule[] rules) Parameters Type Name Description IConfig config BenchmarkLogicalGroupRule [] rules Returns Type Description IConfig With(IConfig, HardwareCounter[]) Declaration public static IConfig With(this IConfig config, params HardwareCounter[] counters) Parameters Type Name Description IConfig config HardwareCounter [] counters Returns Type Description IConfig With(IConfig, IDiagnoser[]) Declaration public static IConfig With(this IConfig config, params IDiagnoser[] diagnosers) Parameters Type Name Description IConfig config IDiagnoser [] diagnosers Returns Type Description IConfig With(IConfig, IExporter[]) Declaration public static IConfig With(this IConfig config, params IExporter[] exporters) Parameters Type Name Description IConfig config IExporter [] exporters Returns Type Description IConfig With(IConfig, IFilter[]) Declaration public static IConfig With(this IConfig config, params IFilter[] filters) Parameters Type Name Description IConfig config IFilter [] filters Returns Type Description IConfig With(IConfig, Job[]) Declaration public static IConfig With(this IConfig config, params Job[] jobs) Parameters Type Name Description IConfig config Job [] jobs Returns Type Description IConfig With(IConfig, ILogger[]) Declaration public static IConfig With(this IConfig config, params ILogger[] loggers) Parameters Type Name Description IConfig config ILogger [] loggers Returns Type Description IConfig With(IConfig, IOrderProvider) Declaration public static IConfig With(this IConfig config, IOrderProvider provider) Parameters Type Name Description IConfig config IOrderProvider provider Returns Type Description IConfig With(IConfig, IValidator[]) Declaration public static IConfig With(this IConfig config, params IValidator[] validators) Parameters Type Name Description IConfig config IValidator [] validators Returns Type Description IConfig With(IConfig, Encoding) Declaration public static IConfig With(this IConfig config, Encoding encoding) Parameters Type Name Description IConfig config System.Text.Encoding encoding Returns Type Description IConfig WithArtifactsPath(IConfig, String) Declaration public static IConfig WithArtifactsPath(this IConfig config, string artifactsPath) Parameters Type Name Description IConfig config System.String artifactsPath Returns Type Description IConfig"
  },
  "api/BenchmarkDotNet.Diagnosers.DisassemblerConstants.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DisassemblerConstants.html",
    "title": "Class DisassemblerConstants | BenchmarkDotNet",
    "keywords": "Class DisassemblerConstants Inheritance System.Object DisassemblerConstants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public static class DisassemblerConstants Fields DiassemblerEntryMethodName Declaration public const string DiassemblerEntryMethodName = \"__ForDisassemblyDiagnoser__\" Field Value Type Description System.String NotManagedMethod Declaration public const string NotManagedMethod = \"not managed method\" Field Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Diagnosers.DisassemblyAnalyzer.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DisassemblyAnalyzer.html",
    "title": "Class DisassemblyAnalyzer | BenchmarkDotNet",
    "keywords": "Class DisassemblyAnalyzer Inheritance System.Object DisassemblyAnalyzer Implements IAnalyser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DisassemblyAnalyzer : IAnalyser Constructors DisassemblyAnalyzer(IReadOnlyDictionary<Benchmark, DisassemblyResult>) Declaration public DisassemblyAnalyzer(IReadOnlyDictionary<Benchmark, DisassemblyResult> results) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < Benchmark , DisassemblyResult > results Properties Id Declaration public string Id { get; } Property Value Type Description System.String Methods Analyse(Summary) Declaration public IEnumerable<Conclusion> Analyse(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < Conclusion > Implements IAnalyser"
  },
  "api/BenchmarkDotNet.Diagnosers.RunMode.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.RunMode.html",
    "title": "Enum RunMode | BenchmarkDotNet",
    "keywords": "Enum RunMode Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public enum RunMode : byte Fields Name Description ExtraRun needs extra run of the benchmark None given diagnoser should not be executed for given benchmark NoOverhead no overhead, can be executed without extra run SeparateLogic implements some separate logic, that can be executed at any time"
  },
  "api/BenchmarkDotNet.Diagnosers.Sharp.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.Sharp.html",
    "title": "Class Sharp | BenchmarkDotNet",
    "keywords": "Class Sharp Inheritance System.Object Code Sharp Inherited Members Code.TextRepresentation Code.Comment System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class Sharp : Code Properties FilePath Declaration public string FilePath { get; set; } Property Value Type Description System.String LineNumber Declaration public int LineNumber { get; set; } Property Value Type Description System.Int32"
  },
  "api/BenchmarkDotNet.Engines.IterationModeExtensions.html": {
    "href": "api/BenchmarkDotNet.Engines.IterationModeExtensions.html",
    "title": "Class IterationModeExtensions | BenchmarkDotNet",
    "keywords": "Class IterationModeExtensions Inheritance System.Object IterationModeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public static class IterationModeExtensions Methods IsIdle(IterationMode) Declaration public static bool IsIdle(this IterationMode mode) Parameters Type Name Description IterationMode mode Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Engines.RunResults.html": {
    "href": "api/BenchmarkDotNet.Engines.RunResults.html",
    "title": "Struct RunResults | BenchmarkDotNet",
    "keywords": "Struct RunResults Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public struct RunResults Constructors RunResults(IReadOnlyList<Measurement>, IReadOnlyList<Measurement>, OutlierMode, GcStats, Encoding) Declaration public RunResults(IReadOnlyList<Measurement> idle, IReadOnlyList<Measurement> main, OutlierMode outlierMode, GcStats gcStats, Encoding encoding) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < Measurement > idle System.Collections.Generic.IReadOnlyList < Measurement > main OutlierMode outlierMode GcStats gcStats System.Text.Encoding encoding Properties GCStats Declaration public GcStats GCStats { get; } Property Value Type Description GcStats Idle Declaration public IReadOnlyList<Measurement> Idle { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Measurement > Main Declaration public IReadOnlyList<Measurement> Main { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Measurement > Methods GetMeasurements() Declaration public IEnumerable<Measurement> GetMeasurements() Returns Type Description System.Collections.Generic.IEnumerable < Measurement > Print(TextWriter) Declaration public void Print(TextWriter outWriter) Parameters Type Name Description System.IO.TextWriter outWriter"
  },
  "api/BenchmarkDotNet.Engines.RunStrategy.html": {
    "href": "api/BenchmarkDotNet.Engines.RunStrategy.html",
    "title": "Enum RunStrategy | BenchmarkDotNet",
    "keywords": "Enum RunStrategy Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public enum RunStrategy Fields Name Description ColdStart A mode without overhead evaluating and warmup, with single invocation. Perfect for startup time evaluation. Monitoring A mode without overhead evaluating, with several target iterations. Perfect for macrobenchmarks without a steady state with high variance. Throughput Throughput mode. Perfect for microbenchmarking. Extension Methods RunStrategyExtensions.NeedsJitting()"
  },
  "api/BenchmarkDotNet.Engines.RunStrategyExtensions.html": {
    "href": "api/BenchmarkDotNet.Engines.RunStrategyExtensions.html",
    "title": "Class RunStrategyExtensions | BenchmarkDotNet",
    "keywords": "Class RunStrategyExtensions Inheritance System.Object RunStrategyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public static class RunStrategyExtensions Methods NeedsJitting(RunStrategy) Declaration public static bool NeedsJitting(this RunStrategy runStrategy) Parameters Type Name Description RunStrategy runStrategy Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Exporters.Json.JsonExporterBase.html": {
    "href": "api/BenchmarkDotNet.Exporters.Json.JsonExporterBase.html",
    "title": "Class JsonExporterBase | BenchmarkDotNet",
    "keywords": "Class JsonExporterBase Inheritance System.Object ExporterBase JsonExporterBase JsonExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Json Assembly : BenchmarkDotNet.dll Syntax public abstract class JsonExporterBase : ExporterBase, IExporter Constructors JsonExporterBase(Boolean, Boolean) Declaration public JsonExporterBase(bool indentJson = false, bool excludeMeasurements = false) Parameters Type Name Description System.Boolean indentJson System.Boolean excludeMeasurements Properties FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.Json.html": {
    "href": "api/BenchmarkDotNet.Exporters.Json.html",
    "title": "Namespace BenchmarkDotNet.Exporters.Json | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Exporters.Json Classes JsonExporter JsonExporterBase"
  },
  "api/BenchmarkDotNet.Exporters.MarkdownExporter.MarkdownHighlightStrategy.html": {
    "href": "api/BenchmarkDotNet.Exporters.MarkdownExporter.MarkdownHighlightStrategy.html",
    "title": "Enum MarkdownExporter.MarkdownHighlightStrategy | BenchmarkDotNet",
    "keywords": "Enum MarkdownExporter.MarkdownHighlightStrategy Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public enum MarkdownHighlightStrategy Fields Name Description Bold Marker None"
  },
  "api/BenchmarkDotNet.Exporters.MarkdownExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.MarkdownExporter.html",
    "title": "Class MarkdownExporter | BenchmarkDotNet",
    "keywords": "Class MarkdownExporter Inheritance System.Object ExporterBase MarkdownExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class MarkdownExporter : ExporterBase, IExporter Fields Atlassian Declaration public static readonly IExporter Atlassian Field Value Type Description IExporter Console Declaration public static readonly IExporter Console Field Value Type Description IExporter Default Declaration public static readonly IExporter Default Field Value Type Description IExporter GitHub Declaration public static readonly IExporter GitHub Field Value Type Description IExporter StackOverflow Declaration public static readonly IExporter StackOverflow Field Value Type Description IExporter Properties FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension FileNameSuffix Declaration protected override string FileNameSuffix { get; } Property Value Type Description System.String Overrides ExporterBase.FileNameSuffix Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Filters.html": {
    "href": "api/BenchmarkDotNet.Filters.html",
    "title": "Namespace BenchmarkDotNet.Filters | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Filters Classes AllCategoriesFilter Filter benchmarks which have all the target categories AnyCategoriesFilter Filter benchmarks which have any of the target categories AttributesFilter filters benchmarks by provided attribute names DisjunctionFilter MethodNamesFilter filters benchmarks by provided method names NameFilter NamespacesFilter filters benchmarks by provided namespaces SimpleFilter TypeNamesFilter filters benchmarks by provided type names UnionFilter Interfaces IFilter"
  },
  "api/BenchmarkDotNet.Helpers.ExternalToolsHelper.html": {
    "href": "api/BenchmarkDotNet.Helpers.ExternalToolsHelper.html",
    "title": "Class ExternalToolsHelper | BenchmarkDotNet",
    "keywords": "Class ExternalToolsHelper Inheritance System.Object ExternalToolsHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Helpers Assembly : BenchmarkDotNet.dll Syntax public static class ExternalToolsHelper Fields LsbRelease Output of the lsb_release -a command. Linux only. Declaration public static readonly Lazy<Dictionary<string, string>> LsbRelease Field Value Type Description System.Lazy < System.Collections.Generic.Dictionary < System.String , System.String >> MacSystemProfilerData Output of the system_profiler SPSoftwareDataType command. MacOSX only. Declaration public static readonly Lazy<Dictionary<string, string>> MacSystemProfilerData Field Value Type Description System.Lazy < System.Collections.Generic.Dictionary < System.String , System.String >>"
  },
  "api/BenchmarkDotNet.Helpers.FolderNameHelper.html": {
    "href": "api/BenchmarkDotNet.Helpers.FolderNameHelper.html",
    "title": "Class FolderNameHelper | BenchmarkDotNet",
    "keywords": "Class FolderNameHelper Inheritance System.Object FolderNameHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Helpers Assembly : BenchmarkDotNet.dll Syntax public class FolderNameHelper Methods ToFolderName(Object) Declaration public static string ToFolderName(object value) Parameters Type Name Description System.Object value Returns Type Description System.String ToFolderName(Type) Declaration public static string ToFolderName(Type type) Parameters Type Name Description System.Type type Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Helpers.MultiEncodingString.html": {
    "href": "api/BenchmarkDotNet.Helpers.MultiEncodingString.html",
    "title": "Class MultiEncodingString | BenchmarkDotNet",
    "keywords": "Class MultiEncodingString MultiEncoding String. Inheritance System.Object MultiEncodingString Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Helpers Assembly : BenchmarkDotNet.dll Syntax public class MultiEncodingString Remarks Contains different variants of string for different encoding Constructors MultiEncodingString(IEnumerable<KeyValuePair<Encoding, String>>) Ctor for custom encoding presentations Declaration public MultiEncodingString(IEnumerable<KeyValuePair<Encoding, string>> encodedStrings) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Text.Encoding , System.String >> encodedStrings MultiEncodingString(String) Ctor for ascii-only presentation Declaration public MultiEncodingString(string asciiPresentation) Parameters Type Name Description System.String asciiPresentation MultiEncodingString(String, String) Ctor for specified unicode and ascii presentations Declaration public MultiEncodingString(string asciiPresentation, string unicodePresentation) Parameters Type Name Description System.String asciiPresentation System.String unicodePresentation Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() GetString(Encoding) Declaration public string GetString(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() ToString(Encoding) Declaration public string ToString(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding Returns Type Description System.String Operators Implicit(String to MultiEncodingString) Declaration public static implicit operator MultiEncodingString(string s) Parameters Type Name Description System.String s Returns Type Description MultiEncodingString Implicit( to MultiEncodingString) Declaration public static implicit operator MultiEncodingString(tuple) Parameters Type Name Description System. tuple Returns Type Description MultiEncodingString"
  },
  "api/BenchmarkDotNet.Loggers.ILogger.html": {
    "href": "api/BenchmarkDotNet.Loggers.ILogger.html",
    "title": "Interface ILogger | BenchmarkDotNet",
    "keywords": "Interface ILogger Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public interface ILogger Methods Write(LogKind, String) Declaration void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration void WriteLine() WriteLine(LogKind, String) Declaration void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Loggers.LoggerExtensions.html": {
    "href": "api/BenchmarkDotNet.Loggers.LoggerExtensions.html",
    "title": "Class LoggerExtensions | BenchmarkDotNet",
    "keywords": "Class LoggerExtensions Inheritance System.Object LoggerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public static class LoggerExtensions Methods Write(ILogger, String) Declaration public static void Write(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteError(ILogger, String) Declaration public static void WriteError(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteHeader(ILogger, String) Declaration public static void WriteHeader(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteHelp(ILogger, String) Declaration public static void WriteHelp(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteHint(ILogger, String) Declaration public static void WriteHint(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteInfo(ILogger, String) Declaration public static void WriteInfo(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLine(ILogger, String) Declaration public static void WriteLine(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineError(ILogger, String) Declaration public static void WriteLineError(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineHeader(ILogger, String) Declaration public static void WriteLineHeader(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineHelp(ILogger, String) Declaration public static void WriteLineHelp(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineHint(ILogger, String) Declaration public static void WriteLineHint(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineInfo(ILogger, String) Declaration public static void WriteLineInfo(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineResult(ILogger, String) Declaration public static void WriteLineResult(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteLineStatistic(ILogger, String) Declaration public static void WriteLineStatistic(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteResult(ILogger, String) Declaration public static void WriteResult(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text WriteStatistic(ILogger, String) Declaration public static void WriteStatistic(this ILogger logger, string text) Parameters Type Name Description ILogger logger System.String text"
  },
  "api/BenchmarkDotNet.Loggers.LoggerWithPrefix.html": {
    "href": "api/BenchmarkDotNet.Loggers.LoggerWithPrefix.html",
    "title": "Class LoggerWithPrefix | BenchmarkDotNet",
    "keywords": "Class LoggerWithPrefix Adds prefix for each line Inheritance System.Object LoggerWithPrefix Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public class LoggerWithPrefix : ILogger Constructors LoggerWithPrefix(ILogger, String) Declaration public LoggerWithPrefix(ILogger logger, string prefix) Parameters Type Name Description ILogger logger System.String prefix Properties Logger Declaration public ILogger Logger { get; } Property Value Type Description ILogger Prefix Declaration public string Prefix { get; } Property Value Type Description System.String Methods Write(LogKind, String) Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text WriteLine() Declaration public void WriteLine() WriteLine(LogKind, String) Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description LogKind logKind System.String text Implements ILogger Extension Methods LoggerExtensions.WriteLine(ILogger, String) LoggerExtensions.WriteLineHelp(ILogger, String) LoggerExtensions.WriteLineHeader(ILogger, String) LoggerExtensions.WriteLineResult(ILogger, String) LoggerExtensions.WriteLineStatistic(ILogger, String) LoggerExtensions.WriteLineInfo(ILogger, String) LoggerExtensions.WriteLineError(ILogger, String) LoggerExtensions.WriteLineHint(ILogger, String) LoggerExtensions.Write(ILogger, String) LoggerExtensions.WriteHelp(ILogger, String) LoggerExtensions.WriteHeader(ILogger, String) LoggerExtensions.WriteResult(ILogger, String) LoggerExtensions.WriteStatistic(ILogger, String) LoggerExtensions.WriteInfo(ILogger, String) LoggerExtensions.WriteError(ILogger, String) LoggerExtensions.WriteHint(ILogger, String)"
  },
  "api/BenchmarkDotNet.Loggers.LogKind.html": {
    "href": "api/BenchmarkDotNet.Loggers.LogKind.html",
    "title": "Enum LogKind | BenchmarkDotNet",
    "keywords": "Enum LogKind Namespace : BenchmarkDotNet.Loggers Assembly : BenchmarkDotNet.dll Syntax public enum LogKind Fields Name Description Default Error Header Help Hint Info Result Statistic"
  },
  "api/BenchmarkDotNet.Parameters.ParameterDefinitions.html": {
    "href": "api/BenchmarkDotNet.Parameters.ParameterDefinitions.html",
    "title": "Class ParameterDefinitions | BenchmarkDotNet",
    "keywords": "Class ParameterDefinitions Inheritance System.Object ParameterDefinitions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Parameters Assembly : BenchmarkDotNet.dll Syntax public class ParameterDefinitions Constructors ParameterDefinitions(IReadOnlyList<ParameterDefinition>) Declaration public ParameterDefinitions(IReadOnlyList<ParameterDefinition> items) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < ParameterDefinition > items Properties Items Declaration public IReadOnlyList<ParameterDefinition> Items { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ParameterDefinition > Methods Expand() Declaration public IReadOnlyList<ParameterInstances> Expand() Returns Type Description System.Collections.Generic.IReadOnlyList < ParameterInstances > ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Parameters.ParameterInstance.html": {
    "href": "api/BenchmarkDotNet.Parameters.ParameterInstance.html",
    "title": "Class ParameterInstance | BenchmarkDotNet",
    "keywords": "Class ParameterInstance Inheritance System.Object ParameterInstance Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Parameters Assembly : BenchmarkDotNet.dll Syntax public class ParameterInstance Constructors ParameterInstance(ParameterDefinition, Object) Declaration public ParameterInstance(ParameterDefinition definition, object value) Parameters Type Name Description ParameterDefinition definition System.Object value Fields NullParameterTextRepresentation Declaration public const string NullParameterTextRepresentation = \"?\" Field Value Type Description System.String Properties Definition Declaration public ParameterDefinition Definition { get; } Property Value Type Description ParameterDefinition IsArgument Declaration public bool IsArgument { get; } Property Value Type Description System.Boolean IsStatic Declaration public bool IsStatic { get; } Property Value Type Description System.Boolean Name Declaration public string Name { get; } Property Value Type Description System.String Value Declaration public object Value { get; } Property Value Type Description System.Object Methods ToDisplayText() Declaration public string ToDisplayText() Returns Type Description System.String ToSourceCode() Declaration public string ToSourceCode() Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/BenchmarkDotNet.Parameters.ParameterInstances.html": {
    "href": "api/BenchmarkDotNet.Parameters.ParameterInstances.html",
    "title": "Class ParameterInstances | BenchmarkDotNet",
    "keywords": "Class ParameterInstances Inheritance System.Object ParameterInstances Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Parameters Assembly : BenchmarkDotNet.dll Syntax public class ParameterInstances Constructors ParameterInstances(IReadOnlyList<ParameterInstance>) Declaration public ParameterInstances(IReadOnlyList<ParameterInstance> items) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < ParameterInstance > items Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 DisplayInfo Declaration public string DisplayInfo { get; } Property Value Type Description System.String FolderInfo Declaration public string FolderInfo { get; } Property Value Type Description System.String Item[Int32] Declaration public ParameterInstance this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description ParameterInstance Item[String] Declaration public object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object Items Declaration public IReadOnlyList<ParameterInstance> Items { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < ParameterInstance > PrintInfo Declaration public string PrintInfo { get; } Property Value Type Description System.String Methods GetArgument(String) Declaration public ParameterInstance GetArgument(string name) Parameters Type Name Description System.String name Returns Type Description ParameterInstance"
  },
  "api/BenchmarkDotNet.Parameters.html": {
    "href": "api/BenchmarkDotNet.Parameters.html",
    "title": "Namespace BenchmarkDotNet.Parameters | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Parameters Classes ParameterDefinition ParameterDefinitions ParameterInstance ParameterInstances"
  },
  "api/BenchmarkDotNet.Running.BenchmarkPartitioner.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkPartitioner.html",
    "title": "Class BenchmarkPartitioner | BenchmarkDotNet",
    "keywords": "Class BenchmarkPartitioner Inheritance System.Object BenchmarkPartitioner Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class BenchmarkPartitioner Methods CreateForBuild(BenchmarkRunInfo[], IResolver) Declaration public static BuildPartition[] CreateForBuild(BenchmarkRunInfo[] supportedBenchmarks, IResolver resolver) Parameters Type Name Description BenchmarkRunInfo [] supportedBenchmarks IResolver resolver Returns Type Description BuildPartition []"
  },
  "api/BenchmarkDotNet.Running.BenchmarkRunInfo.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkRunInfo.html",
    "title": "Class BenchmarkRunInfo | BenchmarkDotNet",
    "keywords": "Class BenchmarkRunInfo Inheritance System.Object BenchmarkRunInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class BenchmarkRunInfo Constructors BenchmarkRunInfo(Benchmark[], Type, ReadOnlyConfig) Declaration public BenchmarkRunInfo(Benchmark[] benchmarks, Type type, ReadOnlyConfig config) Parameters Type Name Description Benchmark [] benchmarks System.Type type ReadOnlyConfig config Properties Benchmarks Declaration public Benchmark[] Benchmarks { get; } Property Value Type Description Benchmark [] Config Declaration public ReadOnlyConfig Config { get; } Property Value Type Description ReadOnlyConfig Type Declaration public Type Type { get; } Property Value Type Description System.Type"
  },
  "api/BenchmarkDotNet.Running.BenchmarkRunner.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkRunner.html",
    "title": "Class BenchmarkRunner | BenchmarkDotNet",
    "keywords": "Class BenchmarkRunner Inheritance System.Object BenchmarkRunner Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public static class BenchmarkRunner Methods Run(BenchmarkRunInfo, Boolean) Declaration public static Summary Run(BenchmarkRunInfo benchmarkRunInfo, bool summaryPerType) Parameters Type Name Description BenchmarkRunInfo benchmarkRunInfo System.Boolean summaryPerType Returns Type Description Summary Run(BenchmarkRunInfo[], IConfig, Boolean) Declaration public static Summary[] Run(BenchmarkRunInfo[] benchmarkRunInfos, IConfig commonSettingsConfig, bool summaryPerType) Parameters Type Name Description BenchmarkRunInfo [] benchmarkRunInfos IConfig commonSettingsConfig System.Boolean summaryPerType Returns Type Description Summary [] Run(Assembly, Boolean, IConfig) Declaration public static Summary[] Run(Assembly assembly, bool summaryPerType, IConfig config = null) Parameters Type Name Description System.Reflection.Assembly assembly System.Boolean summaryPerType IConfig config Returns Type Description Summary [] Run(Type, IConfig) Declaration public static Summary Run(Type type, IConfig config = null) Parameters Type Name Description System.Type type IConfig config Returns Type Description Summary Run(Type, MethodInfo[], IConfig) Declaration public static Summary Run(Type type, MethodInfo[] methods, IConfig config = null) Parameters Type Name Description System.Type type System.Reflection.MethodInfo [] methods IConfig config Returns Type Description Summary Run<T>(IConfig) Declaration public static Summary Run<T>(IConfig config = null) Parameters Type Name Description IConfig config Returns Type Description Summary Type Parameters Name Description T RunSource(String, IConfig) Declaration public static Summary RunSource(string source, IConfig config = null) Parameters Type Name Description System.String source IConfig config Returns Type Description Summary RunUrl(String, IConfig) Declaration public static Summary RunUrl(string url, IConfig config = null) Parameters Type Name Description System.String url IConfig config Returns Type Description Summary"
  },
  "api/BenchmarkDotNet.Running.BenchmarkSwitcher.html": {
    "href": "api/BenchmarkDotNet.Running.BenchmarkSwitcher.html",
    "title": "Class BenchmarkSwitcher | BenchmarkDotNet",
    "keywords": "Class BenchmarkSwitcher Inheritance System.Object BenchmarkSwitcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Running Assembly : BenchmarkDotNet.dll Syntax public class BenchmarkSwitcher Constructors BenchmarkSwitcher(Assembly) Declaration public BenchmarkSwitcher(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly BenchmarkSwitcher(Assembly[]) Declaration public BenchmarkSwitcher(Assembly[] assemblies) Parameters Type Name Description System.Reflection.Assembly [] assemblies BenchmarkSwitcher(Type[]) Declaration public BenchmarkSwitcher(Type[] types) Parameters Type Name Description System.Type [] types Methods FromAssemblies(Assembly[]) Declaration public static BenchmarkSwitcher FromAssemblies(Assembly[] assemblies) Parameters Type Name Description System.Reflection.Assembly [] assemblies Returns Type Description BenchmarkSwitcher FromAssembly(Assembly) Declaration public static BenchmarkSwitcher FromAssembly(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Returns Type Description BenchmarkSwitcher FromAssemblyAndTypes(Assembly, Type[]) Declaration public static BenchmarkSwitcher FromAssemblyAndTypes(Assembly assembly, Type[] types) Parameters Type Name Description System.Reflection.Assembly assembly System.Type [] types Returns Type Description BenchmarkSwitcher FromTypes(Type[]) Declaration public static BenchmarkSwitcher FromTypes(Type[] types) Parameters Type Name Description System.Type [] types Returns Type Description BenchmarkSwitcher Run(String[], IConfig) Declaration public IEnumerable<Summary> Run(string[] args = null, IConfig config = null) Parameters Type Name Description System.String [] args IConfig config Returns Type Description System.Collections.Generic.IEnumerable < Summary > RunAll() Run all available benchmarks. Declaration public IEnumerable<Summary> RunAll() Returns Type Description System.Collections.Generic.IEnumerable < Summary > RunAllJoined() Run all available benchmarks and join them to a single summary Declaration public Summary RunAllJoined() Returns Type Description Summary ShouldDisplayOptions(String[]) Declaration public bool ShouldDisplayOptions(string[] args) Parameters Type Name Description System.String [] args Returns Type Description System.Boolean"
  },
  "api/BenchmarkDotNet.Toolchains.IGenerator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.IGenerator.html",
    "title": "Interface IGenerator | BenchmarkDotNet",
    "keywords": "Interface IGenerator Namespace : BenchmarkDotNet.Toolchains Assembly : BenchmarkDotNet.dll Syntax public interface IGenerator Methods GenerateProject(BuildPartition, ILogger, String) Declaration GenerateResult GenerateProject(BuildPartition buildPartition, ILogger logger, string rootArtifactsFolderPath) Parameters Type Name Description BuildPartition buildPartition ILogger logger System.String rootArtifactsFolderPath Returns Type Description GenerateResult"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.BenchmarkAction.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.BenchmarkAction.html",
    "title": "Class BenchmarkAction | BenchmarkDotNet",
    "keywords": "Class BenchmarkAction Common API to run the Setup/Clean/Idle/Run methods Inheritance System.Object BenchmarkAction Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public abstract class BenchmarkAction Properties InvokeMultiple Gets or sets invoke multiple times callback. Declaration public Action<long> InvokeMultiple { get; protected set; } Property Value Type Description System.Action < System.Int64 > Invoke multiple times callback. InvokeSingle Gets or sets invoke single callback. Declaration public Action InvokeSingle { get; protected set; } Property Value Type Description System.Action Invoke single callback. LastRunResult Gets the last run result. Declaration public virtual object LastRunResult { get; } Property Value Type Description System.Object The last run result."
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.BenchmarkActionCodegen.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.BenchmarkActionCodegen.html",
    "title": "Enum BenchmarkActionCodegen | BenchmarkDotNet",
    "keywords": "Enum BenchmarkActionCodegen How benchmark action code is generated Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public enum BenchmarkActionCodegen Fields Name Description DelegateCombine Fallback option: the unroll feature is implemented using System.Delegate.Combine(System.Delegate,System.Delegate) method. Has additional overhead (+1 delegate call) but should work on all platforms. ReflectionEmit The unroll feature is implemented using dynamic method codegen (Reflection.Emit). Provides most accurate results but may not work as expected on some platforms (e.g. .Net Native)."
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.BenchmarkActionFactory.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.BenchmarkActionFactory.html",
    "title": "Class BenchmarkActionFactory | BenchmarkDotNet",
    "keywords": "Class BenchmarkActionFactory Helper class that creates BenchmarkAction instances. Inheritance System.Object BenchmarkActionFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public static class BenchmarkActionFactory Methods CreateDummy() Creates a dummy benchmark action. Declaration public static BenchmarkAction CreateDummy() Returns Type Description BenchmarkAction Dummy benchmark action. CreateGlobalCleanup(Target, Object) Creates global cleanup benchmark action. Declaration public static BenchmarkAction CreateGlobalCleanup(Target target, object instance) Parameters Type Name Description Target target Target info. System.Object instance Instance of target. Returns Type Description BenchmarkAction Cleanup benchmark action. CreateGlobalSetup(Target, Object) Creates global setup benchmark action. Declaration public static BenchmarkAction CreateGlobalSetup(Target target, object instance) Parameters Type Name Description Target target Target info. System.Object instance Instance of target. Returns Type Description BenchmarkAction Setup benchmark action. CreateIdle(Target, Object, BenchmarkActionCodegen, Int32) Creates idle benchmark action. Declaration public static BenchmarkAction CreateIdle(Target target, object instance, BenchmarkActionCodegen codegenMode, int unrollFactor) Parameters Type Name Description Target target Target info. System.Object instance Instance of target. BenchmarkActionCodegen codegenMode Describes how benchmark action code is generated. System.Int32 unrollFactor Unroll factor. Returns Type Description BenchmarkAction Idle benchmark action. CreateIterationCleanup(Target, Object) Creates global cleanup benchmark action. Declaration public static BenchmarkAction CreateIterationCleanup(Target target, object instance) Parameters Type Name Description Target target Target info. System.Object instance Instance of target. Returns Type Description BenchmarkAction Cleanup benchmark action. CreateIterationSetup(Target, Object) Creates global setup benchmark action. Declaration public static BenchmarkAction CreateIterationSetup(Target target, object instance) Parameters Type Name Description Target target Target info. System.Object instance Instance of target. Returns Type Description BenchmarkAction Setup benchmark action. CreateRun(Target, Object, BenchmarkActionCodegen, Int32) Creates run benchmark action. Declaration public static BenchmarkAction CreateRun(Target target, object instance, BenchmarkActionCodegen codegenMode, int unrollFactor) Parameters Type Name Description Target target Target info. System.Object instance Instance of target. BenchmarkActionCodegen codegenMode Describes how benchmark action code is generated. System.Int32 unrollFactor Unroll factor. Returns Type Description BenchmarkAction Run benchmark action."
  },
  "api/BenchmarkDotNet.Validators.JitOptimizationsValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.JitOptimizationsValidator.html",
    "title": "Class JitOptimizationsValidator | BenchmarkDotNet",
    "keywords": "Class JitOptimizationsValidator Inheritance System.Object JitOptimizationsValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class JitOptimizationsValidator : IValidator Fields DontFailOnError Declaration public static readonly IValidator DontFailOnError Field Value Type Description IValidator FailOnError Declaration public static readonly IValidator FailOnError Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.ReturnValueValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.ReturnValueValidator.html",
    "title": "Class ReturnValueValidator | BenchmarkDotNet",
    "keywords": "Class ReturnValueValidator Inheritance System.Object ExecutionValidatorBase ReturnValueValidator Implements IValidator Inherited Members ExecutionValidatorBase.TreatsWarningsAsErrors ExecutionValidatorBase.Validate(ValidationParameters) ExecutionValidatorBase.GetDisplayExceptionMessage(Exception) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class ReturnValueValidator : ExecutionValidatorBase, IValidator Properties DontFailOnError Declaration public static ReturnValueValidator DontFailOnError { get; } Property Value Type Description ReturnValueValidator FailOnError Declaration public static ReturnValueValidator FailOnError { get; } Property Value Type Description ReturnValueValidator Methods ExecuteBenchmarks(Object, IEnumerable<Benchmark>, List<ValidationError>) Declaration protected override void ExecuteBenchmarks(object benchmarkTypeInstance, IEnumerable<Benchmark> benchmarks, List<ValidationError> errors) Parameters Type Name Description System.Object benchmarkTypeInstance System.Collections.Generic.IEnumerable < Benchmark > benchmarks System.Collections.Generic.List < ValidationError > errors Overrides ExecutionValidatorBase.ExecuteBenchmarks(Object, IEnumerable<Benchmark>, List<ValidationError>) Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.RunModeValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.RunModeValidator.html",
    "title": "Class RunModeValidator | BenchmarkDotNet",
    "keywords": "Class RunModeValidator Inheritance System.Object RunModeValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class RunModeValidator : IValidator Fields FailOnError Declaration public static readonly IValidator FailOnError Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.SetupCleanupValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.SetupCleanupValidator.html",
    "title": "Class SetupCleanupValidator | BenchmarkDotNet",
    "keywords": "Class SetupCleanupValidator Inheritance System.Object SetupCleanupValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class SetupCleanupValidator : IValidator Fields FailOnError Declaration public static readonly SetupCleanupValidator FailOnError Field Value Type Description SetupCleanupValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters input) Parameters Type Name Description ValidationParameters input Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Attributes.HtmlExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.HtmlExporterAttribute.html",
    "title": "Class HtmlExporterAttribute | BenchmarkDotNet",
    "keywords": "Class HtmlExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute HtmlExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class HtmlExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors HtmlExporterAttribute() Declaration public HtmlExporterAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.BriefCompressed.html": {
    "href": "api/BenchmarkDotNet.Attributes.JsonExporterAttribute.BriefCompressed.html",
    "title": "Class JsonExporterAttribute.BriefCompressed | BenchmarkDotNet",
    "keywords": "Class JsonExporterAttribute.BriefCompressed Inheritance System.Object System.Attribute ExporterConfigBaseAttribute JsonExporterAttribute JsonExporterAttribute.BriefCompressed Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class BriefCompressed : JsonExporterAttribute, IConfigSource Constructors BriefCompressed() Declaration public BriefCompressed() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.Atlassian.html": {
    "href": "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.Atlassian.html",
    "title": "Class MarkdownExporterAttribute.Atlassian | BenchmarkDotNet",
    "keywords": "Class MarkdownExporterAttribute.Atlassian Inheritance System.Object System.Attribute ExporterConfigBaseAttribute MarkdownExporterAttribute.Atlassian Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Atlassian : ExporterConfigBaseAttribute, IConfigSource Constructors Atlassian() Declaration public Atlassian() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.Default.html": {
    "href": "api/BenchmarkDotNet.Attributes.MarkdownExporterAttribute.Default.html",
    "title": "Class MarkdownExporterAttribute.Default | BenchmarkDotNet",
    "keywords": "Class MarkdownExporterAttribute.Default Inheritance System.Object System.Attribute ExporterConfigBaseAttribute MarkdownExporterAttribute.Default Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Default : ExporterConfigBaseAttribute, IConfigSource Constructors Default() Declaration public Default() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.Q3ColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.Q3ColumnAttribute.html",
    "title": "Class Q3ColumnAttribute | BenchmarkDotNet",
    "keywords": "Class Q3ColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute Q3ColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Q3ColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors Q3ColumnAttribute() Declaration public Q3ColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.RankColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.RankColumnAttribute.html",
    "title": "Class RankColumnAttribute | BenchmarkDotNet",
    "keywords": "Class RankColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute RankColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true)] public class RankColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors RankColumnAttribute(NumeralSystem) Declaration public RankColumnAttribute(NumeralSystem system = NumeralSystem.Arabic) Parameters Type Name Description NumeralSystem system Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.Brief.html": {
    "href": "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.Brief.html",
    "title": "Class XmlExporterAttribute.Brief | BenchmarkDotNet",
    "keywords": "Class XmlExporterAttribute.Brief Inheritance System.Object System.Attribute ExporterConfigBaseAttribute XmlExporterAttribute XmlExporterAttribute.Brief Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Brief : XmlExporterAttribute, IConfigSource Constructors Brief() Declaration public Brief() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.BriefCompressed.html": {
    "href": "api/BenchmarkDotNet.Attributes.XmlExporterAttribute.BriefCompressed.html",
    "title": "Class XmlExporterAttribute.BriefCompressed | BenchmarkDotNet",
    "keywords": "Class XmlExporterAttribute.BriefCompressed Inheritance System.Object System.Attribute ExporterConfigBaseAttribute XmlExporterAttribute XmlExporterAttribute.BriefCompressed Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class BriefCompressed : XmlExporterAttribute, IConfigSource Constructors BriefCompressed() Declaration public BriefCompressed() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Characteristics.Resolver.html": {
    "href": "api/BenchmarkDotNet.Characteristics.Resolver.html",
    "title": "Class Resolver | BenchmarkDotNet",
    "keywords": "Class Resolver Inheritance System.Object Resolver EngineResolver EnvResolver GcResolver InfrastructureResolver Implements IResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public class Resolver : IResolver Methods CanResolve(Characteristic) Declaration public bool CanResolve(Characteristic characteristic) Parameters Type Name Description Characteristic characteristic Returns Type Description System.Boolean Register<T>(Characteristic<T>, Func<T>) Declaration protected void Register<T>(Characteristic<T> characteristic, Func<T> resolver) Parameters Type Name Description Characteristic <T> characteristic System.Func <T> resolver Type Parameters Name Description T Register<T>(Characteristic<T>, Func<CharacteristicObject, T>) Declaration protected void Register<T>(Characteristic<T> characteristic, Func<CharacteristicObject, T> resolver) Parameters Type Name Description Characteristic <T> characteristic System.Func < CharacteristicObject , T> resolver Type Parameters Name Description T Resolve(CharacteristicObject, Characteristic) Declaration public object Resolve(CharacteristicObject obj, Characteristic characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic characteristic Returns Type Description System.Object Resolve<T>(CharacteristicObject, Characteristic<T>) Declaration public T Resolve<T>(CharacteristicObject obj, Characteristic<T> characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic <T> characteristic Returns Type Description T Type Parameters Name Description T Implements IResolver"
  },
  "api/BenchmarkDotNet.Characteristics.html": {
    "href": "api/BenchmarkDotNet.Characteristics.html",
    "title": "Namespace BenchmarkDotNet.Characteristics | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Characteristics Classes Characteristic Characteristic<T> CharacteristicHelper CharacteristicObject CharacteristicObject<T> CharacteristicPresenter CharacteristicSet CharacteristicSetPresenter CompositeResolver Resolver Interfaces IResolver An entity which can resolve default values of Characteristic<T> ."
  },
  "api/BenchmarkDotNet.Columns.JobCharacteristicColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.JobCharacteristicColumn.html",
    "title": "Class JobCharacteristicColumn | BenchmarkDotNet",
    "keywords": "Class JobCharacteristicColumn Inheritance System.Object JobCharacteristicColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class JobCharacteristicColumn : IColumn Constructors JobCharacteristicColumn(Characteristic) Declaration public JobCharacteristicColumn(Characteristic characteristic) Parameters Type Name Description Characteristic characteristic Properties AllColumns Declaration public static IColumn[] AllColumns { get; } Property Value Type Description IColumn [] AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Columns.LogicalGroupColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.LogicalGroupColumn.html",
    "title": "Class LogicalGroupColumn | BenchmarkDotNet",
    "keywords": "Class LogicalGroupColumn Inheritance System.Object LogicalGroupColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class LogicalGroupColumn : IColumn Fields Default Declaration public static readonly IColumn Default Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Configs.DefaultConfig.html": {
    "href": "api/BenchmarkDotNet.Configs.DefaultConfig.html",
    "title": "Class DefaultConfig | BenchmarkDotNet",
    "keywords": "Class DefaultConfig Inheritance System.Object DefaultConfig Implements IConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public class DefaultConfig : IConfig Fields Instance Declaration public static readonly IConfig Instance Field Value Type Description IConfig Properties ArtifactsPath Declaration public string ArtifactsPath { get; } Property Value Type Description System.String Encoding Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding KeepBenchmarkFiles Declaration public bool KeepBenchmarkFiles { get; } Property Value Type Description System.Boolean UnionRule Declaration public ConfigUnionRule UnionRule { get; } Property Value Type Description ConfigUnionRule Methods GetAnalysers() Declaration public IEnumerable<IAnalyser> GetAnalysers() Returns Type Description System.Collections.Generic.IEnumerable < IAnalyser > GetColumnProviders() Declaration public IEnumerable<IColumnProvider> GetColumnProviders() Returns Type Description System.Collections.Generic.IEnumerable < IColumnProvider > GetDiagnosers() Declaration public IEnumerable<IDiagnoser> GetDiagnosers() Returns Type Description System.Collections.Generic.IEnumerable < IDiagnoser > GetExporters() Declaration public IEnumerable<IExporter> GetExporters() Returns Type Description System.Collections.Generic.IEnumerable < IExporter > GetFilters() Declaration public IEnumerable<IFilter> GetFilters() Returns Type Description System.Collections.Generic.IEnumerable < IFilter > GetHardwareCounters() Declaration public IEnumerable<HardwareCounter> GetHardwareCounters() Returns Type Description System.Collections.Generic.IEnumerable < HardwareCounter > GetJobs() Declaration public IEnumerable<Job> GetJobs() Returns Type Description System.Collections.Generic.IEnumerable < Job > GetLoggers() Declaration public IEnumerable<ILogger> GetLoggers() Returns Type Description System.Collections.Generic.IEnumerable < ILogger > GetLogicalGroupRules() Declaration public IEnumerable<BenchmarkLogicalGroupRule> GetLogicalGroupRules() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkLogicalGroupRule > GetOrderProvider() Declaration public IOrderProvider GetOrderProvider() Returns Type Description IOrderProvider GetSummaryStyle() Declaration public ISummaryStyle GetSummaryStyle() Returns Type Description ISummaryStyle GetValidators() Declaration public IEnumerable<IValidator> GetValidators() Returns Type Description System.Collections.Generic.IEnumerable < IValidator > Implements IConfig Extension Methods ConfigExtensions.GetCompositeLogger(IConfig) ConfigExtensions.GetCompositeExporter(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig, Benchmark, RunMode) ConfigExtensions.GetCompositeAnalyser(IConfig) ConfigExtensions.GetCompositeValidator(IConfig) ConfigExtensions.With(IConfig, IColumn[]) ConfigExtensions.With(IConfig, IColumnProvider[]) ConfigExtensions.With(IConfig, ILogger[]) ConfigExtensions.With(IConfig, IExporter[]) ConfigExtensions.With(IConfig, IDiagnoser[]) ConfigExtensions.With(IConfig, IAnalyser[]) ConfigExtensions.With(IConfig, IValidator[]) ConfigExtensions.With(IConfig, Job[]) ConfigExtensions.With(IConfig, IOrderProvider) ConfigExtensions.With(IConfig, HardwareCounter[]) ConfigExtensions.With(IConfig, IFilter[]) ConfigExtensions.With(IConfig, Encoding) ConfigExtensions.KeepBenchmarkFiles(IConfig, Boolean) ConfigExtensions.RemoveBenchmarkFiles(IConfig) ConfigExtensions.WithArtifactsPath(IConfig, String) ConfigExtensions.With(IConfig, BenchmarkLogicalGroupRule[]) ConfigExtensions.AsReadOnly(IConfig) ConfigExtensions.HasMemoryDiagnoser(IConfig)"
  },
  "api/BenchmarkDotNet.Configs.IConfig.html": {
    "href": "api/BenchmarkDotNet.Configs.IConfig.html",
    "title": "Interface IConfig | BenchmarkDotNet",
    "keywords": "Interface IConfig Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public interface IConfig Properties ArtifactsPath the default value is \"./BenchmarkDotNet.Artifacts\" Declaration string ArtifactsPath { get; } Property Value Type Description System.String Encoding the default value is ASCII Declaration Encoding Encoding { get; } Property Value Type Description System.Text.Encoding KeepBenchmarkFiles determines if all auto-generated files should be kept or removed after running benchmarks Declaration bool KeepBenchmarkFiles { get; } Property Value Type Description System.Boolean UnionRule Declaration ConfigUnionRule UnionRule { get; } Property Value Type Description ConfigUnionRule Methods GetAnalysers() Declaration IEnumerable<IAnalyser> GetAnalysers() Returns Type Description System.Collections.Generic.IEnumerable < IAnalyser > GetColumnProviders() Declaration IEnumerable<IColumnProvider> GetColumnProviders() Returns Type Description System.Collections.Generic.IEnumerable < IColumnProvider > GetDiagnosers() Declaration IEnumerable<IDiagnoser> GetDiagnosers() Returns Type Description System.Collections.Generic.IEnumerable < IDiagnoser > GetExporters() Declaration IEnumerable<IExporter> GetExporters() Returns Type Description System.Collections.Generic.IEnumerable < IExporter > GetFilters() Declaration IEnumerable<IFilter> GetFilters() Returns Type Description System.Collections.Generic.IEnumerable < IFilter > GetHardwareCounters() Declaration IEnumerable<HardwareCounter> GetHardwareCounters() Returns Type Description System.Collections.Generic.IEnumerable < HardwareCounter > GetJobs() Declaration IEnumerable<Job> GetJobs() Returns Type Description System.Collections.Generic.IEnumerable < Job > GetLoggers() Declaration IEnumerable<ILogger> GetLoggers() Returns Type Description System.Collections.Generic.IEnumerable < ILogger > GetLogicalGroupRules() Declaration IEnumerable<BenchmarkLogicalGroupRule> GetLogicalGroupRules() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkLogicalGroupRule > GetOrderProvider() Declaration IOrderProvider GetOrderProvider() Returns Type Description IOrderProvider GetSummaryStyle() Declaration ISummaryStyle GetSummaryStyle() Returns Type Description ISummaryStyle GetValidators() Declaration IEnumerable<IValidator> GetValidators() Returns Type Description System.Collections.Generic.IEnumerable < IValidator > Extension Methods ConfigExtensions.GetCompositeLogger(IConfig) ConfigExtensions.GetCompositeExporter(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig) ConfigExtensions.GetCompositeDiagnoser(IConfig, Benchmark, RunMode) ConfigExtensions.GetCompositeAnalyser(IConfig) ConfigExtensions.GetCompositeValidator(IConfig) ConfigExtensions.With(IConfig, IColumn[]) ConfigExtensions.With(IConfig, IColumnProvider[]) ConfigExtensions.With(IConfig, ILogger[]) ConfigExtensions.With(IConfig, IExporter[]) ConfigExtensions.With(IConfig, IDiagnoser[]) ConfigExtensions.With(IConfig, IAnalyser[]) ConfigExtensions.With(IConfig, IValidator[]) ConfigExtensions.With(IConfig, Job[]) ConfigExtensions.With(IConfig, IOrderProvider) ConfigExtensions.With(IConfig, HardwareCounter[]) ConfigExtensions.With(IConfig, IFilter[]) ConfigExtensions.With(IConfig, Encoding) ConfigExtensions.KeepBenchmarkFiles(IConfig, Boolean) ConfigExtensions.RemoveBenchmarkFiles(IConfig) ConfigExtensions.WithArtifactsPath(IConfig, String) ConfigExtensions.With(IConfig, BenchmarkLogicalGroupRule[]) ConfigExtensions.AsReadOnly(IConfig) ConfigExtensions.HasMemoryDiagnoser(IConfig)"
  },
  "api/BenchmarkDotNet.Diagnosers.DisassemblyResult.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DisassemblyResult.html",
    "title": "Class DisassemblyResult | BenchmarkDotNet",
    "keywords": "Class DisassemblyResult Inheritance System.Object DisassemblyResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DisassemblyResult Constructors DisassemblyResult() Declaration public DisassemblyResult() Properties Errors Declaration public string[] Errors { get; set; } Property Value Type Description System.String [] Methods Declaration public DisassembledMethod[] Methods { get; set; } Property Value Type Description DisassembledMethod []"
  },
  "api/BenchmarkDotNet.Diagnosers.HardwareCounter.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.HardwareCounter.html",
    "title": "Enum HardwareCounter | BenchmarkDotNet",
    "keywords": "Enum HardwareCounter Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public enum HardwareCounter Fields Name Description BranchInstructionRetired BranchInstructions BranchMispredictions BranchMispredictsRetired CacheMisses InstructionRetired LlcMisses LlcReference NotSet Timer TotalCycles TotalIssues UnhaltedCoreCycles UnhaltedReferenceCycles Extension Methods HardwareCounterExtensions.ToShortName()"
  },
  "api/BenchmarkDotNet.Engines.ConsoleHost.html": {
    "href": "api/BenchmarkDotNet.Engines.ConsoleHost.html",
    "title": "Class ConsoleHost | BenchmarkDotNet",
    "keywords": "Class ConsoleHost Inheritance System.Object ConsoleHost Implements IHost Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public sealed class ConsoleHost : IHost Constructors ConsoleHost(TextWriter, TextReader) Declaration public ConsoleHost(TextWriter outWriter, TextReader inReader) Parameters Type Name Description System.IO.TextWriter outWriter System.IO.TextReader inReader Methods ReportResults(RunResults) Declaration public void ReportResults(RunResults runResults) Parameters Type Name Description RunResults runResults SendError(String) Declaration public void SendError(string message) Parameters Type Name Description System.String message SendSignal(HostSignal) Declaration public void SendSignal(HostSignal hostSignal) Parameters Type Name Description HostSignal hostSignal Write(String) Declaration public void Write(string message) Parameters Type Name Description System.String message WriteLine() Declaration public void WriteLine() WriteLine(String) Declaration public void WriteLine(string message) Parameters Type Name Description System.String message Implements IHost Extension Methods HostExtensions.WriteLine(IHost, String, Object[]) HostExtensions.BeforeAnythingElse(IHost) HostExtensions.BeforeMainRun(IHost) HostExtensions.AfterMainRun(IHost) HostExtensions.AfterAll(IHost)"
  },
  "api/BenchmarkDotNet.Engines.Consumer.html": {
    "href": "api/BenchmarkDotNet.Engines.Consumer.html",
    "title": "Class Consumer | BenchmarkDotNet",
    "keywords": "Class Consumer Inheritance System.Object Consumer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public class Consumer Methods Consume(Boolean) Declaration public void Consume(bool boolValue) Parameters Type Name Description System.Boolean boolValue Consume(Byte) Declaration public void Consume(byte byteValue) Parameters Type Name Description System.Byte byteValue Consume(Char) Declaration public void Consume(char charValue) Parameters Type Name Description System.Char charValue Consume(Double) Declaration public void Consume(double doubleValue) Parameters Type Name Description System.Double doubleValue Consume(Int16) Declaration public void Consume(short shortValue) Parameters Type Name Description System.Int16 shortValue Consume(Int32) Declaration public void Consume(int intValue) Parameters Type Name Description System.Int32 intValue Consume(Int64) Declaration public void Consume(long longValue) Parameters Type Name Description System.Int64 longValue Consume(Object) Declaration public void Consume(object objectValue) Parameters Type Name Description System.Object objectValue Consume(SByte) Declaration [CLSCompliant(false)] public void Consume(sbyte sbyteValue) Parameters Type Name Description System.SByte sbyteValue Consume(Single) Declaration public void Consume(float floatValue) Parameters Type Name Description System.Single floatValue Consume(String) Declaration public void Consume(string stringValue) Parameters Type Name Description System.String stringValue Consume(UInt16) Declaration [CLSCompliant(false)] public void Consume(ushort ushortValue) Parameters Type Name Description System.UInt16 ushortValue Consume(UInt32) Declaration [CLSCompliant(false)] public void Consume(uint uintValue) Parameters Type Name Description System.UInt32 uintValue Consume(UInt64) Declaration [CLSCompliant(false)] public void Consume(ulong ulongValue) Parameters Type Name Description System.UInt64 ulongValue Consume<T>(T) Declaration public void Consume<T>(T objectValue) where T : class Parameters Type Name Description T objectValue Type Parameters Name Description T"
  },
  "api/BenchmarkDotNet.Engines.html": {
    "href": "api/BenchmarkDotNet.Engines.html",
    "title": "Namespace BenchmarkDotNet.Engines | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Engines Classes ConsoleHost Consumer DeadCodeEliminationHelper Engine Engine.Signals EngineFactory EngineParameters EngineResolver EngineStage EngineTargetStage HostExtensions IterationModeExtensions RunStrategyExtensions Structs GcStats IterationData RunResults Interfaces IEngine IEngineFactory IHost Enums HostSignal IterationMode RunStrategy"
  },
  "api/BenchmarkDotNet.Environments.BenchmarkEnvironmentInfo.html": {
    "href": "api/BenchmarkDotNet.Environments.BenchmarkEnvironmentInfo.html",
    "title": "Class BenchmarkEnvironmentInfo | BenchmarkDotNet",
    "keywords": "Class BenchmarkEnvironmentInfo Inheritance System.Object BenchmarkEnvironmentInfo HostEnvironmentInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class BenchmarkEnvironmentInfo Constructors BenchmarkEnvironmentInfo() Declaration protected BenchmarkEnvironmentInfo() Properties Architecture Declaration public string Architecture { get; protected set; } Property Value Type Description System.String Configuration Declaration public string Configuration { get; protected set; } Property Value Type Description System.String GCAllocationQuantum Declaration public long GCAllocationQuantum { get; protected set; } Property Value Type Description System.Int64 HasAttachedDebugger Declaration public bool HasAttachedDebugger { get; protected set; } Property Value Type Description System.Boolean HasRyuJit Declaration public bool HasRyuJit { get; protected set; } Property Value Type Description System.Boolean IsConcurrentGC Declaration public bool IsConcurrentGC { get; protected set; } Property Value Type Description System.Boolean IsServerGC Declaration public bool IsServerGC { get; protected set; } Property Value Type Description System.Boolean JitInfo Declaration public string JitInfo { get; protected set; } Property Value Type Description System.String RuntimeVersion Declaration public string RuntimeVersion { get; protected set; } Property Value Type Description System.String Methods GetConfigurationFlag() Declaration protected string GetConfigurationFlag() Returns Type Description System.String GetCurrent() Declaration public static BenchmarkEnvironmentInfo GetCurrent() Returns Type Description BenchmarkEnvironmentInfo GetDebuggerFlag() Declaration protected string GetDebuggerFlag() Returns Type Description System.String GetGcConcurrentFlag() Declaration protected string GetGcConcurrentFlag() Returns Type Description System.String GetGcServerFlag() Declaration protected string GetGcServerFlag() Returns Type Description System.String ToFormattedString() Declaration public virtual IEnumerable<string> ToFormattedString() Returns Type Description System.Collections.Generic.IEnumerable < System.String > Validate(Job) Declaration public static IEnumerable<ValidationError> Validate(Job job) Parameters Type Name Description Job job Returns Type Description System.Collections.Generic.IEnumerable < ValidationError >"
  },
  "api/BenchmarkDotNet.Environments.ClrRuntime.html": {
    "href": "api/BenchmarkDotNet.Environments.ClrRuntime.html",
    "title": "Class ClrRuntime | BenchmarkDotNet",
    "keywords": "Class ClrRuntime Inheritance System.Object Runtime ClrRuntime Implements System.IEquatable < Runtime > System.IEquatable < ClrRuntime > Inherited Members Runtime.Clr Runtime.Mono Runtime.Core Runtime.CoreRT Runtime.Name Runtime.ToString() Runtime.Equals(Runtime) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class ClrRuntime : Runtime, IEquatable<Runtime>, IEquatable<ClrRuntime> Constructors ClrRuntime() Declaration public ClrRuntime() ClrRuntime(String) Declaration public ClrRuntime(string version) Parameters Type Name Description System.String version YOU PROBABLY DON'T NEED IT, but if you are a .NET Runtime developer.. please set it to particular .NET Runtime version if you want to benchmark it. BenchmarkDotNet in going to pass COMPLUS_Version env var to the process for you. Properties Version Declaration public string Version { get; } Property Value Type Description System.String Methods Equals(ClrRuntime) Declaration public bool Equals(ClrRuntime other) Parameters Type Name Description ClrRuntime other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Runtime.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Runtime.GetHashCode() Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/BenchmarkDotNet.Environments.CoreRtRuntime.html": {
    "href": "api/BenchmarkDotNet.Environments.CoreRtRuntime.html",
    "title": "Class CoreRtRuntime | BenchmarkDotNet",
    "keywords": "Class CoreRtRuntime Inheritance System.Object Runtime CoreRtRuntime Implements System.IEquatable < Runtime > Inherited Members Runtime.Clr Runtime.Mono Runtime.Core Runtime.CoreRT Runtime.Name Runtime.ToString() Runtime.Equals(Runtime) Runtime.Equals(Object) Runtime.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Environments Assembly : BenchmarkDotNet.dll Syntax public class CoreRtRuntime : Runtime, IEquatable<Runtime> Constructors CoreRtRuntime() Declaration public CoreRtRuntime() Implements System.IEquatable<T>"
  },
  "api/BenchmarkDotNet.Exporters.Csv.CsvSeparatorExtensions.html": {
    "href": "api/BenchmarkDotNet.Exporters.Csv.CsvSeparatorExtensions.html",
    "title": "Class CsvSeparatorExtensions | BenchmarkDotNet",
    "keywords": "Class CsvSeparatorExtensions Inheritance System.Object CsvSeparatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Csv Assembly : BenchmarkDotNet.dll Syntax public static class CsvSeparatorExtensions Methods ToRealSeparator(CsvSeparator) Return a string which represent real CSV separator which can be used as plain text. Declaration public static string ToRealSeparator(this CsvSeparator separator) Parameters Type Name Description CsvSeparator separator Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Exporters.Csv.html": {
    "href": "api/BenchmarkDotNet.Exporters.Csv.html",
    "title": "Namespace BenchmarkDotNet.Exporters.Csv | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Exporters.Csv Classes CsvExporter CsvHelper CsvMeasurementsExporter CsvSeparatorExtensions Enums CsvSeparator"
  },
  "api/BenchmarkDotNet.Exporters.DefaultExporters.html": {
    "href": "api/BenchmarkDotNet.Exporters.DefaultExporters.html",
    "title": "Class DefaultExporters | BenchmarkDotNet",
    "keywords": "Class DefaultExporters Inheritance System.Object DefaultExporters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public static class DefaultExporters Fields AsciiDoc Declaration public static IExporter AsciiDoc Field Value Type Description IExporter Csv Declaration public static IExporter Csv Field Value Type Description IExporter CsvMeasurements Declaration public static IExporter CsvMeasurements Field Value Type Description IExporter Html Declaration public static IExporter Html Field Value Type Description IExporter Json Declaration public static IExporter Json Field Value Type Description IExporter JsonBrief Declaration public static IExporter JsonBrief Field Value Type Description IExporter JsonBriefCompressed Declaration public static IExporter JsonBriefCompressed Field Value Type Description IExporter JsonFull Declaration public static IExporter JsonFull Field Value Type Description IExporter JsonFullCompressed Declaration public static IExporter JsonFullCompressed Field Value Type Description IExporter Markdown Declaration public static IExporter Markdown Field Value Type Description IExporter Plain Declaration public static IExporter Plain Field Value Type Description IExporter RPlot Declaration public static IExporter RPlot Field Value Type Description IExporter Xml Declaration public static IExporter Xml Field Value Type Description IExporter XmlBrief Declaration public static IExporter XmlBrief Field Value Type Description IExporter XmlBriefCompressed Declaration public static IExporter XmlBriefCompressed Field Value Type Description IExporter XmlFull Declaration public static IExporter XmlFull Field Value Type Description IExporter XmlFullCompressed Declaration public static IExporter XmlFullCompressed Field Value Type Description IExporter"
  },
  "api/BenchmarkDotNet.Exporters.ExporterBase.html": {
    "href": "api/BenchmarkDotNet.Exporters.ExporterBase.html",
    "title": "Class ExporterBase | BenchmarkDotNet",
    "keywords": "Class ExporterBase Inheritance System.Object ExporterBase AsciiDocExporter BenchmarkReportExporter CombinedDisassemblyExporter CsvExporter CsvMeasurementsExporter HtmlExporter JsonExporterBase MarkdownExporter PlainExporter XmlExporterBase Implements IExporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public abstract class ExporterBase : IExporter Properties Encoding Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding FileCaption Declaration protected virtual string FileCaption { get; } Property Value Type Description System.String FileExtension Declaration protected virtual string FileExtension { get; } Property Value Type Description System.String FileNameSuffix Declaration protected virtual string FileNameSuffix { get; } Property Value Type Description System.String Name Declaration public string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration public abstract void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Implements IExporter"
  },
  "api/BenchmarkDotNet.Filters.NamespacesFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.NamespacesFilter.html",
    "title": "Class NamespacesFilter | BenchmarkDotNet",
    "keywords": "Class NamespacesFilter filters benchmarks by provided namespaces Inheritance System.Object NamespacesFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class NamespacesFilter : IFilter Constructors NamespacesFilter(String[]) Declaration public NamespacesFilter(string[] namespaces) Parameters Type Name Description System.String [] namespaces Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.SimpleFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.SimpleFilter.html",
    "title": "Class SimpleFilter | BenchmarkDotNet",
    "keywords": "Class SimpleFilter Inheritance System.Object SimpleFilter NameFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class SimpleFilter : IFilter Constructors SimpleFilter(Func<Benchmark, Boolean>) Declaration public SimpleFilter(Func<Benchmark, bool> predicate) Parameters Type Name Description System.Func < Benchmark , System.Boolean > predicate Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.TypeNamesFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.TypeNamesFilter.html",
    "title": "Class TypeNamesFilter | BenchmarkDotNet",
    "keywords": "Class TypeNamesFilter filters benchmarks by provided type names Inheritance System.Object TypeNamesFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class TypeNamesFilter : IFilter Constructors TypeNamesFilter(String[]) Declaration public TypeNamesFilter(string[] typeNames) Parameters Type Name Description System.String [] typeNames Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.UnionFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.UnionFilter.html",
    "title": "Class UnionFilter | BenchmarkDotNet",
    "keywords": "Class UnionFilter Inheritance System.Object UnionFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class UnionFilter : IFilter Constructors UnionFilter(IFilter[]) Declaration public UnionFilter(params IFilter[] filters) Parameters Type Name Description IFilter [] filters Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Jobs.MetaMode.html": {
    "href": "api/BenchmarkDotNet.Jobs.MetaMode.html",
    "title": "Class MetaMode | BenchmarkDotNet",
    "keywords": "Class MetaMode Inheritance System.Object CharacteristicObject CharacteristicObject < MetaMode > JobMode < MetaMode > MetaMode Inherited Members JobMode<MetaMode>.Default JobMode<MetaMode>.Job CharacteristicObject<MetaMode>.Apply(CharacteristicObject) CharacteristicObject<MetaMode>.Apply(CharacteristicObject[]) CharacteristicObject<MetaMode>.ApplyAndFreeze(CharacteristicObject) CharacteristicObject<MetaMode>.ApplyAndFreeze(CharacteristicObject[]) CharacteristicObject<MetaMode>.Freeze() CharacteristicObject<MetaMode>.UnfreezeCopy() CharacteristicObject<MetaMode>.CreateCharacteristic<TC>(String) CharacteristicObject.ResolveId(CharacteristicObject, String) CharacteristicObject.IdCharacteristic CharacteristicObject.AssertNotFrozen() CharacteristicObject.AssertIsRoot() CharacteristicObject.AssertIsNonFrozenRoot() CharacteristicObject.AssertIsAssignable(Characteristic, Object) CharacteristicObject.Owner CharacteristicObject.OwnerOrSelf CharacteristicObject.Frozen CharacteristicObject.IsPropertyBag CharacteristicObject.HasChanges CharacteristicObject.GetCharacteristicsWithValues() CharacteristicObject.HasValue(Characteristic) CharacteristicObject.ResolveValue<T>(Characteristic<T>, IResolver) CharacteristicObject.ResolveValue(Characteristic, IResolver) CharacteristicObject.ResolveValue<T>(Characteristic<T>, T) CharacteristicObject.ResolveValue(Characteristic, Object) CharacteristicObject.ResolveValueAsNullable<T>(Characteristic<T>) CharacteristicObject.ApplyCore(CharacteristicObject) CharacteristicObject.FreezeCore() CharacteristicObject.UnfreezeCopyCore() CharacteristicObject.Id CharacteristicObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Jobs Assembly : BenchmarkDotNet.dll Syntax public class MetaMode : JobMode<MetaMode> Fields IsBaselineCharacteristic Declaration public static readonly Characteristic<bool> IsBaselineCharacteristic Field Value Type Description Characteristic < System.Boolean > Properties IsBaseline Declaration public bool IsBaseline { get; set; } Property Value Type Description System.Boolean Extension Methods CharacteristicHelper.GetThisTypeCharacteristics(CharacteristicObject) CharacteristicHelper.GetAllCharacteristics(CharacteristicObject)"
  },
  "api/BenchmarkDotNet.Configs.ConfigUnionRule.html": {
    "href": "api/BenchmarkDotNet.Configs.ConfigUnionRule.html",
    "title": "Enum ConfigUnionRule | BenchmarkDotNet",
    "keywords": "Enum ConfigUnionRule Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public enum ConfigUnionRule Fields Name Description AlwaysUseGlobal AlwaysUseLocal Union"
  },
  "api/BenchmarkDotNet.Diagnosers.DisassemblyDiagnoser.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DisassemblyDiagnoser.html",
    "title": "Class DisassemblyDiagnoser | BenchmarkDotNet",
    "keywords": "Class DisassemblyDiagnoser Inheritance System.Object DisassemblyDiagnoser Implements IConfigurableDiagnoser < DisassemblyDiagnoserConfig > IDiagnoser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DisassemblyDiagnoser : IDisassemblyDiagnoser, IConfigurableDiagnoser<DisassemblyDiagnoserConfig>, IDiagnoser Properties Analysers Declaration public IEnumerable<IAnalyser> Analysers { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAnalyser > Exporters Declaration public IEnumerable<IExporter> Exporters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExporter > Ids Declaration public IEnumerable<string> Ids { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Results Declaration public IReadOnlyDictionary<Benchmark, DisassemblyResult> Results { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < Benchmark , DisassemblyResult > Methods Configure(DisassemblyDiagnoserConfig) Declaration public IConfigurableDiagnoser<DisassemblyDiagnoserConfig> Configure(DisassemblyDiagnoserConfig config) Parameters Type Name Description DisassemblyDiagnoserConfig config Returns Type Description IConfigurableDiagnoser < DisassemblyDiagnoserConfig > Create(DisassemblyDiagnoserConfig) Declaration public static IConfigurableDiagnoser<DisassemblyDiagnoserConfig> Create(DisassemblyDiagnoserConfig config) Parameters Type Name Description DisassemblyDiagnoserConfig config Returns Type Description IConfigurableDiagnoser < DisassemblyDiagnoserConfig > DisplayResults(ILogger) Declaration public void DisplayResults(ILogger logger) Parameters Type Name Description ILogger logger GetColumnProvider() Declaration public IColumnProvider GetColumnProvider() Returns Type Description IColumnProvider GetRunMode(Benchmark) Declaration public RunMode GetRunMode(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description RunMode Handle(HostSignal, DiagnoserActionParameters) Declaration public void Handle(HostSignal signal, DiagnoserActionParameters parameters) Parameters Type Name Description HostSignal signal DiagnoserActionParameters parameters ProcessResults(DiagnoserResults) Declaration public void ProcessResults(DiagnoserResults _) Parameters Type Name Description DiagnoserResults _ Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IConfigurableDiagnoser<TConfig> IDiagnoser"
  },
  "api/BenchmarkDotNet.Diagnosers.DisassemblyDiagnoserConfig.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.DisassemblyDiagnoserConfig.html",
    "title": "Class DisassemblyDiagnoserConfig | BenchmarkDotNet",
    "keywords": "Class DisassemblyDiagnoserConfig Inheritance System.Object DisassemblyDiagnoserConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class DisassemblyDiagnoserConfig Constructors DisassemblyDiagnoserConfig(Boolean, Boolean, Boolean, Boolean, Int32) Declaration public DisassemblyDiagnoserConfig(bool printAsm = true, bool printIL = false, bool printSource = false, bool printPrologAndEpilog = false, int recursiveDepth = 1) Parameters Type Name Description System.Boolean printAsm ASM will be printed. True by default. System.Boolean printIL IL will be printed. False by default. System.Boolean printSource C# source code will be printed. False by default. System.Boolean printPrologAndEpilog ASM for prolog and epilog will be printed. False by default. System.Int32 recursiveDepth Includes called methods to given level. 1 by default, indexed from 1. To print just benchmark set to 0 Fields All Declaration public static readonly DisassemblyDiagnoserConfig All Field Value Type Description DisassemblyDiagnoserConfig Asm Declaration public static readonly DisassemblyDiagnoserConfig Asm Field Value Type Description DisassemblyDiagnoserConfig AsmAndIL Declaration public static readonly DisassemblyDiagnoserConfig AsmAndIL Field Value Type Description DisassemblyDiagnoserConfig AsmFullRecursive Declaration public static readonly DisassemblyDiagnoserConfig AsmFullRecursive Field Value Type Description DisassemblyDiagnoserConfig IL Declaration public static readonly DisassemblyDiagnoserConfig IL Field Value Type Description DisassemblyDiagnoserConfig Properties PrintAsm Declaration public bool PrintAsm { get; } Property Value Type Description System.Boolean PrintIL Declaration public bool PrintIL { get; } Property Value Type Description System.Boolean PrintPrologAndEpilog Declaration public bool PrintPrologAndEpilog { get; } Property Value Type Description System.Boolean PrintSource Declaration public bool PrintSource { get; } Property Value Type Description System.Boolean RecursiveDepth Declaration public int RecursiveDepth { get; } Property Value Type Description System.Int32"
  },
  "api/BenchmarkDotNet.Diagnosers.UnresolvedDiagnoser.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.UnresolvedDiagnoser.html",
    "title": "Class UnresolvedDiagnoser | BenchmarkDotNet",
    "keywords": "Class UnresolvedDiagnoser Inheritance System.Object UnresolvedDiagnoser Implements IDiagnoser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Diagnosers Assembly : BenchmarkDotNet.dll Syntax public class UnresolvedDiagnoser : IDiagnoser Constructors UnresolvedDiagnoser(Type) Declaration public UnresolvedDiagnoser(Type unresolved) Parameters Type Name Description System.Type unresolved Properties Analysers Declaration public IEnumerable<IAnalyser> Analysers { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IAnalyser > Exporters Declaration public IEnumerable<IExporter> Exporters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExporter > Ids Declaration public IEnumerable<string> Ids { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Methods DisplayResults(ILogger) Declaration public void DisplayResults(ILogger logger) Parameters Type Name Description ILogger logger GetColumnProvider() Declaration public IColumnProvider GetColumnProvider() Returns Type Description IColumnProvider GetRunMode(Benchmark) Declaration public RunMode GetRunMode(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description RunMode Handle(HostSignal, DiagnoserActionParameters) Declaration public void Handle(HostSignal signal, DiagnoserActionParameters parameters) Parameters Type Name Description HostSignal signal DiagnoserActionParameters parameters ProcessResults(DiagnoserResults) Declaration public void ProcessResults(DiagnoserResults results) Parameters Type Name Description DiagnoserResults results Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IDiagnoser"
  },
  "api/BenchmarkDotNet.Diagnosers.html": {
    "href": "api/BenchmarkDotNet.Diagnosers.html",
    "title": "Namespace BenchmarkDotNet.Diagnosers | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Diagnosers Classes Asm Code CompositeDiagnoser DiagnoserActionParameters DiagnoserResults DisassembledMethod DisassemblerConstants DisassemblyAnalyzer DisassemblyDiagnoser DisassemblyDiagnoserConfig DisassemblyResult HardwareCounterExtensions IL Map MemoryDiagnoser MemoryDiagnoser.AllocationColumn MemoryDiagnoser.GCCollectionColumn PmcStats PreciseMachineCounter Sharp UnresolvedDiagnoser Interfaces IConfigurableDiagnoser<TConfig> IDiagnoser Enums HardwareCounter RunMode"
  },
  "api/BenchmarkDotNet.Engines.IEngineFactory.html": {
    "href": "api/BenchmarkDotNet.Engines.IEngineFactory.html",
    "title": "Interface IEngineFactory | BenchmarkDotNet",
    "keywords": "Interface IEngineFactory Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public interface IEngineFactory Methods CreateReadyToRun(EngineParameters) Declaration IEngine CreateReadyToRun(EngineParameters engineParameters) Parameters Type Name Description EngineParameters engineParameters Returns Type Description IEngine"
  },
  "api/BenchmarkDotNet.Engines.IHost.html": {
    "href": "api/BenchmarkDotNet.Engines.IHost.html",
    "title": "Interface IHost | BenchmarkDotNet",
    "keywords": "Interface IHost Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public interface IHost Methods ReportResults(RunResults) Declaration void ReportResults(RunResults runResults) Parameters Type Name Description RunResults runResults SendError(String) Declaration void SendError(string message) Parameters Type Name Description System.String message SendSignal(HostSignal) Declaration void SendSignal(HostSignal hostSignal) Parameters Type Name Description HostSignal hostSignal Write(String) Declaration void Write(string message) Parameters Type Name Description System.String message WriteLine() Declaration void WriteLine() WriteLine(String) Declaration void WriteLine(string message) Parameters Type Name Description System.String message Extension Methods HostExtensions.WriteLine(IHost, String, Object[]) HostExtensions.BeforeAnythingElse(IHost) HostExtensions.BeforeMainRun(IHost) HostExtensions.AfterMainRun(IHost) HostExtensions.AfterAll(IHost)"
  },
  "api/BenchmarkDotNet.Engines.IterationData.html": {
    "href": "api/BenchmarkDotNet.Engines.IterationData.html",
    "title": "Struct IterationData | BenchmarkDotNet",
    "keywords": "Struct IterationData Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public struct IterationData Constructors IterationData(IterationMode, Int32, Int64, Int32) Declaration public IterationData(IterationMode iterationMode, int index, long invokeCount, int unrollFactor) Parameters Type Name Description IterationMode iterationMode System.Int32 index System.Int64 invokeCount System.Int32 unrollFactor Properties Index Declaration public int Index { get; } Property Value Type Description System.Int32 InvokeCount Declaration public long InvokeCount { get; } Property Value Type Description System.Int64 IterationMode Declaration public IterationMode IterationMode { get; } Property Value Type Description IterationMode UnrollFactor Declaration public int UnrollFactor { get; } Property Value Type Description System.Int32"
  },
  "api/BenchmarkDotNet.Engines.IterationMode.html": {
    "href": "api/BenchmarkDotNet.Engines.IterationMode.html",
    "title": "Enum IterationMode | BenchmarkDotNet",
    "keywords": "Enum IterationMode Namespace : BenchmarkDotNet.Engines Assembly : BenchmarkDotNet.dll Syntax public enum IterationMode Fields Name Description IdleJitting IdleTarget Idle method (overhead) IdleWarmup Warmup for idle method (overhead) MainJitting executing benchmark for the purpose of JIT wamup MainTarget Main benchmark iteration (with overhead) MainWarmup Warmup for main benchmark iteration (with overhead) Pilot https://en.wikipedia.org/wiki/Pilot_experiment Result Target - TargetIdle (without overhead) Unknown Unknown Extension Methods IterationModeExtensions.IsIdle()"
  },
  "api/BenchmarkDotNet.Exporters.HtmlExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.HtmlExporter.html",
    "title": "Class HtmlExporter | BenchmarkDotNet",
    "keywords": "Class HtmlExporter Inheritance System.Object ExporterBase HtmlExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class HtmlExporter : ExporterBase, IExporter Fields Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Properties FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.IExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.IExporter.html",
    "title": "Interface IExporter | BenchmarkDotNet",
    "keywords": "Interface IExporter Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public interface IExporter Properties Name Declaration string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger"
  },
  "api/BenchmarkDotNet.Exporters.InstructionPointerExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.InstructionPointerExporter.html",
    "title": "Class InstructionPointerExporter | BenchmarkDotNet",
    "keywords": "Class InstructionPointerExporter Inheritance System.Object InstructionPointerExporter Implements IExporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class InstructionPointerExporter : IExporter Properties Name Declaration public string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration public void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.Json.JsonExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.Json.JsonExporter.html",
    "title": "Class JsonExporter | BenchmarkDotNet",
    "keywords": "Class JsonExporter Inheritance System.Object ExporterBase JsonExporterBase JsonExporter Implements IExporter Inherited Members JsonExporterBase.FileExtension JsonExporterBase.ExportToLog(Summary, ILogger) ExporterBase.Name ExporterBase.Encoding ExporterBase.FileCaption ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters.Json Assembly : BenchmarkDotNet.dll Syntax public class JsonExporter : JsonExporterBase, IExporter Constructors JsonExporter(String, Boolean, Boolean) Declaration public JsonExporter(string fileNameSuffix = \"\", bool indentJson = false, bool excludeMeasurements = false) Parameters Type Name Description System.String fileNameSuffix System.Boolean indentJson System.Boolean excludeMeasurements Fields Brief Declaration public static readonly IExporter Brief Field Value Type Description IExporter BriefCompressed Declaration public static readonly IExporter BriefCompressed Field Value Type Description IExporter Default Declaration public static readonly IExporter Default Field Value Type Description IExporter Full Declaration public static readonly IExporter Full Field Value Type Description IExporter FullCompressed Declaration public static readonly IExporter FullCompressed Field Value Type Description IExporter Properties FileNameSuffix Declaration protected override string FileNameSuffix { get; } Property Value Type Description System.String Overrides ExporterBase.FileNameSuffix Methods Custom(String, Boolean, Boolean) Declaration public static IExporter Custom(string fileNameSuffix = \"\", bool indentJson = false, bool excludeMeasurements = false) Parameters Type Name Description System.String fileNameSuffix System.Boolean indentJson System.Boolean excludeMeasurements Returns Type Description IExporter Implements IExporter"
  },
  "api/BenchmarkDotNet.Helpers.SourceCodeHelper.html": {
    "href": "api/BenchmarkDotNet.Helpers.SourceCodeHelper.html",
    "title": "Class SourceCodeHelper | BenchmarkDotNet",
    "keywords": "Class SourceCodeHelper Inheritance System.Object SourceCodeHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Helpers Assembly : BenchmarkDotNet.dll Syntax public class SourceCodeHelper Methods IsCompilationTimeConstant(Object) Declaration public static bool IsCompilationTimeConstant(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean IsCompilationTimeConstant(Type) Declaration public static bool IsCompilationTimeConstant(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean ToSourceCode(Object) Declaration public static string ToSourceCode(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "api/BenchmarkDotNet.Helpers.html": {
    "href": "api/BenchmarkDotNet.Helpers.html",
    "title": "Namespace BenchmarkDotNet.Helpers | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Helpers Classes ExternalToolsHelper FolderNameHelper MultiEncodingString MultiEncoding String. SourceCodeHelper"
  },
  "articles/faq.html": {
    "href": "articles/faq.html",
    "title": "FAQ (Frequently asked questions) | BenchmarkDotNet",
    "keywords": "FAQ (Frequently asked questions) Q Why can't I install BenchmarkDotNet in Visual Studio 2010/2012/2013? A BenchmarkDotNet requires NuGet 3.x+ and can't be installed in old versions of Visual Studio which use NuGet 2.x. Consider to use Visual Studio 2015/2017 or Rider . See also: BenchmarkDotNet#237 , roslyn#12780 . Q Why can't I install BenchmarkDotNet in a new .NET Core Console App in Visual Studio 2017? A BenchmarkDotNet supports only netcoreapp2.0+. Some old Visual Studio 2017 can create a new application which targets netcoreapp1.0. You should upgrade it up to 2.0. If you want to target netcoreapp1.0 in your main assembly, it's recommended to create a separated project for benchmarks. Q I created a new .NET Core Console App in Visual Studio 2017. Now I want to run my code on CoreCLR, full .NET Framework, and Mono. How can I do it? A Use the following lines in your .csproj file: <TargetFrameworks>netcoreapp2.0;net46</TargetFrameworks> <PlatformTarget>AnyCPU</PlatformTarget> And mark your benchmark class with the following attributes: [CoreJob, ClrJob, MonoJob] Q My source code targets old versions of .NET Framework or .NET Core, but BenchmarkDotNet requires net46 and netcoreapp2.0 . How can I run benchmarks in this case? A It's a good practice to introduce an additional console application (e.g. MyAwesomeLibrary.Benchmarks ) which will depend on your code and BenchmarkDotNet. Due to the fact that users usually run benchmarks in a develop environment and don't distribute benchmarks for users, it shouldn't be a problem. Q I wrote a small benchmark, but BenchmarkDotNet requires a lot of time for time measurements. How can I reduce this time? A By default, BenchmarkDotNet automatically chooses a number of iterations which allows achieving the best precision. If you don't need such level of precision and just want to have a quick way to get approximated results, you can specify all parameters manually. For example, you can use the SimpleJob or ShortRunJob attributes: [SimpleJob(launchCount: 1, warmupCount: 3, targetCount: 5, invocationCount:100, id: \"QuickJob\")] [ShortRunJob] Q My benchmark unexpectedly stopped and I saw the information about error code. What can I do? A BenchmarkDotNet generates, builds and runs new process for every benchmark. This behavior is sometimes interpreted by anti-virus as dangerous, and the process is killed. Use EnvironmentAnalyser to detect antivirus software and configure your benchmark to use InProcessToolchain . Q Can I run benchmark on the virtual machine? A Yes, of course. However, it can affect results because of the shared, physical machine, virtualization process and incorrect Stopwatch.Frequency . If you are unsure whether an application is running on virtual environment, use EnvironmentAnalyser to detect VM hypervisor. Q I have failed to run my benchmarks, I am getting following errors about non-optimized dll. What can I do? Assembly BenchmarkDotNet.Samples which defines benchmarks references non-optimized BenchmarkDotNet If you own this dependency, please, build it in RELEASE. If you don't, you can create custom config with DontFailOnError to disable our custom policy and allow this b Assembly BenchmarkDotNet.Samples which defines benchmarks is non-optimized Benchmark was built without optimization enabled (most probably a DEBUG configuration). Please, build it in RELEASE. A You should always run your benchmarks in RELEASE mode with optimizations enabled (default setting for RELEASE). However if you have to use non-optimized 3rd party assembly you have to create custom config to disable our default policy. public class AllowNonOptimized : ManualConfig { public AllowNonOptimized() { Add(JitOptimizationsValidator.DontFailOnError); // ALLOW NON-OPTIMIZED DLLS Add(DefaultConfig.Instance.GetLoggers().ToArray()); // manual config has no loggers by default Add(DefaultConfig.Instance.GetExporters().ToArray()); // manual config has no exporters by default Add(DefaultConfig.Instance.GetColumnProviders().ToArray()); // manual config has no columns by default } } Q I have failed to run my benchmarks from LINQPad. How can I fix this problem? Assembly LINQPadQuery which defines benchmarks references non-optimized LINQPad Assembly LINQPadQuery which defines benchmarks is non-optimized Benchmark was built without optimization enabled (most probably a DEBUG configuration). Please, build it in RELEASE. A You need to make sure that you are using AnyCPU 5.22.05+ build of LINQPad with optimizations enabled. To enable the optimizations you need to go to Preferences -> Query and select compile with /optimize+ Q I'm trying to use RPlotExporter but there are no any images in the results folder A Try to specify R_LIBS_USER (e.g. R_LIBS_USER=/usr/local/lib/R/ on Linux/macOS, see also: #692 ) Q My benchmark failed with OutOfMemoryException. How can I fix this problem? A BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects. If your benchmark allocates memory and keeps it alive, you are creating a memory leak. You should redesign your benchmark and remove the side-effects. You can use OperationsPerInvoke , IterationSetup and IterationCleanup to do that. An example: public class OOM { private StringBuilder buffer = new StringBuilder(); [Benchmark] public void HasSideEffects() { // This method is growing the buffer to infinity // because it's executed millions of times buffer.Append('a'); } [Benchmark(OperationsPerInvoke = 16)] public void HasNoSideEffects() { buffer.Clear(); for (int i = 0; i < 1024; i++) buffer.Append('a'); } }"
  },
  "articles/license.html": {
    "href": "articles/license.html",
    "title": "The MIT License | BenchmarkDotNet",
    "keywords": "The MIT License Copyright (c) 2013–2018 .NET Foundation and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "articles/overview.html": {
    "href": "articles/overview.html",
    "title": "Overview | BenchmarkDotNet",
    "keywords": "Overview Install Create new console application and install the BenchmarkDotNet NuGet package. We support: Projects: *.csproj (classic and modern with PackageReferences), *.xproj / project.json Runtimes: Full .NET Framework (4.6+), .NET Core (2.0+), Mono, CoreRT OS: Windows, Linux, MacOS Languages: C#, F#, VB Design a benchmark Create a new console application, write a class with methods that you want to measure and mark them with the Benchmark attribute. In the following example, we compare the MD5 and SHA256 cryptographic hash functions: using System; using System.Security.Cryptography; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Running; namespace MyBenchmarks { public class Md5VsSha256 { private const int N = 10000; private readonly byte[] data; private readonly SHA256 sha256 = SHA256.Create(); private readonly MD5 md5 = MD5.Create(); public Md5VsSha256() { data = new byte[N]; new Random(42).NextBytes(data); } [Benchmark] public byte[] Sha256() => sha256.ComputeHash(data); [Benchmark] public byte[] Md5() => md5.ComputeHash(data); } public class Program { public static void Main(string[] args) { var summary = BenchmarkRunner.Run<Md5VsSha256>(); } } } The BenchmarkRunner.Run<Md5VsSha256>() call runs your benchmarks and print results to console output. Notice, that you should use only the Release configuration for your benchmarks. Otherwise, the results will not correspond to reality. If you forgot to change the configuration, BenchmarkDotNet will print a warning. Benchmark results BenchmarkDotNet=v0.10.1, OS=Microsoft Windows NT 6.2.9200.0 Processor=Intel(R) Core(TM) i7-4702MQ CPU 2.20GHz, ProcessorCount=8 Frequency=2143476 Hz, Resolution=466.5319 ns, Timer=TSC [Host] : Clr 4.0.30319.42000, 64bit RyuJIT-v4.6.1586.0 DefaultJob : Clr 4.0.30319.42000, 64bit RyuJIT-v4.6.1586.0 | Method | Mean | StdDev | Allocated | |------- |------------ |---------- |---------- | | Sha256 | 130.5169 us | 1.8489 us | 188 B | | Md5 | 25.8010 us | 0.1757 us | 113 B | Jobs You can check several environments at once. For example, you can compare performance of Full .NET Framework, .NET Core, Mono and CoreRT. Just add the ClrJob , MonoJob , CoreJob , CoreRtJob attributes before the class declaration (it requires a .NETCore project, installed CoreCLR and Mono): [ClrJob, MonoJob, CoreJob, CoreRtJob] public class Md5VsSha256 Example of the result: BenchmarkDotNet=v0.11.0, OS=Windows 10.0.16299.309 (1709/FallCreatorsUpdate/Redstone3) Intel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores Frequency=3507504 Hz, Resolution=285.1030 ns, Timer=TSC .NET Core SDK=2.1.300-preview1-008174 [Host] : .NET Core 2.1.0-preview1-26216-03 (CoreCLR 4.6.26216.04, CoreFX 4.6.26216.02), 64bit RyuJIT Job-YRHGTP : .NET Framework 4.7.1 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0 Core : .NET Core 2.1.0-preview1-26216-03 (CoreCLR 4.6.26216.04, CoreFX 4.6.26216.02), 64bit RyuJIT CoreRT : .NET CoreRT 1.0.26414.01, 64bit AOT Mono : Mono 5.10.0 (Visual Studio), 64bit | Method | Runtime | Mean | Error | StdDev | |------- |-------- |-----------:|----------:|----------:| | Sha256 | Clr | 75.780 us | 1.0445 us | 0.9771 us | | Sha256 | Core | 41.134 us | 0.2185 us | 0.1937 us | | Sha256 | CoreRT | 40.895 us | 0.0804 us | 0.0628 us | | Sha256 | Mono | 141.377 us | 0.5598 us | 0.5236 us | | | | | | | | Md5 | Clr | 18.575 us | 0.0727 us | 0.0644 us | | Md5 | Core | 17.562 us | 0.0436 us | 0.0408 us | | Md5 | CoreRT | 17.447 us | 0.0293 us | 0.0244 us | | Md5 | Mono | 34.500 us | 0.1553 us | 0.1452 us | There are a lot of predefined jobs which you can use. For example, you can compare LegacyJitX86 vs LegacyJitX64 vs RyuJitX64 : [LegacyJitX86Job, LegacyJitX64Job, RyuJitX64Job] Or you can define own jobs: [Config(typeof(Config))] public class Md5VsSha256 { private class Config : ManualConfig { public Config() { Add(new Job(EnvMode.LegacyJitX86, EnvMode.Clr, RunMode.Dry) { Env = { Runtime = Runtime.Clr }, Run = { LaunchCount = 3, WarmupCount = 5, TargetCount = 10 }, Accuracy = { MaxStdErrRelative = 0.01 } })); } } Read more: Jobs , Configs Columns You can also add custom columns to the summary table: [MinColumn, MaxColumn] public class Md5VsSha256 Method Median StdDev Min Max Sha256 131.3200 us 4.6744 us 129.8216 us 147.7630 us Md5 26.2847 us 0.4424 us 25.8442 us 27.4258 us Of course, you can define own columns based on full benchmark summary. Read more: Columns Exporters You can export result of your benchmark in different formats: [MarkdownExporter, AsciiDocExporter, HtmlExporter, CsvExporter, RPlotExporter] public class Md5VsSha256 If you have installed R, RPlotExporter will generate a lot of nice plots: Read more: Exporters Baseline In order to scale your results you need to mark one of your benchmark methods as a Baseline : public class Sleeps { [Benchmark] public void Time50() => Thread.Sleep(50); [Benchmark(Baseline = true)] public void Time100() => Thread.Sleep(100); [Benchmark] public void Time150() => Thread.Sleep(150); } As a result, you will have additional column in the summary table: Method Median StdDev Scaled Time100 100.2640 ms 0.1238 ms 1.00 Time150 150.2093 ms 0.1034 ms 1.50 Time50 50.2509 ms 0.1153 ms 0.50 Read more: Baselines Params You can mark one or several fields or properties in your class by the Params attribute. In this attribute, you can specify set of values. As a result, you will get results for each combination of params values. public class IntroParams { [Params(100, 200)] public int A { get; set; } [Params(10, 20)] public int B { get; set; } [Benchmark] public void Benchmark() { Thread.Sleep(A + B + 5); } } Method Median StdDev A B Benchmark 115.3325 ms 0.0242 ms 100 10 Benchmark 125.3282 ms 0.0245 ms 100 20 Benchmark 215.3024 ms 0.0375 ms 200 10 Benchmark 225.2710 ms 0.0434 ms 200 20 Read more: Parameterization Languages You can also write you benchmarks on F# or VB . Examples: type StringKeyComparison () = let mutable arr : string [] = [||] let dict1 = ConcurrentDictionary<_,_>() let dict2 = ConcurrentDictionary<_,_>(StringComparer.Ordinal) [<Params (100, 500, 1000, 2000)>] member val public DictSize = 0 with get, set [<GlobalSetup>] member self.GlobalSetupData() = dict1.Clear(); dict2.Clear() arr <- getStrings self.DictSize arr |> Array.iter (fun x -> dict1.[x] <- true ; dict2.[x] <- true) [<Benchmark>] member self.StandardLookup () = lookup arr dict1 [<Benchmark>] member self.OrdinalLookup () = lookup arr dict2 Public Class Sample <Params(1, 2)> Public Property A As Integer <Params(3, 4)> Public Property B As Integer <Benchmark> Public Function Benchmark() As Integer return A + B End Function End Class Diagnostics A diagnoser can attach to your benchmark and get some useful info. The current Diagnosers are: GC and Memory Allocation ( MemoryDiagnoser ) which is cross platform, built-in and is not enabled by default anymore . JIT Inlining Events ( InliningDiagnoser ). You can find this diagnoser in a separated package with diagnosers for Windows ( BenchmarkDotNet.Diagnostics.Windows ): Below is a sample output from the MemoryDiagnoser , note the extra columns on the right-hand side ( Gen 0 and Allocated ): Method | Mean | StdDev | Gen 0 | Allocated | ---------- |----------- |---------- |------- |---------- | Iterative | 31.0739 ns | 0.1091 ns | - | 0 B | LINQ | 83.0435 ns | 1.0103 ns | 0.0069 | 32 B | Read more: Diagnosers BenchmarkRunner There are several ways to run your benchmarks: you can use existed class, run a benchmark based on code from internet or based on source code: var summary = BenchmarkRunner.Run<MyBenchmarkClass>(); var summary = BenchmarkRunner.Run(typeof(MyBenchmarkClass)); string url = \"<E.g. direct link to a gist>\"; var summary = BenchmarkRunner.RunUrl(url); string benchmarkSource = \"public class MyBenchmarkClass { ...\"; var summary = BenchmarkRunner.RunSource(benchmarkSource); Read more: HowToRun"
  },
  "articles/configs/configs.html": {
    "href": "articles/configs/configs.html",
    "title": "Configs | BenchmarkDotNet",
    "keywords": "Configs Config is a set of so called jobs , columns , exporters , loggers , diagnosers , analysers , validators that help you to build your benchmark. Built-in configuration There are two built-in ways to set your config: Object style [Config(typeof(Config))] public class MyClassWithBenchmarks { private class Config : ManualConfig { public Config() { Add(new Job1(), new Job2()); Add(new Column1(), new Column2()); Add(new Exporter1(), new Exporter2()); Add(new Logger1(), new Logger2()); Add(new Diagnoser1(), new Diagnoser2()); Add(new Analyser1(), new Analyser2()); Add(new Filter1(), new Filter2()); } } [Benchmark] public void Benchmark1() { } [Benchmark] public void Benchmark2() { } } Command style [Config(\"jobs=job1,job2 \" + \"columns=column1,column2 \" + \"exporters=exporter1,exporter2 \" + \"loggers=logger1,logger2 \" + \"diagnosers=diagnoser1,diagnoser2 \" + \"analysers=analyser1,analyser2\")] public class MyClassWithBenchmarks { [Benchmark] public void Benchmark1() { } [Benchmark] public void Benchmark2() { } } Custom configs You can also define your own way to specify config parameters. Custom attribute You can define own config attribute: [MyConfigSource(Jit.LegacyJit, Jit.RyuJit)] public class IntroConfigSource { private class MyConfigSourceAttribute : Attribute, IConfigSource { public IConfig Config { get; private set; } public MyConfigSourceAttribute(params Jit[] jits) { var jobs = jits.Select(jit => new Job(Job.Dry) { Env = { Platform = Platform.X64, Jit = jit } }).ToArray(); Config = ManualConfig.CreateEmpty().With(jobs); } } [Benchmark] public void Foo() { Thread.Sleep(10); } } Fluent config There is no need to create new Config type, you can simply use fluent interface: BenchmarkRunner .Run<Algo_Md5VsSha256>( ManualConfig .Create(DefaultConfig.Instance) .With(Job.RyuJitX64) .With(Job.Core) .With(ExecutionValidator.FailOnError));"
  },
  "articles/configs/diagnosers.html": {
    "href": "articles/configs/diagnosers.html",
    "title": "Diagnosers | BenchmarkDotNet",
    "keywords": "Diagnosers A diagnoser can attach to your benchmark and get some useful info. The current Diagnosers are: GC and Memory Allocation ( MemoryDiagnoser ) which is cross platform, built-in and is not enabled by default anymore . Please see Adam Sitnik's blog post for all the details. JIT Inlining Events ( InliningDiagnoser ). You can find this diagnoser in a separated package with diagnosers for Windows ( BenchmarkDotNet.Diagnostics.Windows ): JIT Tail Call Events ( TailCallDiagnoser ). You can find this diagnoser as well as the ( InliningDiagnoser ) in a separated package with diagnosers for Windows ( BenchmarkDotNet.Diagnostics.Windows ): Please see this post for all the details. Hardware Counter Diagnoser. You can find this diagnoser in a separated package with diagnosers for Windows ( BenchmarkDotNet.Diagnostics.Windows ): . Please see Adam Sitnik's blog post for all the details. Disassembly Diagnoser. It allows you to disassemble the benchmarked code to asm, IL and C#/F#. Please see Adam Sitnik's blog post for all the details. Examples Below is a sample output from the GC and Memory Allocation diagnoser, note the extra columns on the right-hand side (\"Gen 0\", \"Gen 1\", \"Gen 2\" and \"Allocated\"): Method | Mean | StdErr | StdDev | Median | Gen 0 | Allocated | ----------------- |------------ |----------- |------------ |------------ |------- |---------- | 'new byte[10kB]' | 884.4896 ns | 46.3528 ns | 245.2762 ns | 776.4237 ns | 0.1183 | 10 kB | A config example: private class Config : ManualConfig { public Config() { Add(MemoryDiagnoser.Default); Add(new InliningDiagnoser()); } } You can also use one of the following attributes (apply it on a class that contains Benchmarks): [MemoryDiagnoser] [InliningDiagnoser] [TailCallDiagnoser] In BenchmarkDotNet, 1kB = 1024B, 1MB = 1024kB, and so on. Hardware Counters Diagnoser This diagnoser is not enabled in explicit way as the other diagnosers. You need to specify [HardwareCounters] and we choose the right diagnoser in the runtime. [HardwareCounters(HardwareCounter.BranchMispredictions, HardwareCounter.BranchInstructions)] public class Cpu_BranchPredictor { private const int N = 32767; private readonly int[] sorted, unsorted; public Cpu_BranchPredictor() { var random = new Random(0); unsorted = new int[N]; sorted = new int[N]; for (int i = 0; i < N; i++) sorted[i] = unsorted[i] = random.Next(256); Array.Sort(sorted); } private static int Branch(int[] data) { int sum = 0; for (int i = 0; i < N; i++) if (data[i] >= 128) sum += data[i]; return sum; } private static int Branchless(int[] data) { int sum = 0; for (int i = 0; i < N; i++) { int t = (data[i] - 128) >> 31; sum += ~t & data[i]; } return sum; } [Benchmark] public int SortedBranch() => Branch(sorted); [Benchmark] public int UnsortedBranch() => Branch(unsorted); [Benchmark] public int SortedBranchless() => Branchless(sorted); [Benchmark] public int UnsortedBranchless() => Branchless(unsorted); } and the results: | Method | Mean | Mispredict rate | BranchInstructions/Op | BranchMispredictions/Op | |------------------- |------------ |---------------- |---------------------- |------------------------ | | SortedBranch | 21.4539 us | 0,04% | 70121 | 24 | | UnsortedBranch | 136.1139 us | 23,70% | 68788 | 16301 | | SortedBranchless | 28.6705 us | 0,06% | 35711 | 22 | | UnsortedBranchless | 28.9336 us | 0,05% | 35578 | 17 | Disassembly Diagnoser You need to use the DisassemblyDiagnoser attribute to configure it. The available options are: printIL: IL will be printed. False by default. printAsm: ASM will be printed. True by default. printSource: C# source code will be printed. False by default. printPrologAndEpilog: ASM for prolog and epilog will be printed. False by default. recursiveDepth: Includes called methods to given level. 1 by default, indexed from 1. To print just benchmark set to 0 Requirements Disassembly Diagnoser requires following settings in your .csproj file: <PropertyGroup> <PlatformTarget>AnyCPU</PlatformTarget> <DebugType>pdbonly</DebugType> <DebugSymbols>true</DebugSymbols> </PropertyGroup> To get the source code we need to locate and read the .pdb files. This is why we need DebugType and DebugSymbols settings. To compare different platforms the project which defines benchmarks has to target AnyCPU . Sample [DisassemblyDiagnoser(printAsm: true, printSource: true)] // !!! use the new diagnoser!! [RyuJitX64Job] public class Simple { int[] field = Enumerable.Range(0, 100).ToArray(); [Benchmark] public int SumLocal() { var local = field; // we use local variable that points to the field int sum = 0; for (int i = 0; i < local.Length; i++) sum += local[i]; return sum; } [Benchmark] public int SumField() { int sum = 0; for (int i = 0; i < field.Length; i++) sum += field[i]; return sum; } } Disassembly Diagnoser for Mono on Windows If you want to get a disassembly listing for Mono on Windows, you need as and x86_64-w64-mingw32-objdump.exe tools. If you don't have it, you will get a warning like follows: It's impossible to get Mono disasm because you don't have some required tools: 'as' is not recognized as an internal or external command 'x86_64-w64-mingw32-objdump.exe' is not recognized as an internal or external command The easiest way to get these tools: Download and install Cygwin On the \"Select Packages\" screen, search for binutils Install binutils and mingw64-x86_64-binutils Add cygwin64\\bin\\ (or cygwin\\bin\\ ) in %PATH% ALL JITs You can use a single config to compare the generated assembly code for ALL JITs. But to allow benchmarking any target platform architecture the project which defines benchmarks has to target AnyCPU . <PropertyGroup> <PlatformTarget>AnyCPU</PlatformTarget> </PropertyGroup> public class MultipleJits : ManualConfig { public MultipleJits() { Add(Job.ShortRun.With(new MonoRuntime(name: \"Mono x86\", customPath: @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\")).With(Platform.X86)); Add(Job.ShortRun.With(new MonoRuntime(name: \"Mono x64\", customPath: @\"C:\\Program Files\\Mono\\bin\\mono.exe\")).With(Platform.X64)); Add(Job.ShortRun.With(Jit.LegacyJit).With(Platform.X86).With(Runtime.Clr)); Add(Job.ShortRun.With(Jit.LegacyJit).With(Platform.X64).With(Runtime.Clr)); Add(Job.ShortRun.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Clr)); // RyuJit for .NET Core 2.0 Add(Job.ShortRun.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Core).With(CsProjCoreToolchain.NetCoreApp20)); // RyuJit for .NET Core 2.1 Add(Job.ShortRun.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Core).With(CsProjCoreToolchain.NetCoreApp21)); Add(DisassemblyDiagnoser.Create(new DisassemblyDiagnoserConfig(printAsm: true, printPrologAndEpilog: true, recursiveDepth: 3))); } } [Config(typeof(MultipleJits))] public class Jit_Devirtualization { private Increment increment = new Increment(); [Benchmark] public int CallVirtualMethod() => increment.OperateTwice(10); public abstract class Operation // abstract unary integer operation { public abstract int Operate(int input); public int OperateTwice(int input) => Operate(Operate(input)); // two virtual calls to Operate } public sealed class Increment : Operation // concrete, sealed operation: increment by fixed amount { public readonly int Amount; public Increment(int amount = 1) { Amount = amount; } public override int Operate(int input) => input + Amount; } } The disassembly result can be obtained here . The file was too big to embed it in this doc page. Getting only the Disassembly without running the benchmarks for a long time Sometimes you might be interested only in the disassembly, not the results of the benchmarks. In that case you can use Job.Dry which runs the benchmark only once . public class JustDisassembly : ManualConfig { public JustDisassembly() { Add(Job.Dry.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Core).With(CsProjCoreToolchain.NetCoreApp20)); Add(Job.Dry.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Core).With(CsProjCoreToolchain.NetCoreApp21)); Add(DisassemblyDiagnoser.Create(new DisassemblyDiagnoserConfig(printAsm: true, printPrologAndEpilog: true, recursiveDepth: 3))); } } Restrictions In order to not affect main results we perform a separate run if any diagnoser is used. That's why it might take more time to execute benchmarks. MemoryDiagnoser: Mono currently does not expose any api to get the number of allocated bytes. That's why our Mono users will get ? in Allocated column. In order to get the number of allocated bytes in cross platform way we are using GC.GetAllocatedBytesForCurrentThread which recently got exposed for netcoreapp1.1. That's why BenchmarkDotNet does not support netcoreapp1.0 from version 0.10.1. MemoryDiagnoser is 99.5% accurate about allocated memory when using default settings or Job.ShortRun (or any longer job than it). HardwareCounters: Windows 8+ only (we plan to add Unix support in the future) No Hyper-V (Virtualization) support Requires running as Admin (ETW Kernel Session) No InProcessToolchain support ( #394 ) Disassembly Diagnoser: .NET Core disassembler works only on Windows Mono disassembler does not support recursive disassembling and produces output without IL and C#. Indirect calls are not tracked. To be able to compare different platforms, you need to target AnyCPU <PlatformTarget>AnyCPU</PlatformTarget> To get the corresponding C#/F# code from disassembler you need to configure your project in following way: <DebugType>pdbonly</DebugType> <DebugSymbols>true</DebugSymbols> Tailcall Diagnoser You need to use the TailcallDiagnoser attribute to configure it. The available options are: logFailuresOnly: Track only the methods that failed to get tail called. True by default. filterByNamespace : Track only the methods from declaring type's namespace. Set to false if you want to see all Jit tail events. True by default. Sample [Diagnostics.Windows.Configs.TailCallDiagnoser] [LegacyJitX86Job, LegacyJitX64Job, RyuJitX64Job] public class Jit_TailCalling { [Benchmark] public long Calc() => FactorialWithoutTailing(7) - FactorialWithTailing(7); private static long FactorialWithoutTailing(int depth) => depth == 0 ? 1 : depth * FactorialWithoutTailing(depth - 1); private static long FactorialWithTailing(int pos, int depth) => pos == 0 ? depth : FactorialWithTailing(pos - 1, depth * pos); private static long FactorialWithTailing(int depth) private static long FactorialWithTailing(int depth) => FactorialWithTailing(1, depth); } The result The benchmark results were omitted for brevity. // * Diagnostic Output - TailCallDiagnoser * -------------------- -------------------- Jit_TailCalling.Calc: LegacyJitX64(Jit=LegacyJit, Platform=X64, Runtime=Clr) -------------------- -------------------- Jit_TailCalling.Calc: LegacyJitX86(Jit=LegacyJit, Platform=X86, Runtime=Clr) -------------------- -------------------- Jit_TailCalling.Calc: RyuJitX64(Jit=RyuJit, Platform=X64) -------------------- Caller: <null>.<null> - <null> Callee: BenchmarkDotNet.Samples.JIT.Jit_TailCalling.FactorialWithTailing - int64 (int32,int32) Tail prefix: False Tail call type: RecursiveLoop ------------------- Restrictions Windows only x64"
  },
  "articles/configs/encoding.html": {
    "href": "articles/configs/encoding.html",
    "title": "Encoding | BenchmarkDotNet",
    "keywords": "Encoding Sample: IntroEncoding BenchmarkDotNet currently supports two encodings for output - ASCII and Unicode . By default ASCII is setted. Unicode allows to use special characters, like μ and ± . Encoding allows you to set encoding in your benchmark. Warning You should be sure that your terminal/text editor supports Unicode. On Windows, you may have some troubles with Unicode symbols if system default code page configured as non-English (in Control Panel + Regional and Language Options, Language for Non-Unicode Programs). Source code using System.Diagnostics; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using System.Text; using BenchmarkDotNet.Running; namespace BenchmarkDotNet.Samples { // *** Attribute Style *** [EncodingAttribute.Unicode] public class IntroEncoding { [Benchmark] public long Foo() { long waitUntil = Stopwatch.GetTimestamp() + 1000; while (Stopwatch.GetTimestamp() < waitUntil) { } return waitUntil; } } // *** Object Style *** [Config(typeof(Config))] public class IntroEncodingObjectStyle { private class Config : ManualConfig { public Config() { Set(Encoding.Unicode); } } [Benchmark] public long Foo() { long waitUntil = Stopwatch.GetTimestamp() + 1000; while (Stopwatch.GetTimestamp() < waitUntil) { } return waitUntil; } } // *** Fluent Config *** public class IntroEncodingFluentConfig { public static void Run() { BenchmarkRunner.Run<IntroEncodingFluentConfig>( ManualConfig .Create(DefaultConfig.Instance) .With(Encoding.Unicode)); } [Benchmark] public long Foo() { long waitUntil = Stopwatch.GetTimestamp() + 1000; while (Stopwatch.GetTimestamp() < waitUntil) { } return waitUntil; } } } Output Mean = 1.0265 μs, StdErr = 0.0005 μs (0.05%); N = 15, StdDev = 0.0018 μs Min = 1.0239 μs, Q1 = 1.0248 μs, Median = 1.0264 μs, Q3 = 1.0280 μs, Max = 1.0296 μs IQR = 0.0033 μs, LowerFence = 1.0199 μs, UpperFence = 1.0329 μs ConfidenceInterval = [1.0245 μs; 1.0285 μs] (CI 99.9%), Margin = 0.0020 μs (0.19% of Mean) Skewness = 0.12, Kurtosis = 1.56, MValue = 2 -------------------- Histogram -------------------- [1.023 μs ; 1.030 μs) | @@@@@@@@@@@@@@@ --------------------------------------------------- Method | Mean | Error | StdDev | ------- |---------:|----------:|----------:| Foo | 1.027 μs | 0.0020 μs | 0.0018 μs | See also Encoding EncodingAttribute MultiEncodingString The link to this sample: Sample: IntroEncoding"
  },
  "articles/configs/exporters.html": {
    "href": "articles/configs/exporters.html",
    "title": "Exporters | BenchmarkDotNet",
    "keywords": "Exporters An exporter allows you to export results of your benchmark in different formats. By default, files with results will be located in .\\BenchmarkDotNet.Artifacts\\results directory. Default exporters are: csv, html and markdown. Here is list of all available exporters: MiscExporters There are some predefined exporters. Examples: [AsciiDocExporter] [CsvExporter] [CsvMeasurementsExporter] [HtmlExporter] [MarkdownExporter] [PlainExporter] public class MyBenchmarkClass Json BenchmarkDotNet has a set of json exporters. You can customize the following properties of these exporters: fileNameSuffix : a string which be placed in the end of target file name. indentJson = false / true : should we format json or not. excludeMeasurements = false / true : should we exclude detailed information about measurements or not (the final summary with statistics will be in the json file anyway). Also, there are a set of predefined json exporters. Example of usage: [JsonExporterAttribute.Brief] [JsonExporterAttribute.Full] [JsonExporterAttribute.BriefCompressed] [JsonExporterAttribute.FullCompressed] [JsonExporter(\"-custom\", indentJson: true, excludeMeasurements: true)] public class IntroJsonExport { [Benchmark] public void Sleep10() => Thread.Sleep(10); [Benchmark] public void Sleep20() => Thread.Sleep(20); } [Config(typeof(Config))] public class IntroJsonExport2 { private class Config : ManualConfig { public Config() { Add(JsonExporter.Brief); Add(JsonExporter.Full); Add(JsonExporter.BriefCompressed); Add(JsonExporter.FullCompressed); Add(JsonExporter.Custom(\"-custom\", indentJson: true, excludeMeasurements: true)); } } } Example of IntroJsonExport-report-brief.json : { \"Title\":\"IntroJsonExport\", \"HostEnvironmentInfo\":{ \"BenchmarkDotNetCaption\":\"BenchmarkDotNet-Dev.Core\", \"BenchmarkDotNetVersion\":\"0.9.9.0\", \"OsVersion\":\"Microsoft Windows NT 6.2.9200.0\", \"ProcessorName\":{ \"IsValueCreated\":true, \"Value\":\"Intel(R) Core(TM) i7-4702MQ CPU 2.20GHz\" }, \"ProcessorCount\":8, \"ClrVersion\":\"MS.NET 4.0.30319.42000\", \"Architecture\":\"64-bit\", \"HasAttachedDebugger\":false, \"HasRyuJit\":true, \"Configuration\":\"RELEASE\", \"JitModules\":\"clrjit-v4.6.1586.0\", \"DotNetCliVersion\":\"1.0.0-preview2-003121\", \"ChronometerFrequency\":2143474, \"HardwareTimerKind\":\"Tsc\" }, \"Benchmarks\":[ { \"ShortInfo\":\"IntroJsonExport_Sleep10\", \"Namespace\":\"BenchmarkDotNet.Samples.Intro\", \"Type\":\"IntroJsonExport\", \"Method\":\"Sleep10\", \"MethodTitle\":\"Sleep10\", \"Parameters\":\"\", \"Properties\":{ \"Mode\":\"Throughput\", \"Platform\":\"Host\", \"Jit\":\"Host\", \"Runtime\":\"Host\", \"GcMode\":\"Host\", \"WarmupCount\":\"Auto\", \"TargetCount\":\"Auto\", \"LaunchCount\":\"Auto\", \"IterationTime\":\"Auto\", \"Affinity\":\"Auto\" }, \"Statistics\":{ \"N\":20, \"Min\":10265993.7209375, \"LowerFence\":10255329.082734371, \"Q1\":10337369.528437499, \"Median\":10360382.6953125, \"Mean\":10362283.085796878, \"Q3\":10392063.158906251, \"UpperFence\":10474103.60460938, \"Max\":10436008.3209375, \"InterquartileRange\":54693.630468752235, \"Outliers\":[ ], \"StandardError\":10219.304338928456, \"Variance\":2088683623.4328396, \"StandardDeviation\":45702.118369205156, \"Skewness\":-0.1242777170069375, \"Kurtosis\":2.31980277935226, \"ConfidenceInterval\":{ \"Mean\":10362283.085796878, \"Error\":10219.304338928456, \"Level\":6, \"Margin\":20029.836504299772, \"Lower\":10342253.249292579, \"Upper\":10382312.922301177 }, \"Percentiles\":{ \"P0\":10265993.7209375, \"P25\":10338555.905625, \"P50\":10360382.6953125, \"P67\":10373496.555659376, \"P80\":10400703.4841875, \"P85\":10417280.326718749, \"P90\":10424125.595812501, \"P95\":10435620.51609375, \"P100\":10436008.3209375 } } },{ \"ShortInfo\":\"IntroJsonExport_Sleep20\", \"Namespace\":\"BenchmarkDotNet.Samples.Intro\", \"Type\":\"IntroJsonExport\", \"Method\":\"Sleep20\", \"MethodTitle\":\"Sleep20\", \"Parameters\":\"\", \"Properties\":{ \"Mode\":\"Throughput\", \"Platform\":\"Host\", \"Jit\":\"Host\", \"Runtime\":\"Host\", \"GcMode\":\"Host\", \"WarmupCount\":\"Auto\", \"TargetCount\":\"Auto\", \"LaunchCount\":\"Auto\", \"IterationTime\":\"Auto\", \"Affinity\":\"Auto\" }, \"Statistics\":{ \"N\":20, \"Min\":20258672.37, \"LowerFence\":20206333.269843742, \"Q1\":20325342.761249997, \"Median\":20362636.192500003, \"Mean\":20360791.931687497, \"Q3\":20404682.4221875, \"UpperFence\":20523691.913593754, \"Max\":20422396.073125, \"InterquartileRange\":79339.66093750298, \"Outliers\":[ ], \"StandardError\":10728.817907277158, \"Variance\":2302150673.7502208, \"StandardDeviation\":47980.732317777525, \"Skewness\":-0.50826238372439869, \"Kurtosis\":2.11050327966268, \"ConfidenceInterval\":{ \"Mean\":20360791.931687497, \"Error\":10728.817907277158, \"Level\":6, \"Margin\":21028.48309826323, \"Lower\":20339763.448589232, \"Upper\":20381820.414785761 }, \"Percentiles\":{ \"P0\":20258672.37, \"P25\":20327638.975312497, \"P50\":20362636.192500003, \"P67\":20391669.3762875, \"P80\":20406370.68625, \"P85\":20412542.034406248, \"P90\":20414412.5376875, \"P95\":20416606.697718751, \"P100\":20422396.073125 } } } ] } Plots You can install R to automatically get nice plots of your benchmark results. First, make sure Rscript.exe or Rscript is in your path, or define an R_HOME environment variable pointing to the R installation directory (containing the bin directory). Use RPlotExporter.Default and CsvMeasurementsExporter.Default in your config, and the BuildPlots.R script in your bin directory will take care of the rest. Examples <BenchmarkName>-barplot.png <BenchmarkName>-boxplot.png <BenchmarkName>-<MethodName>-density.png <BenchmarkName>-<MethodName>-facetTimeline.png <BenchmarkName>-<MethodName>-facetTimelineSmooth.png <BenchmarkName>-<MethodName>-<JobName>-timelineSmooth.png <BenchmarkName>-<MethodName>-<JobName>-timelineSmooth.png A config example in C#: public class Config : ManualConfig { public Config() { Add(CsvMeasurementsExporter.Default); Add(RPlotExporter.Default); } } A config example in F#: module MyBenchmark open BenchmarkDotNet.Attributes open BenchmarkDotNet.Configs open BenchmarkDotNet.Exporters open BenchmarkDotNet.Exporters.Csv open MyProjectUnderTest type MyConfig() as this = inherit ManualConfig() do this.Add(CsvMeasurementsExporter.Default) this.Add(RPlotExporter.Default) [< MemoryDiagnoser; Config(typeof<MyConfig>); RPlotExporter >] type MyPerformanceTests() = let someTestData = getTestDataAsList () [<Benchmark>] member __.SomeTestCase() = someTestData |> myFunctionUnderTest CSV The CSV file format is often used to graph the output or to analyze the results programmatically. The CSV exporter may be configured to produce sanitized output, where cell values are numerals and their units are predefined. The CSV exporter and other compatible exporters may consume an instance of ISummaryStyle that defines how the output should look like: Property Remarks Default PrintUnitsInHeader If true, units will be displayed in the header row false PrintUnitsInContent If true, units will be appended to the value true TimeUnit If null, unit will be automatically selected null SizeUnit If null, unit will be automatically selected null Example of CSV exporter configured to always use microseconds, kilobytes, and to render units only in column headers: var config = ManualConfig.Create(DefaultConfig.Instance); config.Add(new CsvExporter( CsvSeparator.CurrentCulture, new BenchmarkDotNet.Reports.SummaryStyle { PrintUnitsInHeader = true, PrintUnitsInContent = false, TimeUnit = BenchmarkDotNet.Horology.TimeUnit.Microsecond, SizeUnit = BenchmarkDotNet.Columns.SizeUnit.KB })); Excerpt from the resulting CSV file: Method,...,Mean [us],Error [us],StdDev [us],Min [us],Max [us],Allocated [KB] Benchmark,...,\"37,647.6\",\"32,717.9\",\"21,640.9\",\"11,209.2\",\"59,492.6\",1.58 XML BenchmarkDotNet has a set of XML exporters. You can customize the following properties of these exporters: fileNameSuffix : a string which be placed in the end of target file name. indentXml = false / true : should we format xml or not. excludeMeasurements = false / true : should we exclude detailed information about measurements or not (the final summary with statistics will be in the XML file anyway). Also, there are a set of predefined XML exporters. Example of usage: [XmlExporterAttribute.Brief] [XmlExporterAttribute.Full] [XmlExporterAttribute.BriefCompressed] [XmlExporterAttribute.FullCompressed] [XmlExporter(\"-custom\", indentXml: true, excludeMeasurements: true)] public class IntroXmlExport { [Benchmark] public void Sleep10() => Thread.Sleep(10); [Benchmark] public void Sleep20() => Thread.Sleep(20); } Example of IntroXmlExport-report-brief.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <Summary> <Title>IntroXmlExport</Title> <HostEnvironmentInfo> <BenchmarkDotNetCaption>BenchmarkDotNet</BenchmarkDotNetCaption> <BenchmarkDotNetVersion>0.10.9.20170805-develop</BenchmarkDotNetVersion> <OsVersion>Windows 10 Redstone 2 (10.0.15063)</OsVersion> <ProcessorName>Intel Core i7-3770K CPU 3.50GHz (Ivy Bridge)</ProcessorName> <ProcessorCount>8</ProcessorCount> <RuntimeVersion>.NET Framework 4.7 (CLR 4.0.30319.42000)</RuntimeVersion> <Architecture>64bit</Architecture> <HasAttachedDebugger>False</HasAttachedDebugger> <HasRyuJit>True</HasRyuJit> <Configuration>RELEASE</Configuration> <JitModules>clrjit-v4.7.2101.1</JitModules> <DotNetSdkVersion>1.0.4</DotNetSdkVersion> <ChronometerFrequency> <Hertz>3410220</Hertz> </ChronometerFrequency> <HardwareTimerKind>Tsc</HardwareTimerKind> </HostEnvironmentInfo> <Benchmarks> <Benchmark> <DisplayInfo>IntroXmlExport.Sleep10: DefaultJob</DisplayInfo> <Namespace>BenchmarkDotNet.Samples.Intro</Namespace> <Type>IntroXmlExport</Type> <Method>Sleep10</Method> <MethodTitle>Sleep10</MethodTitle> <Statistics> <N>15</N> <Min>10989865.8785938</Min> <LowerFence>10989836.0967969</LowerFence> <Q1>10990942.6053125</Q1> <Median>10991249.5870313</Median> <Mean>10991270.0524583</Mean> <Q3>10991680.2776563</Q3> <UpperFence>10992786.7861719</UpperFence> <Max>10992115.5501563</Max> <InterquartileRange>737.672343749553</InterquartileRange> <StandardError>148.484545262958</StandardError> <Variance>330714.902729213</Variance> <StandardDeviation>575.07817097262</StandardDeviation> <Skewness>-0.67759778074187</Skewness> <Kurtosis>3.14296703520386</Kurtosis> <ConfidenceInterval> <N>15</N> <Mean>10991270.0524583</Mean> <StandardError>148.484545262958</StandardError> <Level>L999</Level> <Margin>614.793505974065</Margin> <Lower>10990655.2589524</Lower> <Upper>10991884.8459643</Upper> </ConfidenceInterval> <Percentiles> <P0>10989865.8785938</P0> <P25>10991027.3689063</P25> <P50>10991249.5870313</P50> <P67>10991489.490875</P67> <P80>10991696.7722187</P80> <P85>10991754.5031875</P85> <P90>10991933.1939688</P90> <P95>10992067.441125</P95> <P100>10992115.5501563</P100> </Percentiles> </Statistics> </Benchmark> </Benchmarks> </Summary>"
  },
  "articles/configs/filters.html": {
    "href": "articles/configs/filters.html",
    "title": "Filters | BenchmarkDotNet",
    "keywords": "Filters Sometimes you don't want to run all of your benchmarks. In this case, you can filter some of them with the help of filters . Predefined filters: Filter Type Filters benchmarks by Console argument Console example MethodNamesFilter Provided method names method(s) --methods=ToStream,ToString TypeNamesFilter Provided type names class(s) --class=XmlSerializerBenchmarks NamespacesFilter Provided namespaces namespace(s) --namespace=System.Memory AttributesFilter Provided attribute names attribute(s) --attribute=STAThread AllCategoriesFilter All Provided category names category(s) --category=Priority1 AnyCategoriesFilter Any provided category names anycategories --anycategories=Json,Xml SimpleFilter Provided lambda predicate - NameFilter Provided lambda predicate - UnionFilter Logical AND - DisjunctionFilter Logical OR - Sample: IntroFilters You can either use one of the predefined Filter types or create a custom type which implements IFilter interface. Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Filters; namespace BenchmarkDotNet.Samples { [DryJob] [Config(typeof(Config))] public class IntroFilters { private class Config : ManualConfig { // We will benchmark ONLY method with // names (which contains \"A\" OR \"1\") AND (have length < 3) public Config() { // benchmark with names which contains \"A\" OR \"1\" Add(new DisjunctionFilter( new NameFilter(name => name.Contains(\"A\")), new NameFilter(name => name.Contains(\"1\")) )); // benchmark with names with length < 3 Add(new NameFilter(name => name.Length < 3)); } } [Benchmark] public void A1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void A2() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void A3() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void B1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void B2() => Thread.Sleep(10); [Benchmark] public void B3() => Thread.Sleep(10); [Benchmark] public void C1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void C2() => Thread.Sleep(10); [Benchmark] public void C3() => Thread.Sleep(10); [Benchmark] public void Aaa() => Thread.Sleep(10); } } See also Filters The link to this sample: Sample: IntroFilters Sample: IntroCategories Combined together with [BenchmarkCategory] attribute, you can group the benchmarks into categories and filter them by categories. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { [DryJob] [CategoriesColumn] [BenchmarkCategory(\"Awesome\")] [AnyCategoriesFilter(\"A\", \"1\")] public class IntroCategories { [Benchmark] [BenchmarkCategory(\"A\", \"1\")] public void A1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] [BenchmarkCategory(\"A\", \"2\")] public void A2() => Thread.Sleep(10); // Will be benchmarked [Benchmark] [BenchmarkCategory(\"B\", \"1\")] public void B1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] [BenchmarkCategory(\"B\", \"2\")] public void B2() => Thread.Sleep(10); } } Command line examples: --category=A --allCategories=A,B --anyCategories=A,B See also Filters The link to this sample: Sample: IntroCategories Sample: IntroJoin If you are using BenchmarkSwitcher and want to run all the benchmarks with a category from all types and join them into one summary table, use the --join option (or BenchmarkSwitcher.RunAllJoined ): Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { // Run BenchmarkSwither with arguments: \"--join --category=IntroJoinA\" [DryJob] public class IntroJoin1 { [Benchmark] [BenchmarkCategory(\"IntroJoinA\")] public void A() => Thread.Sleep(10); [Benchmark] [BenchmarkCategory(\"IntroJoinB\")] public void B() => Thread.Sleep(10); } [DryJob] public class IntroJoin2 { [Benchmark] [BenchmarkCategory(\"IntroJoinA\")] public void A() => Thread.Sleep(10); [Benchmark] [BenchmarkCategory(\"IntroJoinB\")] public void B() => Thread.Sleep(10); } } Command line --join --category=IntroJoinA Output | Type | Method | Mean | Error | |----------- |------- |---------:|------:| | IntroJoin1 | A | 10.99 ms | NA | | IntroJoin2 | A | 12.50 ms | NA | See also Filters The link to this sample: Sample: IntroJoin"
  },
  "articles/configs/jobs.html": {
    "href": "articles/configs/jobs.html",
    "title": "Jobs | BenchmarkDotNet",
    "keywords": "Jobs Basically, a job describes how to run your benchmark. Practically, it's a set of characteristics which can be specified. You can specify one or several jobs for your benchmarks. Characteristics There are several categories of characteristics which you can specify. Let's consider each category in detail. Id It's a single string characteristic. It allows to name your job. This name will be used in logs and a part of a folder name with generated files for this job. Id doesn't affect benchmark results, but it can be useful for diagnostics. If you don't specify Id , random value will be chosen based on other characteristics Env Env specifies an environment of the job. You can specify the following characteristics: Platform : x86 or x64 Runtime : Clr : Full .NET Framework (available only on Windows) Core : CoreCLR (x-plat) Mono : Mono (x-plat) Jit : LegacyJit (available only for Runtime.Clr ) RyuJit (available only for Runtime.Clr and Runtime.Core ) Llvm (available only for Runtime.Mono ) Affinity : Affinity of a benchmark process GcMode : settings of Garbage Collector Server : true (Server mode) or false (Workstation mode) Concurrent : true (Concurrent mode) or false (NonConcurrent mode) CpuGroups : Specifies whether garbage collection supports multiple CPU groups Force : Specifies whether the BenchmarkDotNet's benchmark runner forces full garbage collection after each benchmark invocation AllowVeryLargeObjects : On 64-bit platforms, enables arrays that are greater than 2 gigabytes (GB) in total size BenchmarkDotNet will use host process environment characteristics for non specified values. Run In this category, you can specifiy how to benchmark each method. RunStrategy : Throughput : default strategy which allows to get good precision level ColdStart : should be used only for measuring cold start of the application or testing purpose Monitoring : A mode without overhead evaluating, with several target iterations LaunchCount : how many times we should launch process with target benchmark WarmupCount : how many warmup iterations should be performed TargetCount : how many target iterations should be performed IterationTime : desired time of a single iteration UnrollFactor : how many times the benchmark method will be invoked per one iteration of a generated loop InvocationCount : count of invocation in a single iteration (if specified, IterationTime will be ignored), must be a multiple of UnrollFactor Usually, you shouldn't specify such characteristics like LaunchCount , WarmupCount , TargetCount , or IterationTime because BenchmarkDotNet has a smart algorithm to choose these values automatically based on received measurements. You can specify it for testing purposes or when you are damn sure that you know the right characteristics for your benchmark (when you set TargetCount = 20 you should understand why 20 is a good value for your case). Accuracy If you want to change the accuracy level, you should use the following characteristics instead of manually adjusting values of WarmupCount , TargetCount , and so on. MaxRelativeError , MaxAbsoluteError : Maximum acceptable error for a benchmark (by default, BenchmarkDotNet continue iterations until the actual error is less than the specified error). In these two characteristics , the error means half of 99.9% confidence interval. MaxAbsoluteError is an absolute TimeInterval ; doesn't have a default value. MaxRelativeError defines max acceptable ( (<half of CI 99.9%>) / Mean ). MinIterationTime : Minimum time of a single iteration. Unlike Run.IterationTime , this characteristic specifies only the lower limit. In case of need, BenchmarkDotNet can increase this value. MinInvokeCount : Minimum about of target method invocation. Default value if 4 but you can decrease this value for cases when single invocations takes a lot of time. EvaluateOverhead : if you benchmark method takes nanoseconds, BenchmarkDotNet overhead can significantly affect measurements. If this characterics is enable, the overhead will be evaluated and subtracted from the result measurements. Default value is true . WithOutlierMode : sometimes you could have outliers in your measurements. Usually these are unexpected outliers which arose because of other processes activities. By default ( OutlierMode.OnlyUpper ), all upper outliers (which is larger than Q3) will be removed from the result measurements. However, some of benchmarks have expected outliers. In these situation, you expect that some of invocation can produce outliers measurements (e.g. in case of network activities, cache operations, and so on). If you want to see result statistics with these outliers, you should use OutlierMode.None . If you can also choose OutlierMode.OnlyLower (outliers which are smaller than Q1 will be removed) or OutlierMode.All (all outliers will be removed). See also: OutlierMode AnalyzeLaunchVariance : this characteristic makes sense only if Run.LaunchCount is default. If this mode is enabled and, BenchmarkDotNet will try to perform several launches and detect if there is a veriance between launches. If this mode is disable, only one launch will be performed. Infrastructure Usually, you shouldn't specify any characteristics from this section, it can be used for advanced cases only. Toolchain : a toolchain which generate source code for target benchmark methods, build it, and execute it. BenchmarkDotNet has own toolchains for CoreCLR projects and classic projects (the last one is RoslynToolchain , you can find it in the BenchmarkDotNet.Toolchains.Roslyn NuGet package). If you want, you can define own toolchain. Clock : a clock which will be used for measurements. BenchmarkDotNet automatically choose the best available clock source, but you can specify own clock source. EngineFactory : a provider for measurement engine which performs all the measurement magic. If you don't trust BenchmarkDotNet, you can define own engine and implement all the measurement stages manually. EnvironmentVariables : customized environment variables for target benchmark. See also: Sample: IntroEnvVars Usage There are several ways to specify a job. Object style You can create own jobs directly from the source code via a cusom config: [Config(typeof(Config))] public class MyBenchmarks { private class Config : ManualConfig { public Config() { Add( new Job(\"MySuperJob\", RunMode.Dry, EnvMode.RyuJitX64) { Env = { Runtime = Runtime.Core }, Run = { LaunchCount = 5, IterationTime = TimeInterval.Millisecond * 200 }, Accuracy = { MaxStdErrRelative = 0.01 } }); // The same, using the .With() factory methods: Add( Job.Dry .With(Platform.X64) .With(Jit.RyuJit) .With(Runtime.Core) .WithLaunchCount(5) .WithIterationTime(TimeInterval.Millisecond * 200) .WithMaxStdErrRelative(0.01) .WithId(\"MySuperJob\")); // IMPORTANT: Id assignment should be the last call in the chain or the id will be lost. } } // Benchmarks } Basically, it's a good idea to start with predefined values (e.g. EnvMode.RyuJitX64 and RunMode.Dry passed as constructor args) and modify rest of the properties using property setters or with help of object initializer syntax. Note that the job cannot be modified after it's added into config. Trying to set a value on property of the frozen job will throw an InvalidOperationException . Use the Job.Frozen property to determine if the code properties can be altered. If you do want to create a new job based on frozen one (all predefined job values are frozen) you can use the .With() extension method var newJob = Job.Dry.With(Platform.X64); or pass the frozen value as a constructor argument var newJob = new Job(Job.Dry) { Env = { Platform = Platform.X64 } }; or use the .Apply() method on unfrozen job var newJob = new Job() { Env = { Platform = Platform.X64 } }.Apply(Job.Dry); in any case the Id property will not be transfered and you must pass it explicitly (using the .ctor id argument or the .WithId() extension method). Attribute style You can also add new jobs via attributes. Examples: [DryJob] [ClrJob, CoreJob, MonoJob] [LegacyJitX86Job, LegacyJitX64Job, RyuJitX64Job] [SimpleJob(RunStrategy.ColdStart, launchCount: 1, warmupCount: 5, targetCount: 5, id: \"FastAndDirtyJob\")] public class MyBenchmarkClass Note that each of the attributes identifies a separate job, the sample above will result in 8 different jobs, not a single merged job. Custom attributes You can also create your own custom attributes with your favourite set of jobs. Example: [AttributeUsage(AttributeTargets.Class | AttributeTargets.Assembly)] public class MySuperJobAttribute : Attribute, IConfigSource { protected MySuperJobAttribute() { var job = new Job(\"MySuperJob\", RunMode.Core); job.Env.Platform = Platform.X64; Config = ManualConfig.CreateEmpty().With(job); } public IConfig Config { get; } } [MySuperJob] public class MyBenchmarks"
  },
  "articles/configs/loggers.html": {
    "href": "articles/configs/loggers.html",
    "title": "Loggers | BenchmarkDotNet",
    "keywords": "Loggers A logger allows you to log results of your benchmark. By default, you can see log on console and in a file ( <BenchmarkName>.log )."
  },
  "articles/configs/order-providers.html": {
    "href": "articles/configs/order-providers.html",
    "title": "OrderProvider | BenchmarkDotNet",
    "keywords": "OrderProvider OrderProviders allows customizing the order of benchmark results in the summary table. A usage example: [Config(typeof(Config))] [RankColumn] public class IntroOrderManual { private class Config : ManualConfig { public Config() { Set(new FastestToSlowestOrderProvider()); } private class FastestToSlowestOrderProvider : IOrderProvider { public IEnumerable<Benchmark> GetExecutionOrder(Benchmark[] benchmarks) => from benchmark in benchmarks orderby benchmark.Parameters[\"X\"] descending, benchmark.Target.MethodDisplayInfo select benchmark; public IEnumerable<Benchmark> GetSummaryOrder(Benchmark[] benchmarks, Summary summary) => from benchmark in benchmarks orderby summary[benchmark].ResultStatistics.Mean select benchmark; public string GetGroupKey(Benchmark benchmark, Summary summary) => null; } } [Params(1, 2, 3)] public int X { get; set; } [Benchmark] public void Fast() => Thread.Sleep(X * 50); [Benchmark] public void Slow() => Thread.Sleep(X * 100); }"
  },
  "articles/configs/toolchains.html": {
    "href": "articles/configs/toolchains.html",
    "title": "Toolchains | BenchmarkDotNet",
    "keywords": "Toolchains In BenchmarkDotNet we generate, build and execute new console app per every benchmark. A toolchain contains generator, builder, and executor. When you run your benchmarks without specifying the toolchain in an explicit way, we use the default one. It works OOTB, you don't need to worry about anything. We use Roslyn for classic .NET and Mono, and dotnet cli for .NET Core and CoreRT. Multiple frameworks support You can target multiple frameworks with single, modern csproj file: <TargetFrameworks>netcoreapp2.0;net462</TargetFrameworks> BenchmarkDotNet allows you to take full advantage of that. With single config, we can execute the benchmarks for all the frameworks that you have listed in your csproj file. If you specify Runtime in explicit way, we just choose the right toolchain for you. [ClrJob, MonoJob, CoreJob, CoreRtJob] public class Algo_Md5VsSha256 { // the benchmarks are going to be executed for classic .NET, Mono (default path), .NET Core and CoreRT (latest version) } TFM At some point of time we need to choose the target framework moniker (TFM). When you are running your app with benchmark as .NET Core app, we just check the version of the System.Runtime.dll which allows us to decide which version of .NET Core you are using. But when you are running your project as classic .NET (.NET 4.6.2 for example), we don't know which TFM to choose for your .NET Core Runtime, so we use the default one - netcoreapp2.0 . If the default netcoreapp2.0 is not OK for you, you must configure the toolchains in explicit way: public class MultipleRuntimes : ManualConfig { public MultipleRuntimes() { Add(Job.Default.With(CsProjCoreToolchain.NetCoreApp21)); // .NET Core 2.1 Add(Job.Default.With(CsProjClassicNetToolchain.Net462)); // NET 4.6.2 } } [Config(typeof(MultipleRuntimes))] public class TypeWithBenchmarks { } After doing this, you can run your benchmarks via: dotnet run -c Release -f net462 dotnet run -c Release -f netcoreapp2.0 And they are going to be executed for both runtimes. Custom .NET Core Runtime We can run your benchmarks for custom <RuntimeFrameworkVersion> if you want. All you need to do is to create custom toolchain by calling CsProjCoreToolchain.From method, which accepts NetCoreAppSettings . public class MyConfig : ManualConfig { public MyConfig() { Add(Job.Default.With( CsProjCoreToolchain.From( new NetCoreAppSettings( targetFrameworkMoniker: \"netcoreapp2.1\", runtimeFrameworkVersion: \"2.1.0-preview2-25628-01\", name: \".NET Core 2.1\")))); } } Custom .NET Runtime It's possible to benchmark a private build of .NET Runtime. All you need to do is to define a job with the right version of ClrRuntime . BenchmarkSwitcher .FromAssembly(typeof(Program).Assembly) .Run(args, DefaultConfig.Instance.With( Job.ShortRun.With(new ClrRuntime(version: \"4.0\")))); This sends the provided version as a COMPLUS_Version env var to the benchmarked process. Custom dotnet cli path We internally use dotnet cli to build and run .NET Core executables. Sometimes it might be mandatory to use non-default dotnet cli path. An example scenario could be a comparison of RyuJit 32bit vs 64 bit. It required due this limitation of dotnet cli public class CustomPathsConfig : ManualConfig { public CustomPathsConfig() { var dotnetCli32bit = NetCoreAppSettings .NetCoreApp20 .WithCustomDotNetCliPath(@\"C:\\Program Files (x86)\\dotnet\\dotnet.exe\", \"32 bit cli\"); var dotnetCli64bit = NetCoreAppSettings .NetCoreApp20 .WithCustomDotNetCliPath(@\"C:\\Program Files\\dotnet\\dotnet.exe\", \"64 bit cli\"); Add(Job.RyuJitX86.With(CsProjCoreToolchain.From(dotnetCli32bit)).WithId(\"32 bit cli\")); Add(Job.RyuJitX64.With(CsProjCoreToolchain.From(dotnetCli64bit)).WithId(\"64 bit cli\")); } } BenchmarkDotNet=v0.10.9.20170910-develop, OS=Windows 10 Redstone 1 (10.0.14393) Processor=Intel Core i7-6600U CPU 2.60GHz (Skylake), ProcessorCount=4 Frequency=2742185 Hz, Resolution=364.6727 ns, Timer=TSC .NET Core SDK=2.1.0-preview1-007074 [Host] : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT 32 bit cli : .NET Core 2.0.0 (Framework 4.6.00001.0), 32bit RyuJIT 64 bit cli : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT Jit=RyuJit Custom CoreCLR and CoreFX BenchmarkDotNet allows the users to run their benchmarks against ANY CoreCLR and CoreFX builds. You can compare your local build vs MyGet feed or Debug vs Release or one version vs another. To avoid problems described here a temporary folder is used when restoring packages for local builds. This is why it takes 20-30s in total to build the benchmarks. Sample config: public class LocalCoreClrConfig : ManualConfig { public LocalCoreClrConfig() { Add(Job.ShortRun.With( CustomCoreClrToolchain.CreateBuilder() .DisplayName(\"local builds\") .UseCoreClrLocalBuild(\"2.1.0-preview2-26313-0\", @\"C:\\Projects\\forks\\coreclr\\bin\\Product\\Windows_NT.x64.Release\\.nuget\\pkg\", @\"C:\\Projects\\coreclr\\packages\") .UseCoreFxLocalBuild(\"4.5.0-preview2-26313-0\", @\"C:\\Projects\\forks\\corefx\\bin\\packages\\Release\") .ToToolchain())); Add(Job.ShortRun.With( CustomCoreClrToolchain.CreateBuilder() .DisplayName(\"local coreclr myget corefx\") .UseCoreClrLocalBuild(\"2.1.0-preview2-26313-0\", @\"C:\\Projects\\forks\\coreclr\\bin\\Product\\Windows_NT.x64.Release\\.nuget\\pkg\", @\"C:\\Projects\\coreclr\\packages\") .UseCoreFxNuGet(\"4.5.0-preview2-26215-01\") .ToToolchain())); Add(Job.ShortRun.With( CustomCoreClrToolchain.CreateBuilder() .DisplayName(\"myget coreclr local corefx\") .UseCoreClrNuGet(\"2.1.0-preview2-26214-07\") .UseCoreFxLocalBuild(\"4.5.0-preview2-26313-0\", @\"C:\\Projects\\forks\\corefx\\bin\\packages\\Release\") .ToToolchain())); Add(Job.ShortRun.With( CustomCoreClrToolchain.CreateBuilder() .DisplayName(\"myget builds\") .UseCoreClrNuGet(\"2.1.0-preview2-26214-07\") .UseCoreFxNuGet(\"4.5.0-preview2-26215-01\") .ToToolchain())); Add(DefaultConfig.Instance.GetExporters().ToArray()); Add(DefaultConfig.Instance.GetLoggers().ToArray()); Add(DefaultConfig.Instance.GetColumnProviders().ToArray()); Add(DisassemblyDiagnoser.Create(new DisassemblyDiagnoserConfig(printAsm: true, recursiveDepth: 2))); } } The CustomCoreClrToolchainBuilder offers some extra customization features for our power users: UseCoreClrDefault() tells the toolchain to use the default CoreClr (for given dotnet cli and moniker), emits no direct dependency to NETCore.Runtime.CoreCLR package UseCoreFxDefault() tells the toolchain to use the default CoreFx (for given dotnet cli and moniker), emits no direct dependency to NetCore.App package AdditionalNuGetFeed(string, string) it allows you to define an additional NuGet feed UseNuGetClearTag(bool) emits clear tag in the auto-generated NuGet.config file TargetFrameworkMoniker(string) TFM, netcoreapp2.1 is the default DotNetCli(string) if not provided, the one from PATH will be used RuntimeIdentifier(string) if not provided, portable OS-arch will be used (example: \"win-x64\", \"linux-x86\") RuntimeFrameworkVersion(string) optional, when set it's copied to the generated .csproj file UseTempFolderForRestore(bool) restore to temp folder to keep your CI clean or install same package many times (perhaps with different content but same version number), by default true for local builds To make sure that you are running against the expected version of CoreCLR and CoreFX you just need to check the CoreCLR and CoreFX version numbers in the output: BenchmarkDotNet=v0.10.12.20180215-develop, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.192) Intel Core i7-3687U CPU 2.10GHz (Ivy Bridge), 1 CPU, 4 logical cores and 2 physical cores Frequency=2533308 Hz, Resolution=394.7408 ns, Timer=TSC .NET Core SDK=2.1.300-preview2-008162 [Host] : .NET Core 2.0.5 (CoreCLR 4.6.26020.03, CoreFX 4.6.26018.01), 64bit RyuJIT Job-DHYYZE : .NET Core ? (CoreCLR 4.6.26313.0, CoreFX 4.6.26313.0), 64bit RyuJIT Job-VGTPFY : .NET Core ? (CoreCLR 4.6.26313.0, CoreFX 4.6.26215.01), 64bit RyuJIT Job-IYZFNW : .NET Core ? (CoreCLR 4.6.26214.07, CoreFX 4.6.26215.01), 64bit RyuJIT Job-CTQFFQ : .NET Core ? (CoreCLR 4.6.26214.07, CoreFX 4.6.26313.0), 64bit RyuJIT InProcessToolchain InProcessToolchain is our toolchain which does not generate any new executable. It emits IL on the fly and runs it from within the process itself. It can be usefull if want to run the benchmarks very fast or if you want to run them for framework which we don't support. An example could be a local build of CoreCLR. [Config(typeof(Config))] public class IntroInProcess { private class Config : ManualConfig { public Config() { Add(Job.MediumRun .WithLaunchCount(1) .WithId(\"OutOfProc\")); Add(Job.MediumRun .WithLaunchCount(1) .With(InProcessToolchain.Instance) .WithId(\"InProcess\")); } } [Benchmark(Description = \"new byte[10kB]\")] public byte[] Allocate() => new byte[10000]; } or just: [InProcessAttribute] public class TypeWithBenchmarks { } CoreRT BenchmarkDotNet supports CoreRT ! However, you might want to know how it works to get a better understanding of the results that you get. CoreRT is a flavor of .NET Core. Which means that: you have to target .NET Core to be able to build CoreRT benchmarks ( <TargetFramework>netcoreapp2.1</TargetFramework> in the .csproj file) you have to specify the CoreRT runtime in an explicit way, either by using [CoreRtJob] attribute or by using the fluent Job config API Job.ShortRun.With(Runtime.CoreRT) to run CoreRT benchmark you run the app as a .NET Core/.NET process ( dotnet run -c Release -f netcoreapp2.1 ) and BenchmarkDotNet does all the CoreRT compilation for you. If you want to check what files are generated you need to apply [KeepBenchmarkFiles] attribute to the class which defines benchmarks. By default BenchmarkDotNet uses the latest version of Microsoft.DotNet.ILCompiler to build the CoreRT benchmark according to this instructions . var config = DefaultConfig.Instance .With(Job.Default.With(Runtime.CoreRT)); // uses the latest CoreRT version BenchmarkSwitcher .FromAssembly(typeof(Program).Assembly) .Run(args, config); [CoreRtJob] // uses the latest CoreRT version public class TheTypeWithBenchmarks { [Benchmark] // the benchmarks go here } Note : BenchmarkDotNet is going to run dotnet restore on the auto-generated project. The first time it does so, it's going to take a LOT of time to download all the dependencies (few minutes). Just give it some time and don't press Ctrl+C too fast ;) If you want to benchmark some particular version of CoreRT you have to specify it in an explicit way: var config = DefaultConfig.Instance .With(Job.ShortRun .With(Runtime.CoreRT) .With(CoreRtToolchain.CreateBuilder() .UseCoreRtNuGet(microsoftDotNetILCompilerVersion: \"1.0.0-alpha-26412-02\") // the version goes here .DisplayName(\"CoreRT NuGet\") .ToToolchain())); Compiling source to native code using the ILCompiler you built If you are an CoreRT contributor and you want to benchmark your local build of CoreRT you have to provide necessary info (IlcPath): var config = DefaultConfig.Instance .With(Job.ShortRun .With(Runtime.CoreRT) .With(CoreRtToolchain.CreateBuilder() .UseCoreRtLocal(@\"C:\\Projects\\corert\\bin\\Windows_NT.x64.Release\") // IlcPath .DisplayName(\"Core RT RyuJit\") .ToToolchain())); BenchmarkDotNet is going to follow these instructrions to get it working for you. Using CPP Code Generator This approach uses transpiler to convert IL to C++, and then uses platform specific C++ compiler and linker for compiling/linking the application. The transpiler is a lot less mature than the RyuJIT path. If you came here to give CoreRT a try on your .NET Core program, use the RyuJIT option above. If you want to test CPP Code Generator you have to use UseCppCodeGenerator method: var config = DefaultConfig.Instance .With(Job.CoreRT.With( CoreRtToolchain.CreateBuilder() .UseCoreRtLocal(@\"C:\\Projects\\corert\\bin\\Windows_NT.x64.Release\") // IlcPath .UseCppCodeGenerator() // ENABLE IT .DisplayName(\"CPP\") .ToToolchain())); Note : You might get some The method or operation is not implemented. errors as of today if the code that you are trying to benchmark is using some features that are not implemented by CoreRT/transpiler yet..."
  },
  "articles/configs/validators.html": {
    "href": "articles/configs/validators.html",
    "title": "Validators | BenchmarkDotNet",
    "keywords": "Validators A validator can validate your benchmarks before they are executed and produce validation errors. If any of the validation errors is critical, then none of the benchmarks will get executed. Available validators are: BaselineValidator.FailOnError - it checks if more than 1 Benchmark per class has Baseline = true applied. This validator is mandatory. JitOptimizationsValidator.(Dont)FailOnError - it checks whether any of the referenced assemblies is non-optimized. DontFailOnError version is enabled by default. ExecutionValidator.(Dont)FailOnError - it checks if it is possible to run your benchmarks by executing each of them once. Optional. ReturnValueValidator.(Dont)FailOnError - it checks if non-void benchmarks return equal values. Optional."
  },
  "articles/contributing/building.html": {
    "href": "articles/contributing/building.html",
    "title": "Building | BenchmarkDotNet",
    "keywords": "Building There are two recommended options to build BenchmarkDotNet from source: Option A (Windows only) - Visual Studio Visual Studio 2017 version 15.7 Preview 4 or higher (Community, Professional, Enterprise). Visual Studio 2017 doesn't have installed necessary the .NET Core SDK 2.1 Preview 1, but you can get it from the Installing the .Net Core SDK page . You may also need .NET Core Runtime 2.1 Preview 1 . Visual Studio 2017 should have installed “F# language support” feature. You can also install the support directly as a separate download . Once all the necessary tools are in place, building is trivial. Simply open solution file BenchmarkDotNet.sln that lives at the base of the repository and run Build action. Option B (Windows, Linux, macOS) - Cake (C# Make) Cake (C# Make) is a cross platform build automation system with a C# DSL to do things like compiling code, copy files/folders, running unit tests, compress files and build NuGet packages. The build currently depends on the following prerequisites: Windows: PowerShell version 5 or higher MSBuild version 15.1 or higher .NET Framework 4.6 or higher Linux: Install Mono version 5 or higher Install fsharp package Install packages required to .NET Core SDK gettext libcurl4-openssl-dev libicu-dev libssl-dev libunwind8 macOS Install Mono version 5 or higher Install fsharp package Install the latest version of OpenSSL . After you have installed these pre-requisites, you can build the BenchmarkDotNet by invoking the build script ( build.ps1 on Windows, or build.sh on Linux and macOS) at the base of the BenchmarkDotNet repository. By default the build process also run all the tests. There are quite a few tests, taking a significant amount of time that is not necessary if you just want to experiment with changes. You can skip the tests phase by adding the skiptests argument to the build script, e.g. .\\build.ps1 --SkipTests=True or ./build.sh --skiptests=true . Build has a number of options that you use. Some of the more important options are skiptests - do not run the tests. This can shorten build times quite a bit. On Windows: .\\build.ps1 --SkipTests=True or ./build.sh --skiptests=true on Linux/macOS. configuration - build the 'Release' or 'Debug' build type. Default value is 'Release'. On Windows: .\\build.ps1 -Configuration Debug or ./build.sh --configuration debug on Linux/macOS. target - with this parameter you can run a specific target from build pipeline. Default value is 'Default' target. On Windows: .\\build.ps1 -Target Default or ./build.sh --target default on Linux/macOS. Available targets: Default - run all actions one by one. Clean - clean all obj , bin and artifacts directories. Restore - automatically execute Clean action and after that restore all NuGet dependencies. Build - automatically execute Restore action, then run MSBuild for the solution file. FastTests - automatically execute Build action, then run all tests from the BenchmarkDotNet.Tests project. SlowTests - automatically execute Build action, then run all tests from the BenchmarkDotNet.IntegrationTests project. Pack - automatically execute Build action and after that creates local NuGet packages."
  },
  "articles/contributing/debugging.html": {
    "href": "articles/contributing/debugging.html",
    "title": "Debugging | BenchmarkDotNet",
    "keywords": "Debugging There should be two debug profiles available in VS drop down However due to VS 2017 RC4 bug it seems that it's impossible to choose as of 2/19/2017. If you want to change it then please edit the project file (.csproj) and set your order - the first framework moniker is always used. <TargetFrameworks>netcoreapp1.1;net46</TargetFrameworks>"
  },
  "articles/contributing/development.html": {
    "href": "articles/contributing/development.html",
    "title": "Development | BenchmarkDotNet",
    "keywords": "Development When you want to add some dependency then you just use the \"Add reference\" option avaiable in Visual Studio. However, sometimes it might be not enough. If it supports all frameworks Just add it to the top level of csproj. <ItemGroup> <ProjectReference Include=\"..\\..\\src\\BenchmarkDotNet\\BenchmarkDotNet.csproj\" /> </ItemGroup> If the package/project is not available for all target frameworks Specify a conditional dependency: <ItemGroup Condition=\" '$(TargetFramework)' == 'net46' \"> <ProjectReference Include=\"..\\..\\src\\BenchmarkDotNet.Diagnostics.Windows\\BenchmarkDotNet.Diagnostics.Windows.csproj\" /> </ItemGroup> Once you add it as dependency to specific framework, you need to use ugly #if #endif to exclude it for other compilation targets. We define #CLASSIC, #CORE. In other OSS projects you can meet more complex names like #NET40, #NET451, #DNXCORE50 or #NETCORE. #if CLASSIC using Microsoft.Build.Framework; using Microsoft.Build.Utilities; namespace BenchmarkDotNet.Loggers { internal class MsBuildConsoleLogger : Logger { private ILogger Logger { get; set; } public MsBuildConsoleLogger(ILogger logger) { Logger = logger; } public override void Initialize(IEventSource eventSource) { // By default, just show errors not warnings if (eventSource != null) eventSource.ErrorRaised += OnEventSourceErrorRaised; } private void OnEventSourceErrorRaised(object sender, BuildErrorEventArgs e) => Logger.WriteLineError(\"// {0}({1},{2}): error {3}: {4}\", e.File, e.LineNumber, e.ColumnNumber, e.Code, e.Message); } } #endif"
  },
  "articles/contributing/disassembler.html": {
    "href": "articles/contributing/disassembler.html",
    "title": "Contributing to Disassembler | BenchmarkDotNet",
    "keywords": "Contributing to Disassembler The disassembler might looks scarry, but once you know how it works and how to debug it, it's very easy to develop it. How it works We have 3 disassemblers: Mono x64 for Windows x86 for Windows The MonoDisassembler is very simple: it spawns Mono with the right arguments to get the asm, Mono prints the output to the console and we just parse it. Single class does the job: MonoDisassembler . When it comes to Windows disassemblers it's not so easy. To obtain the disassm we are using ClrMD. ClrMD can attach only to the process of same bitness (architecture). This is why we have two dissasemblers: x64 and x86. The code is the same (single class, linked in two projects) but compiled for two different architectures. Unfortunatelly ClrMD is not a signed dll. This is why, we keep both diassemblers in the resources of the BenchmarkDotNet.dll. When we need the disassembler, we search for it in the resources, copy it to the disk and run (it's an exe). How to debug the disassembler You need to create a new project which executes the code that you would like to disassemble. It can be a simple console app. In this app, you need to run the desired code (to get it jitted) and just don't exit. Before you exit, you have to attach with Disassembler to given process. Disassembler requires some arguments to run: id of the process to attach, full type name of the type which contains desired method, name of desired method and what should be disassembled: asm, IL, C#, prolog & epilog. Personally I use following code to run the console app and print arguments that are required to attach to it: namespace Sample { class Program { static void Main(string[] args) { var result = Benchmark(); // execute the benchmark do method gets jitted Console.WriteLine($\"{Process.GetCurrentProcess().Id} \" + // process Id $\"\\\"{typeof(Program).FullName}\\\" \" + // full type name $\"{nameof(Benchmark)} \" + // benchmarked method name $\"{bool.TrueString} \" + // printAsm $\"{bool.FalseString} \" + // printIL $\"{bool.FalseString} \" + // print Source $\"{bool.FalseString} \" + // print prolog and epilog \"2 \" + // recursive depth $\"{Path.GetTempFileName()}.xml\"); // result xml file path while(true) { Console.WriteLine(\"Press Ctrl+C to kill the process\"); Console.ReadLine(); // block the exe, attach with Disassembler now } GC.KeepAlive(result); } public static IntPtr Benchmark() { return new IntPtr(42).Multiply(4); } } public static class IntPtrHelper { [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe static IntPtr Multiply(this IntPtr a, int factor) { return (sizeof(IntPtr) == sizeof(int)) ? new IntPtr((int)a * factor) : new IntPtr((long)a * factor); } } } Important : Please remember that every new classic .NET project in VS compiles as 32 bit. If you want to check the asm produced for x64 you need to go to the properites of the console app (Alt+Enter) and uncheck \"Prefer 32 bit\" in the \"Build\" tab. Once you configure your app, you should run it. It will give you an output similar to this: 13672 ConsoleApp1.RandomSort ArraySort True True True True 7 C:\\Users\\adsitnik\\AppData\\Local\\Temp\\tmpDCB9.tmp.xml Now you go to BenchmarkDotNet solution, select desired Disassembler project in the Solution Explorer and Set it as Startup project. After this you go to the project's properties and in the Debug tab copy-paste the arguments for the disassembler. Now when you start debugging, your IDE will spawn new process of the disassembler with the right arguments to attach to the desired exe. You should be able to debug it like any othe app. Please keep in mind that you should always use the disassembler for the correct processor architecture. If you fail to debug it, you are most probably using the wrong one."
  },
  "articles/contributing/documentation.html": {
    "href": "articles/contributing/documentation.html",
    "title": "Documentation | BenchmarkDotNet",
    "keywords": "Documentation BenchmarkDotNet uses DocFX as a documentation generation tool. Hints If you want to provide a link to API, you can use cross references by UID . For example, [OutlierMode](xref:BenchmarkDotNet.Mathematics.OutlierMode) and @BenchmarkDotNet.Mathematics.OutlierMode will be transformed to OutlierMode . Notes DocFX uses the following syntax for different types of notes: > [!NOTE] > <note content> > [!TIP] > <note content> > [!WARNING] > <warning content> > [!IMPORTANT] > <important content> > [!Caution] > <caution content> It will be transformed to: Note Tip Warning Important Caution See also DocFX User Manual DocFX Tutorials: Links and Cross References DocFX Flavored Markdown"
  },
  "articles/samples/IntroArguments.html": {
    "href": "articles/samples/IntroArguments.html",
    "title": "Sample: IntroArguments | BenchmarkDotNet",
    "keywords": "Sample: IntroArguments As an alternative to using [Params] , you can specify arguments for your benchmarks. There are several ways to do it (described below). Important InProcessToolchain does not support Arguments (yet!). See #687 for more details. The [Arguments] allows you to provide a set of values. Every value must be a compile-time constant (it's C# lanugage limitation for attributes in general). You can also combine [Arguments] with [Params] . As a result, you will get results for each combination of params values. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroArguments { [Params(true, false)] // Arguments can be combined with Params public bool AddExtra5Miliseconds; [Benchmark] [Arguments(100, 10)] [Arguments(100, 20)] [Arguments(200, 10)] [Arguments(200, 20)] public void Benchmark(int a, int b) { if (AddExtra5Miliseconds) Thread.Sleep(a + b + 5); else Thread.Sleep(a + b); } } } Output | Method | AddExtra5Miliseconds | a | b | Mean | Error | StdDev | |---------- |--------------------- |---- |--- |---------:|----------:|----------:| | Benchmark | False | 100 | 10 | 110.1 ms | 0.0056 ms | 0.0044 ms | | Benchmark | False | 100 | 20 | 120.1 ms | 0.0155 ms | 0.0138 ms | | Benchmark | False | 200 | 10 | 210.2 ms | 0.0187 ms | 0.0175 ms | | Benchmark | False | 200 | 20 | 220.3 ms | 0.1055 ms | 0.0986 ms | | Benchmark | True | 100 | 10 | 115.3 ms | 0.1375 ms | 0.1286 ms | | Benchmark | True | 100 | 20 | 125.3 ms | 0.1212 ms | 0.1134 ms | | Benchmark | True | 200 | 10 | 215.4 ms | 0.0779 ms | 0.0691 ms | | Benchmark | True | 200 | 20 | 225.4 ms | 0.0775 ms | 0.0725 ms | See also Parameterization"
  },
  "articles/samples/IntroArgumentsSource.html": {
    "href": "articles/samples/IntroArgumentsSource.html",
    "title": "Sample: IntroArgumentsSource | BenchmarkDotNet",
    "keywords": "Sample: IntroArgumentsSource In case you want to use a lot of values, you should use [ArgumentsSource] . You can mark one or several fields or properties in your class by the [ArgumentsSource] attribute. In this attribute, you have to specify the name of public method/property which is going to provide the values (something that implements IEnumerable ). The source must be within benchmarked type! Source code using System; using System.Collections.Generic; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroArgumentsSource { [Benchmark] [ArgumentsSource(nameof(Numbers))] public double Pow(double x, double y) => Math.Pow(x, y); public IEnumerable<object[]> Numbers() { yield return new object[] { 1.0, 1.0 }; yield return new object[] { 2.0, 2.0 }; yield return new object[] { 4.0, 4.0 }; yield return new object[] { 10.0, 10.0 }; } } } Output | Method | x | y | Mean | Error | StdDev | |------- |--- |--- |----------:|----------:|----------:| | Pow | 1 | 1 | 9.360 ns | 0.0190 ns | 0.0149 ns | | Pow | 2 | 2 | 40.624 ns | 0.3413 ns | 0.3192 ns | | Pow | 4 | 4 | 40.537 ns | 0.0560 ns | 0.0524 ns | | Pow | 10 | 10 | 40.395 ns | 0.3274 ns | 0.3063 ns | Another example If the values are complex types you need to override ToString method to change the display names used in the results. [DryJob] public class WithNonPrimitiveArgumentsSource { [Benchmark] [ArgumentsSource(nameof(NonPrimitive))] public void Simple(SomeClass someClass, SomeStruct someStruct) { for (int i = 0; i < someStruct.RangeEnd; i++) Console.WriteLine($\"// array.Values[{i}] = {someClass.Values[i]}\"); } public IEnumerable<object[]> NonPrimitive() { yield return new object[] { new SomeClass(Enumerable.Range(0, 10).ToArray()), new SomeStruct(10) }; yield return new object[] { new SomeClass(Enumerable.Range(0, 15).ToArray()), new SomeStruct(15) }; } public class SomeClass { public SomeClass(int[] initialValues) => Values = initialValues.Select(val => val * 2).ToArray(); public int[] Values { get; } public override string ToString() => $\"{Values.Length} items\"; } public struct SomeStruct { public SomeStruct(int rangeEnd) => RangeEnd = rangeEnd; public int RangeEnd { get; } public override string ToString() => $\"{RangeEnd}\"; } } | Method | someClass | someStruct | Mean | Error | |------- |---------- |----------- |---------:|------:| | Simple | 10 items | 10 | 887.2 us | NA | | Simple | 15 items | 15 | 963.1 us | NA | See also Parameterization"
  },
  "articles/samples/IntroArrayParam.html": {
    "href": "articles/samples/IntroArrayParam.html",
    "title": "Sample: IntroArrayParam | BenchmarkDotNet",
    "keywords": "Sample: IntroArrayParam Warning The cost of creating the arguments is not included in the benchmark. So if you want to pass an array as an argument, we are going to allocate it before running the benchmark, and the benchmark will not include this operation. Source code using System; using System.Collections.Generic; using System.Linq; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Code; namespace BenchmarkDotNet.Samples { public class IntroArrayParam { [Benchmark] [ArgumentsSource(nameof(Data))] public int ArrayIndexOf(int[] array, int value) => Array.IndexOf(array, value); [Benchmark] [ArgumentsSource(nameof(Data))] public int ManualIndexOf(int[] array, int value) { for (int i = 0; i < array.Length; i++) if (array[i] == value) return i; return -1; } public IEnumerable<object[]> Data() { yield return CreateArrayAndValue(new[] { 1, 2, 3 }, 4); yield return CreateArrayAndValue(Enumerable.Range(0, 100).ToArray(), 4); yield return CreateArrayAndValue(Enumerable.Range(0, 100).ToArray(), 101); } private object[] CreateArrayAndValue(int[] array, int value) => new object[] { ArrayParam<int>.ForPrimitives(array), value }; } } Output | Method | array | value | Mean | Error | StdDev | Allocated | |-------------- |----------- |------ |----------:|----------:|----------:|----------:| | ArrayIndexOf | Array[100] | 4 | 15.558 ns | 0.0638 ns | 0.0597 ns | 0 B | | ManualIndexOf | Array[100] | 4 | 5.345 ns | 0.0668 ns | 0.0625 ns | 0 B | | ArrayIndexOf | Array[3] | 4 | 14.334 ns | 0.1758 ns | 0.1558 ns | 0 B | | ManualIndexOf | Array[3] | 4 | 2.758 ns | 0.0905 ns | 0.1208 ns | 0 B | | ArrayIndexOf | Array[100] | 101 | 78.359 ns | 1.8853 ns | 2.0955 ns | 0 B | | ManualIndexOf | Array[100] | 101 | 80.421 ns | 0.6391 ns | 0.5978 ns | 0 B | See also Parameterization"
  },
  "articles/samples/IntroBasic.html": {
    "href": "articles/samples/IntroBasic.html",
    "title": "Sample: IntroBasic | BenchmarkDotNet",
    "keywords": "Sample: IntroBasic Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { // It is very easy to use BenchmarkDotNet. You should just create a class public class IntroBasic { // And define a method with the Benchmark attribute [Benchmark] public void Sleep() => Thread.Sleep(10); // You can write a description for your method. [Benchmark(Description = \"Thread.Sleep(10)\")] public void SleepWithDescription() => Thread.Sleep(10); } }"
  },
  "articles/samples/IntroBenchmarkBaseline.html": {
    "href": "articles/samples/IntroBenchmarkBaseline.html",
    "title": "Sample: IntroBenchmarkBaseline | BenchmarkDotNet",
    "keywords": "Sample: IntroBenchmarkBaseline You can mark a method as a baseline with the help of [Benchmark(Baseline = true)] . Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroBenchmarkBaseline { [Benchmark] public void Time50() => Thread.Sleep(50); [Benchmark(Baseline = true)] public void Time100() => Thread.Sleep(100); [Benchmark] public void Time150() => Thread.Sleep(150); } } Output As a result, you will have additional Scaled column in the summary table: | Method | Mean | Error | StdDev | Scaled | |-------- |----------:|----------:|----------:|-------:| | Time50 | 50.46 ms | 0.0779 ms | 0.0729 ms | 0.50 | | Time100 | 100.39 ms | 0.0762 ms | 0.0713 ms | 1.00 | | Time150 | 150.48 ms | 0.0986 ms | 0.0922 ms | 1.50 | See also Benchmark and Job Baselines"
  },
  "articles/samples/IntroCategories.html": {
    "href": "articles/samples/IntroCategories.html",
    "title": "Sample: IntroCategories | BenchmarkDotNet",
    "keywords": "Sample: IntroCategories Combined together with [BenchmarkCategory] attribute, you can group the benchmarks into categories and filter them by categories. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { [DryJob] [CategoriesColumn] [BenchmarkCategory(\"Awesome\")] [AnyCategoriesFilter(\"A\", \"1\")] public class IntroCategories { [Benchmark] [BenchmarkCategory(\"A\", \"1\")] public void A1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] [BenchmarkCategory(\"A\", \"2\")] public void A2() => Thread.Sleep(10); // Will be benchmarked [Benchmark] [BenchmarkCategory(\"B\", \"1\")] public void B1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] [BenchmarkCategory(\"B\", \"2\")] public void B2() => Thread.Sleep(10); } } Command line examples: --category=A --allCategories=A,B --anyCategories=A,B See also Filters"
  },
  "articles/samples/IntroCategoryBaseline.html": {
    "href": "articles/samples/IntroCategoryBaseline.html",
    "title": "Sample: IntroCategoryBaseline | BenchmarkDotNet",
    "keywords": "Sample: IntroCategoryBaseline The only way to have several baselines in the same class is to separate them by categories and mark the class with [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)] . Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; namespace BenchmarkDotNet.Samples { [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)] [CategoriesColumn] public class IntroCategoryBaseline { [BenchmarkCategory(\"Fast\"), Benchmark(Baseline = true)] public void Time50() => Thread.Sleep(50); [BenchmarkCategory(\"Fast\"), Benchmark] public void Time100() => Thread.Sleep(100); [BenchmarkCategory(\"Slow\"), Benchmark(Baseline = true)] public void Time550() => Thread.Sleep(550); [BenchmarkCategory(\"Slow\"), Benchmark] public void Time600() => Thread.Sleep(600); } } Output | Method | Categories | Mean | Error | StdDev | Scaled | |-------- |----------- |----------:|----------:|----------:|-------:| | Time50 | Fast | 50.46 ms | 0.0745 ms | 0.0697 ms | 1.00 | | Time100 | Fast | 100.47 ms | 0.0955 ms | 0.0893 ms | 1.99 | | | | | | | | | Time550 | Slow | 550.48 ms | 0.0525 ms | 0.0492 ms | 1.00 | | Time600 | Slow | 600.45 ms | 0.0396 ms | 0.0331 ms | 1.09 | See also Benchmark and Job Baselines"
  },
  "articles/samples/IntroCustomMono.html": {
    "href": "articles/samples/IntroCustomMono.html",
    "title": "Sample: IntroCustomMono | BenchmarkDotNet",
    "keywords": "Sample: IntroCustomMono BenchmarkDotNet allows you to compare different runtimes, including Mono. If you apply [MonoJob] attribute to your class we use your default mono runtime. If you want to compare different versions of Mono you need to provide use the custom paths. You can do this today by using the overloaded ctor of MonoJob attribute or by specifying the runtime in a fluent way. Source code using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Environments; using BenchmarkDotNet.Jobs; using BenchmarkDotNet.Running; namespace BenchmarkDotNet.Samples { // *** Attribute Style *** [MonoJob(\"Mono x64\", @\"C:\\Program Files\\Mono\\bin\\mono.exe\")] [MonoJob(\"Mono x86\", @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\")] public class IntroCustomMono { [Benchmark] public void Foo() { // Benchmark body } } // *** Object Style *** [Config(typeof(Config))] public class IntroCustomMonoObjectStyle { private class Config : ManualConfig { public Config() { Add(Job.ShortRun.With(new MonoRuntime( \"Mono x64\", @\"C:\\Program Files\\Mono\\bin\\mono.exe\"))); Add(Job.ShortRun.With(new MonoRuntime( \"Mono x86\", @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\"))); } } [Benchmark] public void Foo() { // Benchmark body } } // *** Fluent Config *** public class IntroCustomMonoFluentConfig { public static void Run() { BenchmarkRunner.Run<IntroCustomMonoFluentConfig>(ManualConfig .CreateEmpty() .With(Job.ShortRun.With(new MonoRuntime( \"Mono x64\", @\"C:\\Program Files\\Mono\\bin\\mono.exe\"))) .With(Job.ShortRun.With(new MonoRuntime( \"Mono x86\", @\"C:\\Program Files (x86)\\Mono\\bin\\mono.exe\")))); } [Benchmark] public void Foo() { // Benchmark body } } } See also Customizing Runtime"
  },
  "articles/samples/IntroCustomMonoArguments.html": {
    "href": "articles/samples/IntroCustomMonoArguments.html",
    "title": "Sample: IntroCustomMonoArguments | BenchmarkDotNet",
    "keywords": "Sample: IntroCustomMonoArguments Source code using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; namespace BenchmarkDotNet.Samples { [Config(typeof(ConfigWithCustomArguments))] public class IntroCustomMonoArguments { public class ConfigWithCustomArguments : ManualConfig { public ConfigWithCustomArguments() { // --optimize=MODE , -O=mode // MODE is a comma separated list of optimizations. They also allow // optimizations to be turned off by prefixing the optimization // name with a minus sign. Add(Job.Mono .With(new[] { new MonoArgument(\"--optimize=inline\") }) .WithId(\"Inlining enabled\")); Add(Job.Mono .With(new[] { new MonoArgument(\"--optimize=-inline\") }) .WithId(\"Inlining disabled\")); } } [Benchmark] public void Sample() { ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); ShouldGetInlined(); } void ShouldGetInlined() { } } } Output | Method | Job | Arguments | Mean | StdDev | |------- |------------------ |------------------- |-----------:|----------:| | Sample | Inlining disabled | --optimize=-inline | 19.4252 ns | 0.4525 ns | | Sample | Inlining enabled | --optimize=inline | 0.0000 ns | 0.0000 ns | See also Customizing Runtime"
  },
  "articles/samples/IntroEncoding.html": {
    "href": "articles/samples/IntroEncoding.html",
    "title": "Sample: IntroEncoding | BenchmarkDotNet",
    "keywords": "Sample: IntroEncoding BenchmarkDotNet currently supports two encodings for output - ASCII and Unicode . By default ASCII is setted. Unicode allows to use special characters, like μ and ± . Encoding allows you to set encoding in your benchmark. Warning You should be sure that your terminal/text editor supports Unicode. On Windows, you may have some troubles with Unicode symbols if system default code page configured as non-English (in Control Panel + Regional and Language Options, Language for Non-Unicode Programs). Source code using System.Diagnostics; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using System.Text; using BenchmarkDotNet.Running; namespace BenchmarkDotNet.Samples { // *** Attribute Style *** [EncodingAttribute.Unicode] public class IntroEncoding { [Benchmark] public long Foo() { long waitUntil = Stopwatch.GetTimestamp() + 1000; while (Stopwatch.GetTimestamp() < waitUntil) { } return waitUntil; } } // *** Object Style *** [Config(typeof(Config))] public class IntroEncodingObjectStyle { private class Config : ManualConfig { public Config() { Set(Encoding.Unicode); } } [Benchmark] public long Foo() { long waitUntil = Stopwatch.GetTimestamp() + 1000; while (Stopwatch.GetTimestamp() < waitUntil) { } return waitUntil; } } // *** Fluent Config *** public class IntroEncodingFluentConfig { public static void Run() { BenchmarkRunner.Run<IntroEncodingFluentConfig>( ManualConfig .Create(DefaultConfig.Instance) .With(Encoding.Unicode)); } [Benchmark] public long Foo() { long waitUntil = Stopwatch.GetTimestamp() + 1000; while (Stopwatch.GetTimestamp() < waitUntil) { } return waitUntil; } } } Output Mean = 1.0265 μs, StdErr = 0.0005 μs (0.05%); N = 15, StdDev = 0.0018 μs Min = 1.0239 μs, Q1 = 1.0248 μs, Median = 1.0264 μs, Q3 = 1.0280 μs, Max = 1.0296 μs IQR = 0.0033 μs, LowerFence = 1.0199 μs, UpperFence = 1.0329 μs ConfidenceInterval = [1.0245 μs; 1.0285 μs] (CI 99.9%), Margin = 0.0020 μs (0.19% of Mean) Skewness = 0.12, Kurtosis = 1.56, MValue = 2 -------------------- Histogram -------------------- [1.023 μs ; 1.030 μs) | @@@@@@@@@@@@@@@ --------------------------------------------------- Method | Mean | Error | StdDev | ------- |---------:|----------:|----------:| Foo | 1.027 μs | 0.0020 μs | 0.0018 μs | See also Encoding EncodingAttribute MultiEncodingString"
  },
  "articles/samples/IntroEnvVars.html": {
    "href": "articles/samples/IntroEnvVars.html",
    "title": "Sample: IntroEnvVars | BenchmarkDotNet",
    "keywords": "Sample: IntroEnvVars You can configure custom environment variables for the process that is running your benchmarks. One reason for doing this might be checking out how different runtime knobs affect the performance of .NET Core. Source code using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; namespace BenchmarkDotNet.Samples { [Config(typeof(ConfigWithCustomEnvVars))] public class IntroEnvVars { private class ConfigWithCustomEnvVars : ManualConfig { private const string JitNoInline = \"COMPlus_JitNoInline\"; public ConfigWithCustomEnvVars() { Add(Job.Core.WithId(\"Inlining enabled\")); Add(Job.Core .With(new[] { new EnvironmentVariable(JitNoInline, \"1\") }) .WithId(\"Inlining disabled\")); } } [Benchmark] public void Foo() { // Benchmark body } } } See also Customizing Runtime Configs Jobs"
  },
  "articles/samples/IntroFilters.html": {
    "href": "articles/samples/IntroFilters.html",
    "title": "Sample: IntroFilters | BenchmarkDotNet",
    "keywords": "Sample: IntroFilters You can either use one of the predefined Filter types or create a custom type which implements IFilter interface. Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Filters; namespace BenchmarkDotNet.Samples { [DryJob] [Config(typeof(Config))] public class IntroFilters { private class Config : ManualConfig { // We will benchmark ONLY method with // names (which contains \"A\" OR \"1\") AND (have length < 3) public Config() { // benchmark with names which contains \"A\" OR \"1\" Add(new DisjunctionFilter( new NameFilter(name => name.Contains(\"A\")), new NameFilter(name => name.Contains(\"1\")) )); // benchmark with names with length < 3 Add(new NameFilter(name => name.Length < 3)); } } [Benchmark] public void A1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void A2() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void A3() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void B1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void B2() => Thread.Sleep(10); [Benchmark] public void B3() => Thread.Sleep(10); [Benchmark] public void C1() => Thread.Sleep(10); // Will be benchmarked [Benchmark] public void C2() => Thread.Sleep(10); [Benchmark] public void C3() => Thread.Sleep(10); [Benchmark] public void Aaa() => Thread.Sleep(10); } } See also Filters"
  },
  "articles/samples/IntroJobBaseline.html": {
    "href": "articles/samples/IntroJobBaseline.html",
    "title": "Sample: IntroJobBaseline | BenchmarkDotNet",
    "keywords": "Sample: IntroJobBaseline If you want to compare several runtime configuration, you can mark one of your jobs with isBaseline = true . Source code using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { [ClrJob(isBaseline: true)] [MonoJob] [CoreJob] public class IntroJobBaseline { [Benchmark] public int SplitJoin() => string.Join(\",\", new string[1000]).Split(',').Length; } } Output BenchmarkDotNet=v0.10.12, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.192) Processor=Intel Core i7-6700HQ CPU 2.60GHz (Skylake), ProcessorCount=8 Frequency=2531249 Hz, Resolution=395.0619 ns, Timer=TSC .NET Core SDK=2.0.3 [Host] : .NET Core 2.0.3 (Framework 4.6.25815.02), 64bit RyuJIT Job-MXFYPZ : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2600.0 Core : .NET Core 2.0.3 (Framework 4.6.25815.02), 64bit RyuJIT Mono : Mono 5.4.0 (Visual Studio), 64bit Method | Runtime | Mean | Error | StdDev | Scaled | ScaledSD | ---------- |-------- |---------:|----------:|----------:|-------:|---------:| SplitJoin | Clr | 19.42 us | 0.2447 us | 0.1910 us | 1.00 | 0.00 | SplitJoin | Core | 13.00 us | 0.2183 us | 0.1935 us | 0.67 | 0.01 | SplitJoin | Mono | 39.14 us | 0.7763 us | 1.3596 us | 2.02 | 0.07 | See also Benchmark and Job Baselines"
  },
  "articles/samples/IntroJoin.html": {
    "href": "articles/samples/IntroJoin.html",
    "title": "Sample: IntroJoin | BenchmarkDotNet",
    "keywords": "Sample: IntroJoin If you are using BenchmarkSwitcher and want to run all the benchmarks with a category from all types and join them into one summary table, use the --join option (or BenchmarkSwitcher.RunAllJoined ): Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { // Run BenchmarkSwither with arguments: \"--join --category=IntroJoinA\" [DryJob] public class IntroJoin1 { [Benchmark] [BenchmarkCategory(\"IntroJoinA\")] public void A() => Thread.Sleep(10); [Benchmark] [BenchmarkCategory(\"IntroJoinB\")] public void B() => Thread.Sleep(10); } [DryJob] public class IntroJoin2 { [Benchmark] [BenchmarkCategory(\"IntroJoinA\")] public void A() => Thread.Sleep(10); [Benchmark] [BenchmarkCategory(\"IntroJoinB\")] public void B() => Thread.Sleep(10); } } Command line --join --category=IntroJoinA Output | Type | Method | Mean | Error | |----------- |------- |---------:|------:| | IntroJoin1 | A | 10.99 ms | NA | | IntroJoin2 | A | 12.50 ms | NA | See also Filters"
  },
  "articles/samples/IntroMultimodal.html": {
    "href": "articles/samples/IntroMultimodal.html",
    "title": "Sample: IntroMultimodal | BenchmarkDotNet",
    "keywords": "Sample: IntroMultimodal Source code using System; using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { [MValueColumn] [SimpleJob(RunStrategy.Throughput, 1, 0, -1, 1, \"MainJob\")] public class IntroMultimodal { private readonly Random rnd = new Random(42); private void Multimodal(int n) => Thread.Sleep((rnd.Next(n) + 1) * 100); [Benchmark] public void Unimodal() => Multimodal(1); [Benchmark] public void Bimodal() => Multimodal(2); [Benchmark] public void Trimodal() => Multimodal(3); [Benchmark] public void Quadrimodal() => Multimodal(4); } } Output Method | Mean | Error | StdDev | Median | MValue | ------------ |---------:|-----------:|------------:|---------:|-------:| Unimodal | 100.5 ms | 0.0713 ms | 0.0667 ms | 100.5 ms | 2.000 | Bimodal | 144.5 ms | 16.9165 ms | 49.8787 ms | 100.6 ms | 3.571 | Trimodal | 182.5 ms | 27.4285 ms | 80.8734 ms | 200.5 ms | 4.651 | Quadrimodal | 226.6 ms | 37.2269 ms | 109.7644 ms | 200.7 ms | 5.882 | // * Warnings * MultimodalDistribution IntroMultimodal.Bimodal: MainJob -> It seems that the distribution is bimodal (mValue = 3.57) IntroMultimodal.Trimodal: MainJob -> It seems that the distribution is multimodal (mValue = 4.65) IntroMultimodal.Quadrimodal: MainJob -> It seems that the distribution is multimodal (mValue = 5.88) See also Statistics"
  },
  "articles/samples/IntroOutliers.html": {
    "href": "articles/samples/IntroOutliers.html",
    "title": "Sample: IntroOutliers | BenchmarkDotNet",
    "keywords": "Sample: IntroOutliers Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; using BenchmarkDotNet.Mathematics; namespace BenchmarkDotNet.Samples { [Config(typeof(Config))] public class IntroOutliers { private class Config : ManualConfig { public Config() { var jobBase = Job.Default.WithWarmupCount(0).WithTargetCount(10).WithInvocationCount(1).WithUnrollFactor(1); Add(jobBase.WithOutlierMode(OutlierMode.None).WithId(\"DontRemoveOutliers\")); Add(jobBase.WithOutlierMode(OutlierMode.OnlyUpper).WithId(\"RemoveUpperOutliers\")); } } private int counter = 0; [Benchmark] public void Foo() { counter++; int noise = counter % 10 == 0 ? 500 : 0; Thread.Sleep(100 + noise); } } } Output Method | Job | OutlierMode | Mean | Error | StdDev | ------- |-------------------- |------------ |---------:|------------:|------------:| Foo | DontRemoveOutliers | None | 150.5 ms | 239.1911 ms | 158.2101 ms | Foo | RemoveUpperOutliers | OnlyUpper | 100.5 ms | 0.1931 ms | 0.1149 ms | // * Hints * Outliers IntroOutliers.Foo: DontRemoveOutliers -> 1 outlier was detected IntroOutliers.Foo: RemoveUpperOutliers -> 1 outlier was removed See also Statistics"
  },
  "articles/samples/IntroParams.html": {
    "href": "articles/samples/IntroParams.html",
    "title": "Sample: IntroParams | BenchmarkDotNet",
    "keywords": "Sample: IntroParams You can mark one or several fields or properties in your class by the [Params] attribute. In this attribute, you can specify set of values. Every value must be a compile-time constant. As a result, you will get results for each combination of params values. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroParams { [Params(100, 200)] public int A { get; set; } [Params(10, 20)] public int B { get; set; } [Benchmark] public void Benchmark() => Thread.Sleep(A + B + 5); } } Output Method | Median | StdDev | A | B ---------- |------------ |---------- |---- |--- Benchmark | 115.3325 ms | 0.0242 ms | 100 | 10 Benchmark | 125.3282 ms | 0.0245 ms | 100 | 20 Benchmark | 215.3024 ms | 0.0375 ms | 200 | 10 Benchmark | 225.2710 ms | 0.0434 ms | 200 | 20 See also Parameterization"
  },
  "articles/samples/IntroParamsSource.html": {
    "href": "articles/samples/IntroParamsSource.html",
    "title": "Sample: IntroParamsSource | BenchmarkDotNet",
    "keywords": "Sample: IntroParamsSource In case you want to use a lot of values, you should use [ParamsSource] You can mark one or several fields or properties in your class by the [Params] attribute. In this attribute, you have to specify the name of public method/property which is going to provide the values (something that implements IEnumerable ). The source must be within benchmarked type! Source code using System.Collections.Generic; using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroParamsSource { // property with public setter [ParamsSource(nameof(ValuesForA))] public int A { get; set; } // public field [ParamsSource(nameof(ValuesForB))] public int B; // public property public IEnumerable<int> ValuesForA => new[] { 100, 200 }; // public static method public static IEnumerable<int> ValuesForB() => new[] { 10, 20 }; [Benchmark] public void Benchmark() => Thread.Sleep(A + B + 5); } } Output Method | Median | StdDev | A | B ---------- |------------ |---------- |---- |--- Benchmark | 115.3325 ms | 0.0242 ms | 100 | 10 Benchmark | 125.3282 ms | 0.0245 ms | 100 | 20 Benchmark | 215.3024 ms | 0.0375 ms | 200 | 10 Benchmark | 225.2710 ms | 0.0434 ms | 200 | 20 Remarks A remark about IParam. You don't need to use IParam anymore since 0.11.0 . Just use complex types as you wish and override ToString method to change the display names used in the results. See also Parameterization"
  },
  "articles/samples/IntroPercentiles.html": {
    "href": "articles/samples/IntroPercentiles.html",
    "title": "Sample: IntroPercentiles | BenchmarkDotNet",
    "keywords": "Sample: IntroPercentiles The percentile represents a higher boundary for specified percentage of the measurements. For example, 95th percentile = 500ms means that 95% of all samples are not slower than 500ms. This metric is not very useful in microbenchmarks, as the values from consequent runs have a very narrow distribution. However, real-world scenarios often have so-called long tail distribution (due to IO delays, locks, memory access latency and so on), so the average execution time cannot be trusted. The percentiles allow to include the tail of distribution into the comparison. However, it requires some preparations steps. At first, you should have enough runs to count percentiles from. The TargetCount in the config should be set to 10-20 runs at least. Second, the count of iterations for each run should not be very high, or the peak timings will be averaged. The IterationTime = 25 works fine for most cases; for long-running benchmarks the Mode = Mode.SingleRun will be the best choice. However, feel free to experiment with the config values. Third, if you want to be sure that measurements are repeatable, set the LaunchCount to 3 or higher. And last, don't forget to include the columns into the config. They are not included by default (as said above, these are not too useful for most of the benchmarks). There're predefined StatisticColumn.P0 .. StatisticColumn.P100 for absolute timing percentiles and BaselineDiffColumn.Scaled50 .. BaselineDiffColumn.Scaled95 for relative percentiles. Example Run the IntroPercentiles sample. It contains three benchmark methods. First delays for 20 ms constantly. The second has random delays for 10..30 ms. And the third delays for 10ms 85 times of 100 and delays for 40ms 15 times of 100. Here's the output from the benchmark (some columns removed for brevity): Method Median StdDev Scaled P0 P50 P80 P85 P95 P100 ScaledP50 ScaledP85 ScaledP95 ConstantDelays 20.3813 ms 0.2051 ms 1.00 20.0272 ms 20.3813 ms 20.4895 ms 20.4954 ms 20.5869 ms 21.1471 ms 1.00 1.00 1.00 RandomDelays 19.8055 ms 5.7556 ms 0.97 10.0793 ms 19.8055 ms 25.4173 ms 26.5187 ms 29.0313 ms 29.4550 ms 0.97 1.29 1.41 RareDelays 10.3385 ms 11.4828 ms 0.51 10.0157 ms 10.3385 ms 10.5211 ms 40.0560 ms 40.3992 ms 40.4674 ms 0.51 1.95 1.96 Note that the 'Scaled' column kinda lies to you. The \"almost same\" RandomDelays method is actually not so performant and the seems-to-be-fastest RareDelays method is 2 times slower 15 times of 100. Also, it's very easy to screw the results with incorrect setup. For example, the same code being run with new Job { TargetCount = 5, IterationTime = 500 } completely hides the peak values: Method Median StdDev Scaled P0 P50 P80 P85 P95 P100 ScaledP50 ScaledP85 ScaledP95 ConstantDelays 20.2692 ms 0.0308 ms 1.00 20.1986 ms 20.2692 ms 20.2843 ms 20.2968 ms 20.3097 ms 20.3122 ms 1.00 1.00 1.00 RandomDelays 18.9965 ms 0.8601 ms 0.94 18.1339 ms 18.9965 ms 19.8126 ms 19.8278 ms 20.4485 ms 20.9466 ms 0.94 0.98 1.01 RareDelays 14.0912 ms 2.8619 ms 0.70 10.2606 ms 14.0912 ms 15.7653 ms 17.3862 ms 18.6728 ms 18.6940 ms 0.70 0.86 0.92 Source code using System; using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Columns; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { // Using percentiles for adequate timings representation [Config(typeof(Config))] [SimpleJob(RunStrategy.ColdStart, launchCount: 4, warmupCount: 3, targetCount: 20, id: \"MyJob\")] public class IntroPercentiles { // To share between runs. // DO NOT do this in production code. The System.Random IS NOT threadsafe. private static readonly Random Rnd = new Random(); private class Config : ManualConfig { public Config() { Add(StatisticColumn.P0, StatisticColumn.P25, StatisticColumn.P50, StatisticColumn.P67, StatisticColumn.P80, StatisticColumn.P85, StatisticColumn.P90, StatisticColumn.P95, StatisticColumn.P100); } } [Benchmark(Baseline = true)] public void ConstantDelays() => Thread.Sleep(20); [Benchmark] public void RandomDelays() => Thread.Sleep(10 + (int) (20 * Rnd.NextDouble())); [Benchmark] public void RareDelays() { int rndTime = 10; // Bigger delays for 15% of the runs if (Rnd.NextDouble() > 0.85) { rndTime += 30; } Thread.Sleep(rndTime); } } } See also Statistics"
  },
  "articles/samples/IntroRankColumn.html": {
    "href": "articles/samples/IntroRankColumn.html",
    "title": "Sample: IntroRankColumn | BenchmarkDotNet",
    "keywords": "Sample: IntroRankColumn Source code using System.Threading; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Mathematics; using BenchmarkDotNet.Order; namespace BenchmarkDotNet.Samples { [ShortRunJob] [OrderProvider(SummaryOrderPolicy.FastestToSlowest)] [RankColumn(NumeralSystem.Arabic)] [RankColumn(NumeralSystem.Roman)] [RankColumn(NumeralSystem.Stars)] public class IntroRankColumn { [Params(1, 2)] public int Factor; [Benchmark] public void Foo() => Thread.Sleep(Factor * 100); [Benchmark] public void Bar() => Thread.Sleep(Factor * 200); } } Output Method | Factor | Mean | Error | StdDev | Rank | Rank | Rank | ------- |------- |---------:|---------:|----------:|-----:|-----:|-----:| Foo | 1 | 100.8 ms | 2.250 ms | 0.1272 ms | 1 | I | * | Foo | 2 | 200.8 ms | 4.674 ms | 0.2641 ms | 2 | II | ** | Bar | 1 | 200.9 ms | 2.012 ms | 0.1137 ms | 2 | II | ** | Bar | 2 | 400.7 ms | 4.509 ms | 0.2548 ms | 3 | III | *** | See also Statistics"
  },
  "articles/samples/IntroSetupCleanupGlobal.html": {
    "href": "articles/samples/IntroSetupCleanupGlobal.html",
    "title": "Sample: IntroSetupCleanupGlobal | BenchmarkDotNet",
    "keywords": "Sample: IntroSetupCleanupGlobal A method which is marked by the [GlobalSetup] attribute will be executed only once per a benchmarked method after initialization of benchmark parameters and before all the benchmark method invocations. A method which is marked by the [GlobalCleanup] attribute will be executed only once per a benchmarked method after all the benchmark method invocations. If you are using some unmanaged resources (e.g., which were created in the GlobalSetup method), they can be disposed in the GlobalCleanup method. Source code using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroSetupCleanupGlobal { [Params(10, 100, 1000)] public int N; private int[] data; [GlobalSetup] public void GlobalSetup() { data = new int[N]; // executed once per each N value } [Benchmark] public int Logic() { int res = 0; for (int i = 0; i < N; i++) res += data[i]; return res; } [GlobalCleanup] public void GlobalCleanup() { // Disposing logic } } } See also Setup And Cleanup"
  },
  "articles/samples/IntroSetupCleanupIteration.html": {
    "href": "articles/samples/IntroSetupCleanupIteration.html",
    "title": "Sample: IntroSetupCleanupIteration | BenchmarkDotNet",
    "keywords": "Sample: IntroSetupCleanupIteration A method which is marked by the [IterationSetup] attribute will be executed only once before each an iteration . It's not recommended to use this attribute in microbenchmarks because it can spoil the results. However, if you are writing a macrobenchmark (e.g. a benchmark which takes at least 100ms) and you want to prepare some data before each iteration, [IterationSetup] can be useful. BenchmarkDotNet doesn't support setup/cleanup method for a single method invocation ( an operation ), but you can perform only one operation per iteration. It's recommended to use RunStrategy.Monitoring for such cases. Be careful: if you allocate any objects in the [IterationSetup] method, the MemoryDiagnoser results can also be spoiled. A method which is marked by the [IterationCleanup] attribute will be executed only once after each an iteration . This attribute has the same set of constraint with [IterationSetup] : it's not recommended to use [IterationCleanup] in microbenchmarks. Source code using System; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { [SimpleJob(RunStrategy.Monitoring, launchCount: 1, warmupCount: 2, targetCount: 3)] public class IntroSetupCleanupIteration { private int setupCounter; private int cleanupCounter; [IterationSetup] public void IterationSetup() => Console.WriteLine($\"// IterationSetup ({++setupCounter})\"); [IterationCleanup] public void IterationCleanup() => Console.WriteLine($\"// IterationCleanup ({++cleanupCounter})\"); [GlobalSetup] public void GlobalSetup() => Console.WriteLine(\"// \" + \"GlobalSetup\"); [GlobalCleanup] public void GlobalCleanup() => Console.WriteLine(\"// \" + \"GlobalCleanup\"); [Benchmark] public void Benchmark() => Console.WriteLine(\"// \" + \"Benchmark\"); } } THe order of method calls // GlobalSetup // IterationSetup (1) // IterationSetup Jitting // IterationCleanup (1) // IterationCleanup Jitting // IterationSetup (2) // MainWarmup1 // Benchmark // MainWarmup1 // IterationCleanup (2) // MainWarmup1 // IterationSetup (3) // MainWarmup2 // Benchmark // MainWarmup2 // IterationCleanup (3) // MainWarmup2 // IterationSetup (4) // MainTarget1 // Benchmark // MainTarget1 // IterationCleanup (4) // MainTarget1 // IterationSetup (5) // MainTarget2 // Benchmark // MainTarget2 // IterationCleanup (5) // MainTarget2 // IterationSetup (6) // MainTarget3 // Benchmark // MainTarget3 // IterationCleanup (6) // MainTarget3 // GlobalCleanup See also Setup And Cleanup"
  },
  "articles/samples/IntroSetupCleanupTarget.html": {
    "href": "articles/samples/IntroSetupCleanupTarget.html",
    "title": "Sample: IntroSetupCleanupTarget | BenchmarkDotNet",
    "keywords": "Sample: IntroSetupCleanupTarget Sometimes it's useful to run setup or cleanups for specific benchmarks. All four setup and cleanup attributes have a Target property that allow the setup/cleanup method to be run for one or more specific benchmark methods. Source code using System; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Engines; namespace BenchmarkDotNet.Samples { [SimpleJob(RunStrategy.Monitoring, launchCount: 0, warmupCount: 0, targetCount: 1)] public class IntroSetupCleanupTarget { [GlobalSetup(Target = nameof(BenchmarkA))] public void GlobalSetupA() => Console.WriteLine(\"// \" + \"GlobalSetup A\"); [Benchmark] public void BenchmarkA() => Console.WriteLine(\"// \" + \"Benchmark A\"); [GlobalSetup(Target = nameof(BenchmarkB) + \",\" + nameof(BenchmarkC))] public void GlobalSetupB() => Console.WriteLine(\"// \" + \"GlobalSetup B\"); [Benchmark] public void BenchmarkB() => Console.WriteLine(\"// \" + \"Benchmark B\"); [Benchmark] public void BenchmarkC() => Console.WriteLine(\"// \" + \"Benchmark C\"); [Benchmark] public void BenchmarkD() => Console.WriteLine(\"// \" + \"Benchmark D\"); } } THe order of method calls // GlobalSetup A // Benchmark A // GlobalSetup B // Benchmark B // GlobalSetup B // Benchmark C // Benchmark D See also Setup And Cleanup"
  },
  "articles/samples/IntroStaThread.html": {
    "href": "articles/samples/IntroStaThread.html",
    "title": "Sample: IntroStaThread | BenchmarkDotNet",
    "keywords": "Sample: IntroStaThread If the code you want to benchmark requires [System.STAThread] then you need to apply this attribute to the benchmarked method. BenchmarkDotNet will generate executable with [STAThread] applied to it's Main method. Currently it does not work for .NET Core 2.0 due to this bug. Source code using System.Threading; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { public class IntroStaThread { [Benchmark, System.STAThread] public void CheckForSTA() { if (Thread.CurrentThread.GetApartmentState() != ApartmentState.STA) { throw new ThreadStateException( \"The current threads apartment state is not STA\"); } } } } See also Customizing Runtime"
  },
  "articles/samples/IntroStatisticsColumns.html": {
    "href": "articles/samples/IntroStatisticsColumns.html",
    "title": "Sample: IntroStatisticsColumns | BenchmarkDotNet",
    "keywords": "Sample: IntroStatisticsColumns Source code using System; using System.Security.Cryptography; using BenchmarkDotNet.Attributes; namespace BenchmarkDotNet.Samples { [MediumRunJob, SkewnessColumn, KurtosisColumn, WelchTTestPValueColumn] public class IntroStatisticsColumns { private const int N = 10000; private readonly byte[] data; private readonly MD5 md5 = MD5.Create(); private readonly SHA256 sha256 = SHA256.Create(); public IntroStatisticsColumns() { data = new byte[N]; new Random(42).NextBytes(data); } [Benchmark(Baseline = true)] public byte[] Md5A() => md5.ComputeHash(data); [Benchmark] public byte[] Md5B() => md5.ComputeHash(data); [Benchmark] public byte[] Sha256() => sha256.ComputeHash(data); } } Output Method Mean Error StdDev Skewness Kurtosis Scaled ScaledSD t-test p-value Md5A 15.91 us 0.0807 us 0.1209 us 0.4067 1.646 1.00 0.00 1.0000 Md5B 15.89 us 0.0709 us 0.1062 us 0.5893 2.141 1.00 0.01 0.5426 Sha256 36.62 us 0.6390 us 0.9564 us 1.1363 4.014 2.30 0.06 0.0000 See also Statistics"
  },
  "changelog/full.html": {
    "href": "changelog/full.html",
    "title": "Full ChangeLog | BenchmarkDotNet",
    "keywords": "Full ChangeLog BenchmarkDotNet v0.11.0 BenchmarkDotNet v0.10.14 Per-method parameterization ( Read more ) Console histograms and multimodal disribution detection Many improvements for Mono disassembly support on Windows ( Read more ) Many bugfixes Milestone details In the v0.10.14 scope, 8 issues were resolved and 11 pull requests where merged. This release includes 47 commits by 8 contributors. Resolved issues (8) #256 Per-method parameterization (assignee: @AndreyAkinshin ) #429 Detect multimodal distributions (assignee: @AndreyAkinshin ) #496 Integration with TravisCI (assignee: @jongalloway ) #684 Horology.ClockTests.ChronometerTest fails on Travis CI (macOS) (assignee: @AndreyAkinshin ) #689 DisassemblyDiagnoser for Mono does not work on Windows and Linux (assignee: @morgan-kn ) #691 Cannot run F# benchmarks when benchmark returns F# generic (assignee: @adamsitnik ) #697 Copy custom setting from app.config in multitarget projects (assignee: @adamsitnik ) #706 Support private builds of .NET Runtime (assignee: @adamsitnik ) Merged pull requests (11) #577 Arguments (by @adamsitnik ) #647 Histograms and multimodal distribution detection, fixes #429 (by @AndreyAkinshin ) #674 Cleanup suggested by VS2017 Code Analysis (plus one typo) (by @shoelzer ) #675 Fix IDE0034: 'default' expression can be simplified (by @shoelzer ) #676 Correct NodeTime text which links to NodaTime api (by @MishaHusiuk ) #681 Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) #682 Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) #683 Integration with TravisCI (by @Ky7m ) #694 Fix 689 (by @morgan-kn ) #695 Rename Program to UniqueProgramName to avoid conflicts, fixes #691 (by @adamsitnik ) #696 Build system: Update dotnet SDK and dotnet runtime. Enable FastTests netcoreapp1.1 on non-Windows. (by @Ky7m ) Commits (47) 41aeea Histograms and multimodal distribution detection, fixes #429 (by @AndreyAkinshin ) 960e58 Handle measurements with zero operations (by @AndreyAkinshin ) 19cddd Fix typo in BaselineScaledColumn.cs (by @dfederm ) a99594 Merge pull request #673 from dfederm/dfederm/fix-typo (by @AndreyAkinshin ) 5b3425 Cleanup suggested by VS2017 Code Analysis (plus one typo) (#674) (by @shoelzer ) 16b611 Fix IDE0034: 'default' expression can be simplified (by @shoelzer ) 048b32 Merge pull request #675 from shoelzer/master (by @AndreyAkinshin ) 9d5f71 Correct NodeTime text which links to NodaTime lib (by @MishaHusiuk ) c450c7 Merge pull request #676 from MishaHusiuk/patch-1 (by @adamsitnik ) 9fad52 Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) 3d906f Fix typo (Perdictor -> Predictor) (by @dmitry-ra ) d1a48e Merge pull request #681 from dmitry-ra/master (by @AndreyAkinshin ) 4ccd35 Merge pull request #682 from dmitry-ra/patch-1 (by @AndreyAkinshin ) f743a1 CakeBuild 0.24.0 -> 0.26.1 (by @Ky7m ) c5eb40 Remove postProjects from solution file. (by @Ky7m ) e60387 Pass correct configuration to test settings (by @Ky7m ) 224ab8 Disable public sign option for F# project (by @Ky7m ) ee98f3 Limit Max CPU count for msbuild workers (by @Ky7m ) 17031d Fix readme file (by @Ky7m ) 6fbae8 One more update to readme file (by @Ky7m ) cb90f2 disable Travis failing test #684 to unblock #683 (by @adamsitnik ) 782ca7 Merge pull request #683 from Ky7m/Integration-with-TravisCI (by @adamsitnik ) eebf92 Merge branch 'master' into multimodal (by @adamsitnik ) 10511b Merge pull request #647 from dotnet/multimodal (by @adamsitnik ) 57bc17 Fix bug in ClockTests.ChronometerTest, fixes #684 (by @AndreyAkinshin ) 7c4b14 Arguments (#577), fixes #256 (by @adamsitnik ) 40771c Update dotnet SDK (2.1.4 -> 2.1.101) and dotnet runtime (1.1.6 -> 1.1.7). (by @Ky7m ) 88a9db Merge pull request #696 from Ky7m/build-runtime-update (by @adamsitnik ) 4ac6ad we need different name than typical \"Program\" to avoid problems with referenc... (by @adamsitnik ) 1178d6 Update build badges (by @AndreyAkinshin ) 24ed1f ProcessHelper: handle null Data values in OutputDataReceived, fix #689 (by @morgan-kn ) 7a3d2b MonoDisassembler improvements (by @morgan-kn ) f1a0f5 Merge pull request #694 from morgan-kn/Fix689 (by @AndreyAkinshin ) 428905 .NET Core apps are .dlls (not .exes), fixes #697 (by @adamsitnik ) befbc8 Add FAQ notes about #692 (by @AndreyAkinshin ) b4504b Support private builds of .NET Runtime, fixes #706 (by @adamsitnik ) c93e1e Introduce separate logic for Windows10 brand strings (by @AndreyAkinshin ) 685766 Shortify Windows 10 brand strings in the summary (by @AndreyAkinshin ) 9bdd0c Shortify cpu info in summary (by @AndreyAkinshin ) 2288ad Prettify macOS brand string (by @AndreyAkinshin ) 8a0b48 Handle tailed nop instructions in mono disasm output (by @AndreyAkinshin ) d80834 Advanced DryJob attributes (by @AndreyAkinshin ) 9a37ad Handle invalid mono disasm outputs (by @AndreyAkinshin ) 21d6d7 Add IntroDisasm (by @AndreyAkinshin ) 5e37b5 Add \"Disassembly Diagnoser for Mono on Windows\" in docs (by @AndreyAkinshin ) c2c4e8 set COMPLUS_Version env var for private Clr builds even if no env vars were d... (by @adamsitnik ) 88b088 Set library version: 0.10.14 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) David Federman ( @dfederm ) Dmitry Razumikhin ( @dmitry-ra ) Igor Fesenko ( @Ky7m ) Irina Ananyeva ( @morgan-kn ) MishaHusiuk ( @MishaHusiuk ) Steve Hoelzer ( @shoelzer ) Thank you very much! Additional details Date: April 09, 2018 Milestone: v0.10.14 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.14 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.14 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.14 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.14 BenchmarkDotNet v0.10.13 Overview post: BenchmarkDotNet v0.10.13 Milestone details In the v0.10.13 scope, 15 issues were resolved and 9 pull requests where merged. This release includes 50 commits by 8 contributors. Resolved issues (15) #541 Mono Support for DisassemblyDiagnoser (assignee: @morgan-kn ) #614 Build fails with \"'Microsoft.NETCore.App', version '1.1.2' was not found\" probably due to 1.1.4 runtime not being available #626 Support Visual Basic project files (.vbroj) targeting .NET Core (assignee: @adamsitnik ) #630 Bug: Statistics.DivMean - NullReferenceException (assignee: @AndreyAkinshin ) #631 Bug: Generic benchmark class fails for DisassemblyDiagnoser with \"Sequence contains no matching element\" (assignee: @adamsitnik ) #632 ParamsSource no longer sorted in results (assignee: @AndreyAkinshin ) #634 Extend SummaryOrderPolicy (assignee: @adamsitnik ) #636 Unable to run Runner.exe --method MethodName (assignee: @adamsitnik ) #640 Disassembler fails with generic instance (assignee: @adamsitnik ) #643 BenchmarkDotNet should respect LangVersion project setting (assignee: @adamsitnik ) #644 BenchmarkDotNet.Mathematics.RankHelper again. (assignee: @AndreyAkinshin ) #648 BenchmarkDotNet requires dotnet cli toolchain to be installed (assignee: @adamsitnik ) #651 Support ANY CoreFX and CoreCLR builds (assignee: @adamsitnik ) #652 BenchmarkSwitcher should support generic types with parameterless public ctors (assignee: @adamsitnik ) #653 Proper way to run BenchmarkDotNet on macOS/Linux (assignee: @adamsitnik ) Merged pull requests (9) #624 Upgrade build tools (by @Ky7m ) #625 Fix xunit warnings connected to usage of Assert.Equal() to check for Null (by @Ky7m ) #633 HostEnvironmentInfo: remove LogicalCoreCount (by @morgan-kn ) #637 Mono Support for DisassemblyDiagnoser #541 (by @morgan-kn ) #639 Portability.Cpu tests improvements (by @morgan-kn ) #642 sync DataContracts to CopiedDataContracts (by @morgan-kn ) #645 Fixing --help display for options (by @ENikS ) #646 Allow sorting by the Method name in DefaultOrderProvider and OrderProviderAttribute (by @ENikS ) #666 Plots...Examples...Added A config example in F# (by @ScottHutchinson ) Commits (50) a26e82 Upgrade build tools: (by @Ky7m ) 1643cb Merge pull request #624 from Ky7m/upgrade-build-tools (by @adamsitnik ) abae51 Fix xunit warnings connected to usage of Assert.Equal() to check for null val... (by @Ky7m ) fb68bc support Visual Basic .NET Core projects, fixes #626 (by @adamsitnik ) 067a33 Remove redundant properties in common.props (by @AndreyAkinshin ) 80deb9 BuildNumber fix in common.props (by @AndreyAkinshin ) 87b458 Add CONTRIBUTING.md (by @AndreyAkinshin ) 8bcf42 Add CODE_OF_CONDUCT.md (by @AndreyAkinshin ) d3867d HostEnvironmentInfo: remove LogicalCoreCount (#633) (by @morgan-kn ) 06e66a Specify PLACE_SIMPLE_EMBEDDED_STATEMENT_ON_SAME_LINE in DotSettings (by @AndreyAkinshin ) d8ac43 Mono Support for DisassemblyDiagnoser #541 (by @morgan-kn ) 4356da Merge pull request #637 from morgan-kn/MonoSupportForDisassemblyDiagnoser (by @AndreyAkinshin ) 7572f4 Fix paths to images in docs (by @AndreyAkinshin ) f076df Portability.Cpu tests improvements (by morgan_kn) da6499 Merge pull request #639 from morgan-kn/TestsImprovment (by @AndreyAkinshin ) 5dd1a5 Disassembly Diagnoser: support for generic types, fixes #640 fixes #631 (by @adamsitnik ) 3c0e71 diassembly diangoser: different methods can have same metadata id, add type i... (by @adamsitnik ) 294801 test fix ;) (by @adamsitnik ) 9e66bb sync DataContracts to CopiedDataContracts (by @morgan-kn ) 690f34 Merge pull request #642 from morgan-kn/sync (by @adamsitnik ) e1e3e2 don't use type.Fullname for file names, it's too long for generics (by @adamsitnik ) 43d7c2 we restore before build, so build does need to restore too (it's new default ... (by @adamsitnik ) 9d4c33 trying harder to trick the JIT (#640, #631) (by @adamsitnik ) f8f70f Natural ordering for logical groups, fixes #632 (by @AndreyAkinshin ) a2ec34 copy LanguageVersion to the output .csproj, fixes #643 (by @adamsitnik ) 31e6dd Fixing --help display for options (#645), fixes #636 (by @ENikS ) 45ace9 Allow sorting by the Method name in DefaultOrderProvider and OrderProviderAtt... (by @ENikS ) 8811f2 Fix typo in docs/guide/Contributing/Disassembler.md (by @AndreyAkinshin ) 7da7b9 allow the users to customize Artifacts Path, #377 (by @adamsitnik ) 7554bf validate CustomDotNetCliPath, fixes #648 (by @adamsitnik ) 683964 Support ANY CoreFX and CoreCLR builds, fixes #651 (by @adamsitnik ) 695386 support also only custom CoreFX scenario (default runtime), part of #651 (by @adamsitnik ) eb4dcf allow the users to copy some files after the publish, part of #651 (by @adamsitnik ) b076a3 Add Newtonsoft.Json in the README (by @AndreyAkinshin ) b4eef5 better generics support, fixes #652 (by @adamsitnik ) 77fd46 Handle null values in Statistics.DivMean and Statistics.DivVariance, fixes #630 (by @AndreyAkinshin ) e547f8 Fix NRE in RankColumn, fixes #644 (by @AndreyAkinshin ) 28aa94 allow the users to choose .NET 4.7.1 (by @adamsitnik ) 503570 Fixed image link (by @svick ) 93cc85 Merge pull request #655 from svick/patch-1 (by @adamsitnik ) d33cde Fixed code block formatting (by @svick ) cb7c09 Merge pull request #657 from svick/patch-1 (by @adamsitnik ) 650b4a host Mono process should be able to build .NET Core child process, fixes #653 (by @adamsitnik ) d1dcab List formatting for FAQ (by @svick ) fe52e3 Merge pull request #663 from svick/faq-formatting (by @adamsitnik ) 7792cb Example in F#: with corrected code formatting (by @ScottHutchinson ) e6b225 Merge pull request #666 from ScottHutchinson/patch-2 (by @AndreyAkinshin ) f90207 Allow restore and build command override (#670) (by @Matthew-Bonner ) 4443cd Update example in README (by @AndreyAkinshin ) de0b68 Set library version: 0.10.13 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Eugene Sadovoi ( @ENikS ) Igor Fesenko ( @Ky7m ) Irina Ananyeva ( @morgan-kn ) Matthew Bonner ( @Matthew-Bonner ) Petr Onderka ( @svick ) Scott Hutchinson ( @ScottHutchinson ) Thank you very much! Additional details Date: March 02, 2018 Milestone: v0.10.13 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.13 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.13 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.13 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.13 BenchmarkDotNet v0.10.12 Overview post: BenchmarkDotNet v0.10.12 Highlights Improved DisassemblyDiagnoser: BenchmarkDotNet contains an embedded disassembler so that it can print assembly code for all benchmarks; it's not easy, but the disassembler evolves in every release. Improved MemoryDiagnoser: it has a better precision level, and it takes less time to evaluate memory allocations in a benchmark. New TailCallDiagnoser: now you get notifications when JIT applies the tail call optimizations to your methods. Better environment info: when your share performance results, it's very important to share information about your environment. The library generates the environment summary for you by default. Now it contains information about the amount of physical CPU, physical cores, and logic cores. If you run a benchmark on a virtual machine, you will get the name of the hypervisor (e.g., Hyper-V, VMware, or VirtualBox). Better summary table: one of the greatest features of BenchmarkDotNet is the summary table. It shows all important information about results in a compact and understandable form. Now it has better customization options: you can display relative performance of different environments (e.g., compare .NET Framework and .NET Core) and group benchmarks by categories. Milestone details In the v0.10.12 scope, 15 issues were resolved and 10 pull requests where merged. This release includes 42 commits by 9 contributors. Resolved issues (15) #273 Create a tail call diagnoser #442 Is it possible to configure benchmark to assign rank for runtime? (assignee: @AndreyAkinshin ) #543 Run Disassembly Diagnoser without extra run (assignee: @adamsitnik ) #546 Synthesizing labels for jump targets (assignee: @adamsitnik ) #574 Display VM hypervisor in summary section (assignee: @lukasz-pyrzyk ) #582 Print amount of logical and physical core (assignee: @morgan-kn ) #599 Proper HTML escaping of BenchmarkAttribute Description #606 Improve Memory Diagnoser (assignee: @adamsitnik ) #608 Properly escaping generated markdown (assignee: @AndreyAkinshin ) #612 Disassembler DisassembleMethod fails with \"Object reference not set to an instance of an object.\", (assignee: @adamsitnik ) #617 Allow baseline per category (assignee: @AndreyAkinshin ) #618 Enable ApprovalTests in .NET Core 2.0 tests (assignee: @AndreyAkinshin ) #621 Try to search for missing references if build fails (assignee: @adamsitnik ) #622 Support of new GC settings (assignee: @adamsitnik ) #623 RPlotExporter uses wrong path to csv measurements (assignee: @AndreyAkinshin ) Merged pull requests (10) #573 Сreate a tail call diagnoser (by @GeorgePlotnikov ) #576 Display VM name in summary section, fixes #574 (by @lukasz-pyrzyk ) #595 Migrate all project to new project system. (by @mfilippov ) #598 Added info about the new TailCallDiagnoser (by @GeorgePlotnikov ) #603 Fix HTML Encoding for Html Exporter (by @Chrisgozd ) #605 Grammar (by @onionhammer ) #607 Print amount of logical and physical core #582 (by @morgan-kn ) #615 Quick fix Disassembler.Program.GetMethod when more than one method found just return null (by @nietras ) #619 Logical group support, fixes #617 (by @AndreyAkinshin ) #620 New README.md (by @AndreyAkinshin ) Commits (42) 6f587d Migrate all project to new project system. (by @mfilippov ) 47ba57 added info about the new TailCallDiagnoser (by @GeorgePlotnikov ) c1a4b2 Сreate a tail call diagnoser (#573) (by @GeorgePlotnikov ) ebe3e2 Merge pull request #598 from GeorgePlotnikov/patch-1 (by @adamsitnik ) 6249f0 some polishing of the JIT diagnosers (by @adamsitnik ) 119231 Fix HTML Encoding for Html Exporter (#603), fixes #599 (by @Chrisgozd ) fe3f30 Disassembly Prettifier, fixes #546 (by @adamsitnik ) 3eb63f Merge pull request #595 from mfilippov/new-fs-vb-proj (by @adamsitnik ) 16d03f make our F# samples work for .NET Core 2.0 (by @adamsitnik ) d06de7 bring back our old Visual Basic and F# integration tests (by @adamsitnik ) 63249b \"Kaby Lake R\" and \"Coffee Lake\" support in ProcessorBrandStringHelper (by @AndreyAkinshin ) a8a09e disassembly prettifier: highlighting references to labels, jumping to next on... (by @adamsitnik ) e6d747 Grammar (by @onionhammer ) fef4aa Merge pull request #605 from onionhammer/patch-1 (by @adamsitnik ) ffacd7 don't require extra run for DisassemblyDiagnoser, fixes #543, #542 (by @adamsitnik ) bcac26 revert last commit change (run global setup regardless of Jitting) (by @adamsitnik ) 3e87d8 don't perform an extra run to get GC stats for .NET Core, part of #550 (by @adamsitnik ) f87dbc obtain GC stats in separate iteration run, no overhead, support for iteration... (by @adamsitnik ) e5fe0f update to C# 7.1 so we can use all the latest features (by @adamsitnik ) bc50b2 build benchmarks in Parallel, part of #550 (by @adamsitnik ) e59590 Display VM name in summary section, fixes #574 (#576) (by @lukasz-pyrzyk ) 8908f8 fix GetMethod (by @nietras ) 4ca82d Merge pull request #615 from nietras/disassembler-more-than-one-method-fix (by @adamsitnik ) 387ae5 be more defensive when trying to read source code with disassembler, part of ... (by @adamsitnik ) 703815 docs: how to contribute to disassembler (by @adamsitnik ) 242671 Enable ApprovalTests in .NET Core 2.0 tests, fixes #618 (by @AndreyAkinshin ) c4d21b Print amount of logical and physical core #582 (#607) (by @morgan-kn ) e33e84 Add HtmlReady dialect for MarkdownExporter, fixes #608 (by @AndreyAkinshin ) cf167b Enable html escaping for GitHub markdown dialect, fixes #608 (by @AndreyAkinshin ) 8bb28b Logical group support, fixes #617 (by @AndreyAkinshin ) ae87c6 Merge pull request #619 from dotnet/logical-groups (by @adamsitnik ) 14e90b parallel build post fix: don't write the compilation errors to NullLogger, re... (by @adamsitnik ) db4ae8 Try to search for missing references if build fails, fixes #621 (by @adamsitnik ) 0eba0f Support of new GC settings, fixes #622 (by @adamsitnik ) e31b2d Revert Samples/Program.cs (by @AndreyAkinshin ) 7f126b Add logs in RPlotExporter (by @AndreyAkinshin ) f8a447 Fix path to csv in RPlotExporter, fixes #623 (by @AndreyAkinshin ) 273f50 New plots in RPlotExporter (by @AndreyAkinshin ) f293f0 New README.md (#620) (by @AndreyAkinshin ) 5e3366 Update copyright year in docs (by @AndreyAkinshin ) ab7458 Update index in docs (by @AndreyAkinshin ) 4616d4 Set library version: 0.10.12 (by @AndreyAkinshin ) Contributors (9) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Christopher Gozdziewski ( @Chrisgozd ) Erik O'Leary ( @onionhammer ) George Plotnikov ( @GeorgePlotnikov ) Irina Ananyeva ( @morgan-kn ) Łukasz Pyrzyk ( @lukasz-pyrzyk ) Mikhail Filippov ( @mfilippov ) nietras ( @nietras ) Thank you very much! Additional details Date: January 15, 2018 Milestone: v0.10.12 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.12 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.12 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.12 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.12 BenchmarkDotNet v0.10.11 Highlights ByRef and Stack-only support ( #492 , sample ) .NET Core 2.1 support ( #587 ) Improved LINQPad support Smart logic for precision in ScaledColumn ( #509 , #590 ) Better macOS version detection ( 15d72388 ) Minor fixes and improvements Milestone details In the v0.10.11 scope, 6 issues were resolved and 8 pull requests where merged. This release includes 18 commits by 8 contributors. Resolved issues (6) #509 Better formatting for the Scaled column #579 Improve error message about non-optimized dependencies (assignee: @adamsitnik ) #580 How to get benchmarks running from LINQPad? (assignee: @adamsitnik ) #587 Support netcoreapp2.1 (assignee: @eerhardt ) #588 Broken appveyor build #593 BenchmarkDotNet is not working with LinqPad (assignee: @adamsitnik ) Merged pull requests (8) #492 ByRef and Stack-only support (by @adamsitnik ) #575 xUnit runner upgrade and small tests refactoring (by @Ky7m ) #584 Fixed typo. (by @cincuranet ) #589 Add support for netcoreapp2.1 (by @eerhardt ) #590 Add precision to Scaled Column (by @Chrisgozd ) #591 Fix CI build (by @Ky7m ) #592 Removed a xunit workaround because an issue has been fixed (by @AlekseiKudelia ) #597 Fix typo in WithCustomBuildConfiguration API (by @benjamin-hodgson ) Commits (18) 2a2e6c ByRef and Stack-only support (#492) (by @adamsitnik ) 676c77 xUnit runner upgrade and small tests refactoring (#575) (by @Ky7m ) 7a89cd Fixed typo. (by @cincuranet ) dd28b2 add better error text for non-optimized dlls + add it to FAQ, fixes #579 (by @adamsitnik ) 67e659 detect LINQPad problems and tell the user how to change them, fixes #580 (by @adamsitnik ) 543bd6 don't warn about non-optimized LINQPad dependency (it's OK), #580 (by @adamsitnik ) 8a94f2 Add support for netcoreapp2.1 (by @eerhardt ) fb39db Merge pull request #589 from eerhardt/SupportNetCoreApp21 (by @adamsitnik ) ef11f0 Add CoverageFilterXml in DotSettings (by @AndreyAkinshin ) 962b6a Update DotSetttings (by @AndreyAkinshin ) 717b62 BenchmarkDotNet.Horology cleanup (by @AndreyAkinshin ) d1720b Upgrade version to 2.0.3 and explicitly specify fx version for .netcoreapp2.0 (by @Ky7m ) 94d47a Removed a xunit workaround because an issue has been fixed (by @AlekseiKudelia ) 15d723 More details in GetOsVersion on macOS (by @AndreyAkinshin ) 696f89 Add precision to Scaled Column (#590) (by @Chrisgozd ) e54924 Fix typo in WithCustomBuildConfiguration API (by @benjamin-hodgson ) 8de978 Merge pull request #597 from benjamin-hodgson/patch-1 (by @adamsitnik ) af1510 Set library version: 0.10.11 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) AlekseiKudelia ( @AlekseiKudelia ) Andrey Akinshin ( @AndreyAkinshin ) Benjamin Hodgson ( @benjamin-hodgson ) Christopher Gozdziewski ( @Chrisgozd ) Eric Erhardt ( @eerhardt ) Igor Fesenko ( @Ky7m ) Jiri Cincura ↹ ( @cincuranet ) Thank you very much! Additional details Date: December 01, 2017 Milestone: v0.10.11 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.11 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.11 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.11 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.11 BenchmarkDotNet v0.10.10 Highlights: Disassembly Diagnoser (read more here: Disassembling .NET Code with BenchmarkDotNet ) ParamsSources .NET Core x86 support Environment variables and Mono args support Better environment description More: additional sections in the documentation, bug fixes, build script improvements, internal refactoring. Overview post: BenchmarkDotNet v0.10.10 Milestone details In the v0.10.10 scope, 34 issues were resolved and 18 pull requests where merged. This release includes 95 commits by 11 contributors. Resolved issues (34) #160 Make ClrMd Source diagnoser working with new ClrMD api (assignee: @adamsitnik ) #167 Detect virtual machine environment (assignee: @lukasz-pyrzyk ) #262 Runtime knobs (assignee: @adamsitnik ) #310 Support 32bit benchmarks for .NET Core (assignee: @adamsitnik ) #350 ParamsSource (assignee: @adamsitnik ) #437 Add DisassemblyDiagnoser for outputting disassembled JITed code. (assignee: @adamsitnik ) #466 MSBuild parameters are not passed to generated benchmark project (assignee: @adamsitnik ) #495 Attributes put on base methods are not considered in derived class (assignee: @lukasz-pyrzyk ) #500 Borken compilation for net46 projects when .NET Framework 4.7 is installed (assignee: @adamsitnik ) #505 JsonExporterBase doesn't include MemoryDiagnoser stats in output #511 [bug] Bug in GetTargetedMatchingMethod() logic #513 IterationSetup not run in Job.InProcess #516 Get a compilation error \"CS1009: Unrecognized escape sequence\" when using verbatim strings #519 BenchmarkSwitcher.RunAllJoined throws InvalidOperationException (assignee: @AndreyAkinshin ) #526 Remove project.json support (assignee: @adamsitnik ) #529 No namespace in export filenames can lead to data loss #530 Build error on Appveyor with recent changes. #533 When I clone, build, and run BenchmarkDotNet.Samples I get an error #534 Allow the users to compare 32 vs 64 RyuJit for .NET Core (assignee: @adamsitnik ) #535 No way to set RuntimeFrameworkVersion in multiple-version config (assignee: @adamsitnik ) #536 Strange disassembly ordering/truncation (assignee: @adamsitnik ) #537 Can't benchmark a netstandard2.0 project (assignee: @adamsitnik ) #538 Duplicate using causing benchmark not to work (assignee: @adamsitnik ) #539 Target .NET Core 2.0 to take advantage of the new APIs (assignee: @adamsitnik ) #540 Artifacts for disassembler projects (assignee: @adamsitnik ) #542 Problems with Disassembler + Job.Dry (assignee: @adamsitnik ) #555 Test \"CanDisassembleAllMethodCalls\" fails on Ubuntu (assignee: @adamsitnik ) #556 Table in report is broken in VSCode markdown viewer (assignee: @adamsitnik ) #558 Warn the users when running Benchmarks from xUnit with shadow copy enabled (assignee: @adamsitnik ) #559 DissassemblyDiagnoser jit/arch info seems to be wrong (assignee: @adamsitnik ) #561 Strange behaviour when benchmark project is build in debug mode (assignee: @adamsitnik ) #562 DisassemblyDiagnoser crashes on overloaded benchmark (assignee: @adamsitnik ) #564 [Bug] Benchmarking a method doesn't run global setup when filter is applied (assignee: @adamsitnik ) #571 Allow users to use non compile-time constants as Parameters (assignee: @adamsitnik ) Merged pull requests (18) #507 Fix a typo in Jobs.md (by @aidmsu ) #508 Fixed some typos and grammar (by @lukasz-pyrzyk ) #512 Warning about antivirus software after benchmark failure (by @lukasz-pyrzyk ) #514 #495 - Unit test for reading attributes from the base class (by @lukasz-pyrzyk ) #515 Fix #513 - IterationSetup not run in Job.InProcess (by @ig-sinicyn ) #518 Fixed information about MemoryDiagnoser. (by @cincuranet ) #520 XML Exporter documentation and samples (by @Teknikaali ) #525 adding validator for setup cleanup attributes (by @ipjohnson ) #527 Detecting virtual machine hypervisor, #167 (by @lukasz-pyrzyk ) #531 Remove --no-build argument for dotnet test & pack commands. (by @Ky7m ) #532 Fix type of local in EmitInvokeMultipleBody (by @pentp ) #547 Fix markdown headers (by @jawn ) #548 Fix condition in package reference list and update dotnet cli version from 1.0.4 to 2.0.0 for non-Windows system (by @Ky7m ) #549 Project files cleanup (by @Ky7m ) #552 Fix exporters to use fully qualified filenames (by @Teknikaali ) #563 Remove leading space character in a MD table row, #556 (by @rolshevsky ) #565 Single point of full config creation (by @ig-sinicyn ) #569 Update cakebuild scripts (by @Ky7m ) Commits (95) 682820 Fix typo in Jobs.md (by @aidmsu ) e82a8b Fixed some typos and grammar (by @lukasz-pyrzyk ) a0e9b9 Disassembly Diagnoser: displaying ASM, IL and C# for any JIT (by @adamsitnik ) 57e0f0 recursive disassembling (by @adamsitnik ) 1975ae return structured results from Disassembler (by @adamsitnik ) 9ae365 Warning about antivirus software after benchmark failure (#512) (by @lukasz-pyrzyk ) 74b41e Unit test for reading attributes from the base class, fixes #495 (by @lukasz-pyrzyk ) 3bab2d Fix #513 - IterationSetup not run in Job.InProcess (#515) (by @ig-sinicyn ) 769a39 use the IL instructions to detect more calls (by @adamsitnik ) b69537 use InstructionPointer to combine asm with hardware counters (by @adamsitnik ) 200244 Fixed information about MemoryDiagnoser. (by Jiri Cincura) 848a1a handling the lovely edge cases (Cecil vs ClrMD differences in naming types an... (by @adamsitnik ) 40049b single text representation of asm is a range of IPs! (by @adamsitnik ) 56e252 XML Exporter documentation and samples (#520) (by @Teknikaali ) c18597 eliminate duplicates (ClrMD fault), be more defensive for edge cases (by @adamsitnik ) a9262f allow the users to specify recursive depth limit (50MB output for simple lock... (by @adamsitnik ) fbe329 Support params which include slashes, fixes #516 (by @AndreyAkinshin ) f2b9c0 Fix RunAllJoined, fixes #519 (by @AndreyAkinshin ) 983764 UX ;) (by @adamsitnik ) c010de adding validator for setup cleanup attributes (by @ipjohnson ) 424723 Merge pull request #525 from ipjohnson/master (by @adamsitnik ) 7b680a prefer unit tests over integration tests if possible (by @adamsitnik ) 93dc6e Remove project.json support, fixes #526 (by @adamsitnik ) 19f22b Merge pull request #518 from cincuranet/docs (by @adamsitnik ) fe2db1 configurable, runtime specific diagnosers, hard part transparent to end users (by @adamsitnik ) fb60e5 disassembly diagnoser for Mono (by @adamsitnik ) 55ce0d smart diagnoser can choose the right disassembler (by @adamsitnik ) 46c911 one test to verify all scenarios (by @adamsitnik ) d06086 minor improvements (by @adamsitnik ) 116119 group instructions into maps for better visualization (by @adamsitnik ) d19b1e test fix: split on any new line ;) (by @adamsitnik ) 647a67 Merge branch 'asm' (by @adamsitnik ) 91c8e4 move disassembler stuff to resources of Core project to make it super easy to... (by @adamsitnik ) 363900 Remove --no-build argument for dotnet test & pack commands. (by @Ky7m ) 22e993 Disable parallel build option (by @Ky7m ) 9c327c Merge pull request #531 from Ky7m/removes-no-build-argument (by @adamsitnik ) 20db28 the docs for Disassembly Diagnoser, #437 (by @adamsitnik ) 13732b added asm report with navigation (by @adamsitnik ) 33ee03 fix type of local in EmitInvokeMultipleBody (by @pentp ) 7d943f Merge pull request #532 from pentp/master (by @adamsitnik ) 4d173d RyuJit 32bit support for .NET Core, fixes #310, fixes #533 (by @adamsitnik ) 5f5237 test fix (set platform in explicit way to avoid lack of 32-bit .NET Core sdk ... (by @adamsitnik ) f359c9 allow the users to set custom RuntimeFrameworkVersion, fixes #535 (by @adamsitnik ) 264150 disassembler: print the results in machine code order, not il, part of #536 (by @adamsitnik ) 0088bd Detecting virtual machine hypervisor, #167 (#527) (by @lukasz-pyrzyk ) 007444 print all returns (maps with negative ILOffset are not always prolog or epilo... (by @adamsitnik ) aebc32 empty methods for LegacyJit64 have only maps with negative ILOffset, #536 (by @adamsitnik ) ba7489 docs for Toolchains, closes #537 (by @adamsitnik ) 8c4f53 allow the users to specify custom build configuration, #466, close #528 (by @adamsitnik ) eb80b2 Environment Variables support, #262 (by @adamsitnik ) ab7045 test fixes ;) (by @adamsitnik ) 455c60 allow the users to specify custom arguments (Mono, MsBuild), #466, #262 (by @adamsitnik ) e03384 make sure that all new custom settings are presented in human friendly way, #262 (by @adamsitnik ) cc8d07 enforce TreatWarningsAsErrors=False in auto-generated csproj to override glob... (by @adamsitnik ) 97ab49 target .NET Core 2.0 to take full advantage of the new API, fixes #539 (by @adamsitnik ) 8b2c7e check if reference assemblies are installed when choosing the default .NET fr... (by @adamsitnik ) feabd1 bump the .NET Core version, #539 (by @adamsitnik ) a21f86 for .NET Core 1.1 we should run only the Backward Compatibility tests. #539 (by @adamsitnik ) b7a966 typo fix (by @adamsitnik ) 73a30a docs: Customizing Mono, Env Variables & minor updates, fixes #262 (by @adamsitnik ) 612b41 exclude Artifacts for disassembler projects, fixes #540 (by @adamsitnik ) 360326 typo, #540 (by @adamsitnik ) f3e4ae show nice error when Job.Dry is used for Disassembler, fixes #542 (by @adamsitnik ) c6bbda allow to specify custom dotnet cli path to compare RyuJit 32 vs 64 for .NET C... (by @adamsitnik ) a0c7e5 Add info about Redstone 3,4 in WindowsBrandVersions (by @AndreyAkinshin ) d42262 Additional info about WindowsBrandVersions (by @AndreyAkinshin ) cd0a1f Improve formatting in WindowsBrandVersions (by @AndreyAkinshin ) 1cd844 Fix OsBrandStringTests.WindowsIsPrettified (by @AndreyAkinshin ) f00787 Fix markdown headers (by @jawn ) 363814 Merge pull request #547 from jawn/patch-1 (by @adamsitnik ) 405c4c Update dotnet cli version from 1.0.4 to 2.0.0 for non-Windows system. (#548) (by @Ky7m ) 97a9b2 Fix compiler warning connected to problem with the XML tag. (by @Ky7m ) 24585d Remove PackageTargetFallback element. (by @Ky7m ) 174c19 Merge pull request #549 from Ky7m/csproj-files-cleanup (by @AndreyAkinshin ) 84a4e2 Fix exporters to use fully qualified filenames (#552), fixes #529 (by @Teknikaali ) a7578a disable Disassembler tests for non-Windows OS, fixes #555 (by @adamsitnik ) a147dd Remove leading space character in a MD table row, fixes #556 (by @rolshevsky ) 9c194c DisassemblyDiagnoser crashes on overloaded benchmark, fixes #562 (by @adamsitnik ) 9076a6 give users nice warning when they run into shadow copy issues, fixes #558 (by @adamsitnik ) 1670ca the build fix ;) (by @adamsitnik ) d5854d Include UBR in Windows versions (by @AndreyAkinshin ) 1fcfee display correct runtime info in exported disassembly result, fixes #559 (by @adamsitnik ) de45ad Single point of full config creation (#565) (by @ig-sinicyn ) 395a52 make sure filters don't exclude Setup/Cleanup methods, fixes #564 (by @adamsitnik ) 4276ac fail when running benchmarks in Debug with DefaultConfig, fixes #561 (by @adamsitnik ) 0145f8 Fix build number for Windows 10 Fall Creators Update (by @AndreyAkinshin ) 7f7a7c Update cakebuild scripts (#569) (by @Ky7m ) cff577 introduce ParamsSource attribute, fixes #350, part of #256 (by @adamsitnik ) 3af915 introduce IParam to support complex, not-compile time constants as parameters... (by @adamsitnik ) 4a877f build the disassemblers before .Core, but don't add the dependency to them to... (by @adamsitnik ) 188850 specify all the embedded resources in explicit way to avoid some crazy MSBuil... (by @adamsitnik ) b5fbbf Typo fix (by @AndreyAkinshin ) eb90ce Update message in JitOptimizationsValidator (by @AndreyAkinshin ) 6c1137 Updated DotSettings (by @AndreyAkinshin ) 3d0dfe Set library version: 0.10.10 (by @AndreyAkinshin ) Contributors (11) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Andrey Dorokhov ( @aidmsu ) Anssi Kettunen ( @Teknikaali ) Bernard Vander Beken ( @jawn ) Ian Johnson ( @ipjohnson ) ig-sinicyn ( @ig-sinicyn ) Igor Fesenko ( @Ky7m ) Łukasz Pyrzyk ( @lukasz-pyrzyk ) Pent Ploompuu ( @pentp ) Rostislav Olshevsky ( @rolshevsky ) Thank you very much! Additional details Date: November 03, 2017 Milestone: v0.10.10 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.10 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.10 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.10 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.10 BenchmarkDotNet v0.10.9 Migrate from custom build scripts to Cake (C# Make) ( #426 , #475 , thanks @Ky7m ) Target Setup methods for specific Benchmarks ( #469 , #501 , thanks @ipjohnson ) Many improvements in XmlExporter ( #476 , #488 , thanks @Teknikaali ) Add MemoryDiagnoser results to JsonExporter output ( #453 , #478 , thanks @Teknikaali ) Detect correct version of .NET Core (+ improved presentation for information about runtime) ( #448 , ed586585...ed586585 ) Fix UnauthorizedAccessException ( #380 , #390 , #490 , #491 , 8505abb5 ) Fix app.config generation ( #499 , dc6dc411 ) Fix incorrect order of IterationCleanup and Benchmark jitting ( #481 , #503 ) Fix test scripts for MacOS+zsh ( 1177c8 ) Unix-related ProcessorAffinity fixes ( #474 , 26d44411 ) Minor fixes in docs ( #465 , #467 , #473 , #480 , #483 , thanks @mtschneiders , @davkean , @aarondandy , @AmadeusW ) Temporary hacks for appveyor connectivity incident ( #497 , #506 ) Additional warnings for incorrect Configs ( #482 , eb84825f ) Additional warnings for F# methods with spaces ( #479 , 3c2c8dec , 7ba1c809 , 3ca39afe ) Milestone details In the v0.10.9 scope, 13 issues were resolved and 14 pull requests where merged. This release includes 37 commits by 10 contributors. Resolved issues (13) #380 Problem running benchmark due to \"could not copy\" during build (assignee: @adamsitnik ) #390 Crashing benchmark (assignee: @adamsitnik ) #426 Migrate from custom build scripts to Cake (C# Make) #448 Detect correct version of .NET Core (assignee: @AndreyAkinshin ) #453 MemoryDiagnoser and JsonExporter #469 [Suggestion] Specify Setup per benchmark (assignee: @AndreyAkinshin ) #474 PlatformNotSupportedException when reading ProcessorAffinity on non-Windows platforms (assignee: @AndreyAkinshin ) #479 Invalid C# code generated for valid F# identifiers (assignee: @adamsitnik ) #481 Iteration cleanup runs before the benchmark (assignee: @AndreyAkinshin ) #482 Benchmark seems to hang when no logger is defined (assignee: @adamsitnik ) #490 BDN.Generated.exe is locking files when killed with ctrl+c (assignee: @adamsitnik ) #491 UnauthorizedAccessException preventing report to be written (assignee: @adamsitnik ) #499 Opting into app-compat switches in a benchmark doesn't work (assignee: @adamsitnik ) Merged pull requests (14) #465 Small correction in Filters.md (by @mtschneiders ) #467 Small improvements to FAQ.md (by @mtschneiders ) #471 Corrected typos in Filters.md and IntroFilters.cs (by @mtschneiders ) #473 Adds ISummaryStyle information to the Exporters guide (by @AmadeusW ) #475 Cake (C# Make) integration. Migration from custom build scripts. (by @Ky7m ) #476 Improve Xml exporter's discoverability (by @Teknikaali ) #478 Add MemoryDiagnoser results to JsonExporter output (by @Teknikaali ) #480 Fix links to Overview/FAQ (by @davkean ) #483 Update jobs docs (by @aarondandy ) #488 Improve XmlExporter (by @Teknikaali ) #497 Add temporary solution to address connectivity issues to nuget.org (by @Ky7m ) #501 Target Setup methods for specific Benchmarks (by @ipjohnson ) #503 Make sure IterationCleanup is run after Jitting (by @smitpatel ) #506 Removes a temporary solution related to connectivity issues to nuget (by @Ky7m ) Commits (37) 0b5657 Small correction in comments (by @mtschneiders ) b1ad2c Merge pull request #465 from mtschneiders/patch-1 (by @adamsitnik ) 3bb154 Small corrections to FAQ.md (by @mtschneiders ) 1a8559 Merge pull request #467 from mtschneiders/patch-2 (by @adamsitnik ) fc4dfe Corrected typos in Filters.md and IntroFilters.cs (by @mtschneiders ) cb5072 Remove UpgradeLog.htm (by @AndreyAkinshin ) 7013bd Adds ISummaryStyle information to the Exporters guide (by @AmadeusW ) 345af7 wording (by @AmadeusW ) a114ea Merge pull request #473 from AmadeusW/docs/exporters (by @adamsitnik ) 26d444 Unix-related ProcessorAffinity fixes (fix #474) (by @AndreyAkinshin ) 2d8a53 Improve Xml exporter's discoverability (#476) (by @Teknikaali ) baebf9 Add MemoryDiagnoser results to JsonExporter output (#478) (by @Teknikaali ) 32993c Fix links to Overview/FAQ (by @davkean ) 8e712c Merge pull request #480 from davkean/FixLinks (by @adamsitnik ) 43405d Update jobs docs (by @aarondandy ) 1bacac Merge pull request #483 from aarondandy/docs-changes (by @adamsitnik ) 3c2c8d print nice error for F# methods that contain whitespaces, fixes #479 (by @adamsitnik ) 7ba1c8 post code review #479 (by @adamsitnik ) 3ca39a even more post code review #479 (by @adamsitnik ) eb8482 warn the users if no logger, columns or exporters were defined, fixes #482 (by @adamsitnik ) 8505ab unique file names by default, are removed after printing the results, fix #49... (by @adamsitnik ) 3e74aa Improve XmlExporter (#488) (by @Teknikaali ) 6e2577 Cake (C# Make) integration. Migration from custom build scripts. (#475) (by @Ky7m ) 6e6fcc Add temporary solution to address connectivity issues to nuget.org https://ap.. . (by @Ky7m ) dc6dc4 all runtime settings, that do not belong to Job must be rewritten by default ... (by @adamsitnik ) ed5865 Rename \"dotnet cli version\" to \".NET Core SDK\", see #448 (by @AndreyAkinshin ) 857f2b Detecting the correct version of .NET Core, fixing #448 (by @AndreyAkinshin ) 7ec001 Don't print information about unknown timers in HostEnvironmentInfo (by @AndreyAkinshin ) 4c3c82 Add missing space in HostRuntimeInfo (by @AndreyAkinshin ) da8226 Print actual information about .NET Framework version in summary, see #448 (by @AndreyAkinshin ) cea199 Fix MultipleRuntimesTest.SingleBenchmarkCanBeExecutedForMultpleRuntimes (by @AndreyAkinshin ) db56bc Make sure IterationCleanup is run after Jitting (by @smitpatel ) 3df90f Merge pull request #503 from smitpatel/orderingissue (by @adamsitnik ) 1177c8 Improve tests/runCoreTests.sh (by @AndreyAkinshin ) 976900 Removes a temporary solution related to connectivity issues to nuget.org http... (by @Ky7m ) 557246 Target Setup methods for specific Benchmarks (#501) (by @ipjohnson ) 80d70a Set library version: 0.10.9 (by @AndreyAkinshin ) Contributors (10) Aaron Dandy ( @aarondandy ) Adam Sitnik ( @adamsitnik ) Amadeusz Wieczorek ( @AmadeusW ) Andrey Akinshin ( @AndreyAkinshin ) Anssi Kettunen ( @Teknikaali ) David Kean ( @davkean ) Ian Johnson ( @ipjohnson ) Igor Fesenko ( @Ky7m ) Mateus Artur Schneiders ( @mtschneiders ) Smit Patel ( @smitpatel ) Thank you very much! Additional details Date: July 28, 2017 Milestone: v0.10.9 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.9 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.9 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.9 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.9 BenchmarkDotNet v0.10.8 Legend for time units ( #349 , #459 , f14e508e ) XML exporter ( #157 , #452 , a0148db8 ) .NET Framework 4.7 support ( #461 , 3f2b5c3c , 5513873a ) Public API for AllocationQuantum ( #450 , #462 , a0148db8 ) Milestone details In the v0.10.8 scope, 5 issues were resolved and 3 pull requests where merged. This release includes 8 commits by 4 contributors. Resolved issues (5) #157 Implement export to xml #349 What the report title and value means? (assignee: @AndreyAkinshin ) #450 [Minor feature request] Please make GcStats.AllocationQuantum public #459 [Question] What does the unit of measurement us stand for #461 .NET Framework 4.7 support (assignee: @adamsitnik ) Merged pull requests (3) #452 Feature: XML Exporter (by @Teknikaali ) #455 Wrong xml doc comment (by @ig-sinicyn ) #462 make allocation quantum public, deal with a spelling error and expose… (by @RichLinnell ) Commits (8) f14e50 Add legend for time units (by @AndreyAkinshin ) e59550 Add info about OrderProviders in docs (by @AndreyAkinshin ) 6fc245 Fix ConfigPassingTest (by @AndreyAkinshin ) ef0583 Feature: XML Exporter (#452) (by @Teknikaali ) 3f2b5c .NET 4.7 support from .NET Core host process on Windows, fixes #461 (by @adamsitnik ) a0148d make allocation quantum public, deal with a spelling error and expose allocat... (by @RichLinnell ) 551387 add Windows check to our CsProjClassicNetToolchain (by @adamsitnik ) 971565 Set library version: 0.10.8 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Anssi Kettunen ( @Teknikaali ) Rich Linnell ( @RichLinnell ) Thank you very much! Additional details Date: June 09, 2017 Milestone: v0.10.8 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.8 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.8 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.8 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.8 BenchmarkDotNet v0.10.7 LINQPad support (5.22.05+) ( #66 , #445 ) Benchmark filters and categories ( #248 ) Updated setup/cleanup attributes: [GlobalSetup] , [GlobalCleanup] , [IterationSetup] , [IterationCleanup] ( #270 , #274 , #325 , #456 ) Better Value Types support ( afa803d0 ) Building Sources on Linux: it's possible to build the solution (with unloaded F#/VB projects), run samples (for both net46/netcoreapp1.1), run unit tests (for netcoreapp1.1 only) Fix minor bugs in JsonExporter ( #451 ) Milestone details In the v0.10.7 scope, 6 issues were resolved and 1 pull requests where merged. This release includes 24 commits by 4 contributors. Resolved issues (6) #66 Friendliness to LinqPad (assignee: @adamsitnik ) #248 Support a \"category\" attribute for selecting benchmarks (assignee: @AndreyAkinshin ) #270 Add support for Cleanup and Setup between benchmarks (assignee: @AndreyAkinshin ) #274 Support for run-once Setup and Clean-up with Parameters available (assignee: @AndreyAkinshin ) #325 Setup & Cleanup versions of attribute which would run before/after each benchmark iteration (assignee: @AndreyAkinshin ) #445 Missing reference to Microsoft.CodeAnalysis.CSharp when using BenchmarkDotNet in Linqpad (assignee: @adamsitnik ) Merged pull requests (1) #451 Fix minor bugs in JsonExporter (by @Teknikaali ) Commits (24) a54645 handle the LINQPad shadow copying, #445, #66 (by @adamsitnik ) fe3032 Add Filters (by @AndreyAkinshin ) 2e7427 Add categories (by @AndreyAkinshin ) f96346 Add categories filters (by @AndreyAkinshin ) 34f808 Support category filters in BenchmarkSwitcher (by @AndreyAkinshin ) 786afe Implement join mode in BenchmarkSwitcher (by @AndreyAkinshin ) a77a77 Post code review changes (by @AndreyAkinshin ) cc7006 Fix minor bugs in JsonExporter (#451) (by @Teknikaali ) 4dd789 Rename Setup/Cleanup to GlobalSetup/GlobalCleanup (by @AndreyAkinshin ) 21369c Introduce IterationSetup/IterationCleanup (by @AndreyAkinshin ) 0e9be7 Add IterationSetupCleanupAnalyser (by @AndreyAkinshin ) 4f3703 docs: update structure (by @AndreyAkinshin ) 5fe564 docs: add info about RunStrategy.Monitoring and new Setup/Cleanup attributes (by @AndreyAkinshin ) 87ce0f Mark ProcessPropertiesTests as WindowsOnly (by @AndreyAkinshin ) 7e479e Fix typo in File_StreamVsMemoryMapperVewStream.cs (by @AndreyAkinshin ) 975514 Wrong xml doc comment (by @ig-sinicyn ) 165b13 Merge pull request #455 from ig-sinicyn/patch-1 (by @adamsitnik ) afa803 better Value Types support (by @adamsitnik ) d16ddb workaround for weird AppVeyor behavior (by @adamsitnik ) 9f3d68 support recursive nesting for returned types (by @adamsitnik ) b7668e Add tests/runCoreTests.sh (by @AndreyAkinshin ) 3cceb6 runCoreTests.sh: fix output file for integration-tests (by @AndreyAkinshin ) a21421 Make some tests Windows-only (by @AndreyAkinshin ) 00a156 Set library version: 0.10.7 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Anssi Kettunen ( @Teknikaali ) ig-sinicyn ( @ig-sinicyn ) Thank you very much! Additional details Date: June 05, 2017 Milestone: v0.10.7 Overview post: http://aakinshin.net/blog/post/bdn-v0_10_7/ NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.7 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.7 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.7 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.7 BenchmarkDotNet v0.10.6 Removed buggy allocation from Engine which was spoiling the results of MemoryDiagnoser for micro benchmarks. This part of the code is now guarded with very strict integration tests, it should never happen again. We now also exclude the side effects of the Allocation Quantum. This bug was serious, you must update to 0.10.6 ( #439 ) Support of the PackageTargetFallback setting which allows to reference components that target old framework monikers (like dotnet5.4 or portable-net45+win8 ) ( #438 ) Added InstructionRetiredPerCycleColumn which shows up automatically when HardwareCounter.InstructionRetired and HardwareCounter.TotalCycles are used. Support benchmark classes without namespace ( #446 ) Fix problem with RPlotExporter and quoted directories in %PATH% ( #446 ) Show Windows brand version in summary Milestone details In the v0.10.6 scope, 3 issues were resolved and 1 pull requests where merged. This release includes 11 commits by 3 contributors. Resolved issues (3) #438 Need to Update Autogenerated csproj file (assignee: @adamsitnik ) #439 Question - This benchmark apparently allocates, but why? (assignee: @adamsitnik ) #446 ArgumentNullException if RPlotExporter is used (assignee: @AndreyAkinshin ) Merged pull requests (1) #444 Added line separator at the end in JsonExporters (by @alinasmirnova ) Commits (11) 3c1f09 copy the PackageTargetFallback setting if present in csproj to support older ... (by @adamsitnik ) ffab7d remove allocation from Engine, make sure tests detect breaking change in the ... (by @adamsitnik ) 7c9a0f consider Allocation Quantum side effects to have correct results for micro be... (by @adamsitnik ) 4af5f3 Added line separator in JsonExporters (by @alinasmirnova ) 8ac913 added Instruction Retired per Cycle (IPC) to the predefined columns for Pmc D... (by @adamsitnik ) 0898c3 post code review changes (by @adamsitnik ) b4d68e 'kB' -> 'KB' (by @AndreyAkinshin ) 23bd4f Handle null values in CsvHelper.Escape (by @AndreyAkinshin ) 77ed63 RPlotExporter.FindInPath: handle exceptions, trim quotes #446 (by @AndreyAkinshin ) 626e3a Show Windows brand versions in summary (by @AndreyAkinshin ) 247634 Set library version: 0.10.6 (by @AndreyAkinshin ) Contributors (3) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Date: May 12, 2017 Milestone: v0.10.6 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.6 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.6 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.6 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.6 BenchmarkDotNet v0.10.5 Fixed SizeUnit presentation in the summary table ( #434 ) In MemoryDiagnoser, now 1kB = 1024B (instead of 1000 in v0.10.4) ( #434 ) Fix false allocations detection ( #436 9b44de70 ) Hide ScaledSD column for small values ( da857ad7 ) Autoselecting amount of digits after the decimal point ( #404 ) Milestone details In the v0.10.5 scope, 3 issues were resolved and 2 pull requests where merged. This release includes 16 commits by 4 contributors. Resolved issues (3) #404 Autoselecting amount of digits after the decimal point (assignee: @AndreyAkinshin ) #428 Cleanup NuGet.Config (assignee: @adamsitnik ) #434 Allocation output suddenly is 0 GB (assignee: @AndreyAkinshin ) Merged pull requests (2) #435 Joined approved files according to cultures (by @alinasmirnova ) #436 Fix false allocations detection (by @ig-sinicyn ) Commits (16) d9eefd NuGet feeds cleanup, fixes #428 (by @adamsitnik ) 2a95b0 Fix SizeUnit presentation, fixes #434 (by @AndreyAkinshin ) 8eca28 Add a note about kilobytes in docs (by @AndreyAkinshin ) ae483e Separate approved files only for cultures, not for exporters (by @alinasmirnova ) 78a6a0 Improved legend for MemoryDiagnoser (by @AndreyAkinshin ) 47ae20 SizeUnitTests (by @AndreyAkinshin ) 9b44de fix false allocations detection (by @ig-sinicyn ) ffd535 Merge pull request #436 from ig-sinicyn/fix_allocations_on_run (by @adamsitnik ) 87c2bd Inclusive ConfidenceInterval.Contains (by @AndreyAkinshin ) da857a Don't show the ScaledSD column if values are small (by @AndreyAkinshin ) e0cf24 Add DefaultColumnProvidersTests (by @AndreyAkinshin ) f2baa3 Fix typo in DefaultColumnProvidersTests (by @AndreyAkinshin ) 117560 Fix BaselineScaledColumnTest.ColumnsWithBaselineGetsScaled (by @AndreyAkinshin ) 3a1fb7 Implement BestAmountOfDecimalDigits for statistics columns in SummaryTable, f... (by @AndreyAkinshin ) 4201ee Fix ToolchainTest.CustomToolchainsAreSupported (by @AndreyAkinshin ) cba245 Set library version: 0.10.5 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) ig-sinicyn ( @ig-sinicyn ) Thank you very much! Additional details Date: April 26, 2017 Milestone: v0.10.5 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.5 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.5 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.5 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.5 BenchmarkDotNet v0.10.4 New logo Update to Roslyn 2.0, drop .NET 4.5 support ( #303 ) Initial support of HardwareCounters (Windows only) Initial experimental support of in-process benchmarks Optional configs for BenchmarkSwitcher ( #391 , #392 ) Host API interface ( #356 ) Improved measurements for async benchmarks ( #415 ) Improved precision level (MinIterationTimes is 500ms instead of 200ms; introduced AccuracyMode.MaxAbsoluteError and AccuracyMode.MaxRelativeError instead of AccuracyMode.MaxStdErrRelative ; logic which select amount of iterations uses confidence intervals instead of standard errors; the Error column (half of CI99.9%) is shown by default instead of StdErr) Introduced ISummaryStyle , raw data in CSV reports ( #118 , #146 , #396 ) Handle cases when report files are existed and locked ( #414 , #416 ) MarkdownExporter right-justifies numeric columns ( #421 ) Better colors for console output ( #376 ) Column legends Add information about CPU microarchitecture for well-known processors to summary Fix AssemblyInformationalVersionAttribute ( #382 ) Fix incorrect method filtering in BenchmarkSwitcher ( #365 ) Fix OS Version in Summary for Windows 10 ( #351 ) Fix OS Version on Mono Fix --class and --method filtering ( #249 ) Fix --exporters option ( #189 ) Fix escaping logic in CsvExporter ( #294 , #409 ) Fix MacOS detection Minor bugfixes and API improvements Milestone details In the v0.10.4 scope, 23 issues were resolved and 14 pull requests where merged. This release includes 103 commits by 8 contributors. Resolved issues (23) #118 Raw data in CSV reports (assignee: @AmadeusW ) #146 Ability to specify units / easier comparison (assignee: @AmadeusW ) #159 Warn user if no Columns were defined (assignee: @adamsitnik ) #189 --exporters option appears not to be working (assignee: @adamsitnik ) #249 --class and --method should combine as \"AND\" filtering (assignee: @adamsitnik ) #294 [Suggestion] CSVHelper.Escape() method should check for actual separator value (assignee: @alinasmirnova ) #303 Update to Roslyn 2.0 when RTM is shipped to nuget.org (assignee: @adamsitnik ) #351 Fix OS Version in Summary for Windows 10 (assignee: @adamsitnik ) #352 Troubles with CoreJob on Linux (assignee: @adamsitnik ) #365 [Minor bug] Benchmark switcher: incorrect method filtering (assignee: @adamsitnik ) #376 Pick better background colors for output (assignee: @AndreyAkinshin ) #382 AssemblyInformationalVersion doesn't work (assignee: @AndreyAkinshin ) #388 Precise Machine Counter Diagnoser (assignee: @adamsitnik ) #391 BenchmarkSwitcher should take an optinal IConfig #393 Troubles with ClrJob in .NET Core applications (assignee: @adamsitnik ) #395 Could not load file or assembly 'System.Reflection.Metadata' (assignee: @adamsitnik ) #401 Exceptions in Roslyn.Builder (assignee: @adamsitnik ) #406 BenchmarkDotNet with netcoreapp2.0 requires using RuntimeFrameworkVersion directly in the project file (assignee: @adamsitnik ) #410 Troubles with Classic applications on nightly BenchmarkDotNet (assignee: @adamsitnik ) #412 HardwareCounter.InstructionRetired failing with ArgumentNullException. Build 82 (assignee: @adamsitnik ) #415 Allocations for async methods measures BenchmarkDotNet (assignee: @adamsitnik ) #419 Suspicious warnings about MemoryMappedFiles (assignee: @adamsitnik ) #424 Make InliningDiagnoser filtering more flexible (assignee: @adamsitnik ) Merged pull requests (14) #356 Feature: host API interface (by @ig-sinicyn ) #379 Feature: in-process benchmarks (by @ig-sinicyn ) #392 Add an optional config to BenchmarkSwitcher. (by @ILMTitan ) #396 Allow users to pick, show and hide measurement units in the reports and exports. (by @AmadeusW ) #400 fix spelling error: misspredict => mispredict (by @stevedesmond-ca ) #405 Make RoslynToolchain types public (by @cdmihai ) #407 Propagate benchmark to hooks (by @cdmihai ) #408 Small fixes before approval tests (by @alinasmirnova ) #409 CSVHelper.Escape() method should check for actual separator value (by @alinasmirnova ) #416 Exports file to temporary location if target is locked (by @AmadeusW ) #421 MarkdownExporter right-justifies numeric columns (by @stevedesmond-ca ) #423 Updated Microsoft.Net.Test.Sdk (by @alinasmirnova ) #430 Fix unix OS detection. (by @mfilippov ) #432 Fix macOS detection (by @mfilippov ) Commits (103) bd790c Simplify BenchmarkDotNet.IntegrationTests.Classic.ReferencesTests (by @AndreyAkinshin ) bf9f4e Feature: host API interface (by @ig-sinicyn ) f85ffe Merge pull request #356 from ig-sinicyn/feature-host-api (by @AndreyAkinshin ) 8ffff0 Feature: in-process benchmarks (by @ig-sinicyn ) 51fc0c Feature: in-process benchmarks, FixAffinity() helper (by @ig-sinicyn ) c5179f Feature: in-process benchmarks, review fixes (by @ig-sinicyn ) 6c5990 Feature: in-process benchmarks, review fixes, part 2 (by @ig-sinicyn ) c6b046 Feature: in-process benchmarks, STA & priority on full .Net FW (by @ig-sinicyn ) cc2c89 Feature: in-process benchmarks, env validation in toolchain, intro example ad... (by @ig-sinicyn ) 101a80 Improved versioning system (by @AndreyAkinshin ) 846532 Update links to appveyor (by @AndreyAkinshin ) 5464e4 Improved versioning system, part 2 (by @AndreyAkinshin ) e39a50 Merge pull request #379 from ig-sinicyn/feature-inprocess (by @adamsitnik ) ae4cc8 AssemblyInformationalVersion fix in common.props, resolves #382 (by @AndreyAkinshin ) d036f9 Precise Machine Counter Diagnoser #388 (by @adamsitnik ) 390442 Improved invocationCount behavior in SimpleJobAttribute (by @AndreyAkinshin ) 7b61ed add possibility to set Hardware Counters per class in runtime-independent way... (by @adamsitnik ) 6e208c Add an optional config to BenchmarkSwitcher. (by ILMTitan) 935d23 Merge pull request #392 from ILMTitan/master (by @adamsitnik ) 6b9a88 update to Roslyn 2.0, drop .NET 4.5 support, fixes #303 (by @adamsitnik ) ea4c55 BenchmarkDotNet.IntegrationTests.csproj: fix formatting (by @AndreyAkinshin ) 20a537 Update year in LICENSE.md (by @AndreyAkinshin ) 878796 Update logo (by @AndreyAkinshin ) faba77 Update README.md (by @AndreyAkinshin ) 6dce74 Update logo in README.md (by @AndreyAkinshin ) 7a750f Another fix in README.md (by @AndreyAkinshin ) 1caa0d fix spelling error: misspredict => mispredict (by @stevedesmond-ca ) 742912 use Array.Empty and Task.Completed (after upgrading to .NET 4.6) (by @adamsitnik ) 0dafac there is no need to set up with latest VS, fixes #393 (by @adamsitnik ) f5d88e Catch exceptions in BenchmarkDotNet.Running.BenchmarkRunnerCore.Run (by @AndreyAkinshin ) fa176f Merge pull request #400 from stevedesmond-ca/missspelling (by @AndreyAkinshin ) 90c3b1 Docs improvements (by @AndreyAkinshin ) 84c524 Mark SimpleJobAttribute with AllowMultiple (by @AndreyAkinshin ) 531804 Update README.md (by @AndreyAkinshin ) 7f2221 Make RoslynToolchain types public (#405) (by @cdmihai ) be8c33 Improved confidence intervals (by @AndreyAkinshin ) 767811 Propagate benchmark to hooks (#407) (by @cdmihai ) ec5e54 All exporters should not use static environment info (by @alinasmirnova ) 2b8a9e Culculate csv separator when it is needed, not in constructor (by @alinasmirnova ) 95aeb5 clean up (by @alinasmirnova ) 2e74c2 Name field for all exporters (by @alinasmirnova ) badb0b Merge pull request #408 from alinasmirnova/small-fixes (by @AndreyAkinshin ) 9da9ca search for .NET Core 2.0 settings in imported props files, fixes #406 (by @adamsitnik ) 2b08c5 filter sealed, generic and abstract classes from BenchmarkSwitcher, fixes #365 (by @adamsitnik ) 14ad55 print correct OS version in summary, fixes #351 (by @adamsitnik ) b86f48 BenchmarkDotNet does not support running .NET Core benchmarks when host proce... (by @adamsitnik ) 11b51b refactoring in TypeParser (by @adamsitnik ) 8047a7 use AND when filtering with args from command line, fixes #249 (by @adamsitnik ) 3cf8d8 handle cmd line arguments without '=', fixes #189 (by @adamsitnik ) cdc71f test fix after recent changes, #249 (by @adamsitnik ) 97c211 detect situation when users want to use Hardware Counters with InProcessToolc... (by @adamsitnik ) ba972b Warn user if no Columns were defined, fixes #159 (by @adamsitnik ) 2520f2 migrate old csprojs to the new format to get the tests running in common way,... (by @adamsitnik ) dd1b4d Improvements in StatisticsTests (by @AndreyAkinshin ) 07d149 emptyEnumerable.All(whatever) returns true (by @adamsitnik ) 0d61a7 improve dynamic diagnoser loading (case when diagnosers NuGet pacakge is inst... (by @adamsitnik ) 5a6937 Ignore BenchmarkProject.json in BenchmarkDotNet.sln.DotSettings (by @AndreyAkinshin ) 5895c4 Improvements in TypeParserTests (by @AndreyAkinshin ) 1124ae BenchmarkDotNet.Tests: cleanup (by @AndreyAkinshin ) d37ef4 CSVHelper.Escape() method should check for actual separator value (by @alinasmirnova ) 43643c move hardwareCounters from Job to Config, fixes #412 (by @adamsitnik ) 303fff pass config from runner => executor => diagnoser #412 (by @adamsitnik ) 5b432e Addded approval tests for exporters (by @alinasmirnova ) ac6507 Added more info in mock summary (by @alinasmirnova ) a59b17 MockEnvironmentInfo for approval tests (by @alinasmirnova ) 610f3b Awaiting Tasks should not interfere allocation results, fixes #415 (by @adamsitnik ) cf16f6 I forgot about aligning, #415 (by @adamsitnik ) 2860d2 help the .NET framework to resolve assemblies when binding redirects are miss... (by @adamsitnik ) e7ad36 don't log false alarms, fixes #419 (by @adamsitnik ) 803081 Allow users to pick, show and hide measurement units in the reports and expor... (by @AmadeusW ) fa3128 Exports file to temporary location if target is locked (#416) (by @AmadeusW ) c923ba MarkdownExporter right-justifies numeric columns (#421) (by @stevedesmond-ca ) aa290d Add column legends (by @AndreyAkinshin ) 8d8db5 Handle case when there are no columns with legends (by @AndreyAkinshin ) dc201c Add empty line before legends (by @AndreyAkinshin ) ff7fc9 Approved files (by @alinasmirnova ) 3f6372 Updated Microsoft.Net.Test.Sdk (by @alinasmirnova ) 7d23d1 Merge remote-tracking branch 'upstream/master' (by @alinasmirnova ) 57cbbb Merge branch 'new-test-sdk-version' (by @alinasmirnova ) c0c563 Updated Microsoft.Net.Test.Sdk (by @alinasmirnova ) 539834 Updated spproved files according last changes in md exporter (by @alinasmirnova ) f117f0 Added *.received and *.orig in .gitignore (by @alinasmirnova ) 0d7e72 Make InliningDiagnoser filtering more flexible, fixes #424 (by @adamsitnik ) d25eb0 allow to set InProcessToolchain via attribute /cc @ig-sinicyn (by @adamsitnik ) 8cf041 Mock strings in mock environment info (by @alinasmirnova ) 0db804 Changed file naming in approval files (by @alinasmirnova ) 29aeaf correct Idle implementation for Task-returning benchmarks, fixes #418 (by @adamsitnik ) c81aa5 the missing docs for Hardware Counters, fixes #388 (by @adamsitnik ) 6076e2 Improved precision (by @AndreyAkinshin ) 72b3a6 Show \"NA\" for statistic columns with double.NaN values (by @AndreyAkinshin ) ea2222 Processor brand string prettifying (by @AndreyAkinshin ) 678d43 Added approval files info links to docs (by @alinasmirnova ) 33911c Merge remote-tracking branch 'upstream/master' (by @alinasmirnova ) d4c928 Fixed approval tests according to recent changes in master (by @alinasmirnova ) eb9f4f Fix typos in docs (by @AndreyAkinshin ) 271b27 Merge pull request #348 from alinasmirnova/master (by @AndreyAkinshin ) 152f3e Parsing Gulftown processor brand strings (by @AndreyAkinshin ) 74d793 Minor improvements in docs (by @AndreyAkinshin ) 764bd3 Minor improvements in docs, part 2 (by @AndreyAkinshin ) 0a251b Fix unix OS detection. (by @mfilippov ) 5c3b39 Fix typo in PlatformID (by @mfilippov ) 7f3d06 Always use PlatformAbstractions in RuntimeInformation.GetOsVersion() (by @AndreyAkinshin ) 46d34f Set library version: 0.10.4 (by @AndreyAkinshin ) Contributors (8) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Amadeusz Wieczorek ( @AmadeusW ) Andrey Akinshin ( @AndreyAkinshin ) ig-sinicyn ( @ig-sinicyn ) Mihai Codoban ( @cdmihai ) Mikhail Filippov ( @mfilippov ) Steve Desmond ( @stevedesmond-ca ) Thank you very much! Additional details Date: April 21, 2017 Milestone: v0.10.4 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.4 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.4 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.4 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.4 BenchmarkDotNet v0.10.3 New .csprojs support for .NET Core. Also for F# ( #366 )! New plots and RPlotExporter (density plots for each job; cumulative mean plots) Fixed exporter order (now RPlotExporer uses the actual measurements instead of previous version) Xplat improvments in RuntimeInformation Introduced RunStrategy.Monitoring Possibility to set custom path for Mono ( #306 ) Possibility to set any .NET Core version >= 1.1 ( #336 ) MemoryDiagnoser is now disabled by default (Breaking changes!!) ( #369 ) Milestone details In the v0.10.3 scope, 10 issues were resolved and 2 pull requests where merged. This release includes 79 commits by 3 contributors. Resolved issues (10) #300 Switch back from project.json and xproj to csproj, support dotnet cli preview 3 (assignee: @adamsitnik ) #306 Custom path for mono (assignee: @adamsitnik ) #320 Results table should be a GitHub Flavored Markdown table (assignee: @alinasmirnova ) #322 First benchmark always fails when running on .NET Core with -c release (assignee: @adamsitnik ) #336 allow the users to choose the target .NET Core version (1.2, 2.0 etc) (assignee: @adamsitnik ) #366 Support the new .fsprojs targetting .NET Core (F# + .NET Core + MSBuild) (assignee: @adamsitnik ) #369 Consider to disable MemoryDiagnoser by default (assignee: @adamsitnik ) #372 Troubles with ClrJob from CoreCLR project (assignee: @adamsitnik ) #374 BenchmarkDotNet doesn't understand netcoreapp2.0 (assignee: @adamsitnik ) #375 Troubles with dotnet pack (assignee: @adamsitnik ) Merged pull requests (2) #355 Fixed typo in IntroBasic.cs (by @mmayr-at ) #357 Farewell project json (by @adamsitnik ) Commits (79) 8099a5 Print process.StartInfo in Executor (by @AndreyAkinshin ) abd931 Update BenchmarkDotNet.sln.DotSettings (by @AndreyAkinshin ) 5c8c75 toolchains should not require parameterless ctors, the real fix for #327 (by @adamsitnik ) b22cf2 allow the users to choose the target .NET Core version, fixes #336 (by @adamsitnik ) f99c82 .net core toolchain: root folder detection bug fix (by @adamsitnik ) c7aba1 experimental .NET Core support for the new VS 2017 csproj files, #300 (by @adamsitnik ) bca146 Additional density plots in RPlotExporter (by @AndreyAkinshin ) 4bb147 Additional cummean plots in RPlotExporter (by @AndreyAkinshin ) 8bf40c Implement top sort in CompositeExporter (by @AndreyAkinshin ) ad771d Always print the AllocationColumn in the Summary table (if MemoryDiagnoser is... (by @AndreyAkinshin ) 8a1f0e Fix order of exporters in ExporterDependencyTests (by @AndreyAkinshin ) a7366e xproj to csproj auto migration (by @adamsitnik ) cec3e2 xproj to csproj: manual changes (conditional recursive dependencies not suppo... (by @adamsitnik ) 74006d xproj to csproj: I did not ask for the .NET Standard dependency (by @adamsitnik ) bf7093 xproj to csproj: manual changes (conditional dependencies not supported anymo... (by @adamsitnik ) 4e060f xproj to csproj: manual changes (simple case not supported) (by @adamsitnik ) 59602c remove F# .NET Core samples (not working now) (by @adamsitnik ) 2488ae cleanup (by @adamsitnik ) d7925b get our toolchain up and running, thanks to @cesarbs (by @adamsitnik ) e719e7 Update IntroBasic.cs (by @mmayr-at ) 1ef000 Merge pull request #355 from mmayr-at/patch-1 (by @AndreyAkinshin ) 5cf1dc making diagnosers, ctrl+c, custom priority and affinity work for the new csprojs (by @adamsitnik ) d0f334 getting net46 toolchain work again for new .csprojs when called from .NET Cor... (by @adamsitnik ) d1bf9b removing old project.json workarounds (by @adamsitnik ) e0b134 taking advantage of the csproj (by @adamsitnik ) 001b3f appveyor stuff (by @adamsitnik ) 63d674 don't introduce limit for .sln file search depth (by @adamsitnik ) 81adbb make VS stop complaining about root namespace for BenchmarkDotNet.Core project (by @adamsitnik ) 2eee5f let's round it to reduce the side effects of Allocation quantum (by @adamsitnik ) f38e93 a project that targets AnyCPU cany be referenced by any other executable (32 ... (by @adamsitnik ) 8ed5a4 post code review changes (by @adamsitnik ) 50c938 add possibility to use RetainVMGarbageCollection config switch (by @adamsitnik ) ca1bc8 final Cleanup and some renaming ;) (by @adamsitnik ) a26d61 Update BenchmarkDotNet.sln.DotSettings (by @AndreyAkinshin ) 008819 getting all the test runnable again (by @adamsitnik ) a66913 trying to get the versioning done right (by @adamsitnik ) c6f245 the updated docs (by @adamsitnik ) f1a1fd update to the latest xUnit 2.2 + minor cleanup (by @adamsitnik ) 262c87 appveyor config + minor bug fixes (by @adamsitnik ) 1a7bd4 Support the new .fsprojs targetting .NET Core (F# + .NET Core + MSBuild), fix... (by @adamsitnik ) e8f6ac support projects without .sln file (dotnet cli only) (by @adamsitnik ) 1b71c5 update our tests to net452 because XUnit VS runner 2.2 does no longer support... (by @adamsitnik ) 6121ad disable shadow copy for our integration tests (by @adamsitnik ) 54375c warn the users when code optimization was not enabled (debug build can be opt... (by @adamsitnik ) 03ed32 stop using --binaries option which started producing new folder for every re... (by @adamsitnik ) 27f280 dotnet cli like to not release used files for a while.. (by @adamsitnik ) 7886ad Merge pull request #357 from dotnet/farewellProjectJson (by @AndreyAkinshin ) 751f64 Xplat RuntimeInformation.GetProcessorName() (by @AndreyAkinshin ) b327b7 tell why dotnet command failed + how much time it took to execute (by @adamsitnik ) b740bb WindowsVersion on CoreCLR (by @AndreyAkinshin ) 5b879b Lazty HostEnvironmentInfo.OsVersion (by @AndreyAkinshin ) 76d081 Lazy HostEnvironmentInfo.OsVersion, fix in ToFormattedString() (by @AndreyAkinshin ) 5dafb9 do not restore or build the dependent projects, just the auto-generated one (by @adamsitnik ) 5c1914 better troubleshooting: when dll is not found but somehow build has succeeded... (by @adamsitnik ) 322998 using csproj to tell msbuild where to put output so appveyor custom settings ... (by @adamsitnik ) e2a8fa post code review changes (by @adamsitnik ) 6fe93d MinIterationTimeAnalyser (by @AndreyAkinshin ) 3ac892 RunStrategy.Monitoring (by @AndreyAkinshin ) f412b9 Docs: add FAQ section about supported version of Visual Studio (by @AndreyAkinshin ) 67a007 fixing ProjectJsonToolchains after recent CsProjToolchain optimizations (by @adamsitnik ) 2b5c6e Improved RuntimeInformation.GetProcessorName() (by @AndreyAkinshin ) a44638 Improved RuntimeInformation.GetOsVersion() (by @AndreyAkinshin ) f58e06 Improved RuntimeInformation.GetRuntimeVersion() for Mono (by @AndreyAkinshin ) fdca26 Minor RuntimeInformation fixes (by @AndreyAkinshin ) 2a2168 Fix bug in ExternalToolsHelper (by @AndreyAkinshin ) 9dfd95 Custom path for mono, fixes #306 (by @adamsitnik ) 448b07 disable MemoryDiagnoser by default, BREAKING CHANGE, fixes #369 (by @adamsitnik ) 125b71 docs for Custom Mono Paths, #306 (by @adamsitnik ) a3d6e0 docs/FAQ: Add section about new .NET Core Console App in VS2017 (by @AndreyAkinshin ) b04195 give users the AnyCpu hint when they struggle with BadImageFormatException, f... (by @adamsitnik ) 7de671 generate the projects in the bin folder, not solution's root (by @adamsitnik ) 1d52ae docs/FAQ: add another question (by @AndreyAkinshin ) 06aaa0 copy NetCoreAppImplicitPackageVersion and RuntimeFrameworkVersion settings to... (by @adamsitnik ) f1fe16 shame on me for not building the code for all TFMs before pushing (by @adamsitnik ) fe33dd GitHub Markdown: every table row should start with \"|\" , fixes #320 (by @adamsitnik ) 7d0d73 remove old results, otherwise, the file will be overwritten and remaining old... (by @adamsitnik ) 80348b Change Hint color to DarkCyan #376 (by @AndreyAkinshin ) 0b35ec Increase MinIterationTime (Accuracy improvement) (by @AndreyAkinshin ) cdee09 Set library version: 0.10.3 (by @AndreyAkinshin ) Contributors (3) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Michael Mayr ( @mmayr-at ) Thank you very much! Additional details Date: March 01, 2017 Milestone: v0.10.3 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.3 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.3 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.3 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.3 BenchmarkDotNet v0.10.2 Closed #307 : culture invariant statistics output Closed #321 : persist optimized, auto-generated dll compiled from url/plain code Closed #322 : always restore the console foreground color Closed #337 : Better detection of Rscript.exe in RPlotExporter Closed #345 : fix bug in WelchTTestPValueColumn for DryJob VS 2017 compatibility fix fix bold markup for Atlassian exporter Improved precision of nanobenchmarks Minor infrastructure changes and misc fixes Milestone details In the v0.10.2 scope, 10 issues were resolved and 3 pull requests where merged. This release includes 30 commits by 7 contributors. Resolved issues (10) #295 Fix CLS-compliant warnings in Diagnostics (assignee: @adamsitnik ) #307 Output: interpolated strings & culture (assignee: @alinasmirnova ) #319 [Request] some API to public? (assignee: @adamsitnik ) #321 BenchmarkRunner.RunUrl throws BenchmarkSystem.IO.FileNotFoundException (assignee: @adamsitnik ) #327 Unable to use ClassicToolchain in explicit way (assignee: @adamsitnik ) #332 default color of terminal is changed after the run is completed (assignee: @adamsitnik ) #335 Support benchmarking startup performance (assignee: @AndreyAkinshin ) #337 Problematic mechanism/docs for locating Rscript.exe #340 [FeatureRequest] Enable Characteristic-based properties for non-job types. (assignee: @ig-sinicyn ) #345 Fail to run IntroAdvancedStats in dry mode (assignee: @AndreyAkinshin ) Merged pull requests (3) #338 Fix typo (by @roji ) #339 Better detection of Rscript in RPlotExporter (by @roji ) #341 Base types for characteristic objects: (by @ig-sinicyn ) Commits (30) e7c398 Fixes parentheses error (by Josef Ottosson) 2655b3 Merge pull request #318 from joseftw/patch-1 (by @adamsitnik ) 4115a2 make GcStats and Net46Toolchain internal members public, fixes #319 (by @adamsitnik ) 52f953 ignore the CLS compilant errors for Diagnosers package, fixes #295 (by @adamsitnik ) d96b68 Improved Consumer (by @AndreyAkinshin ) 943c49 CLSCompliant fixes in Consumer (by @AndreyAkinshin ) f4bdae specify the .NET Core sdk version in explicit way to get the solution working... (by @adamsitnik ) df8c55 always restore the console foreground color, fixes #332 (by @adamsitnik ) 24dea4 fix bold markup for Atlassian exporter (by @lahma ) 4d3c75 persist optimized, auto-generated dll compiled from url/plain code, fixes #321 (by @adamsitnik ) 2e92a2 allow to set Classic/Roslyn tool chain in explicit way, fixes #327 (by @adamsitnik ) aabece Merge pull request #329 from lahma/features/atlassian-bold-format (by @adamsitnik ) 91152c ExportToFiles now accepts console logger (by @roji ) 299375 Base types for characteristic objects: (by @ig-sinicyn ) afc65d Better detection of Rscript.exe in RPlotExporter (by @roji ) 15869b Merge pull request #339 from roji/rscript-detect (by @AndreyAkinshin ) 9f6a82 Merge pull request #341 from ig-sinicyn/feature-characteristic-object (by @AndreyAkinshin ) 432adf Fix typo (by @roji ) cfa015 Merge pull request #338 from roji/dependencies-typo (by @AndreyAkinshin ) 4d953f Temporary rollback of the link to appveyor (by @AndreyAkinshin ) 1f5a6e Update year in docs footer (by @AndreyAkinshin ) 183ab6 Fix warning in RoslynToolchain (by @AndreyAkinshin ) 6fd9f3 Used ToStr to make statistics builder culture invariant (fixed #307) (by @alinasmirnova ) 3a3100 Merge pull request #346 from alinasmirnova/master (by @AndreyAkinshin ) 7ee2f1 Fix in WelchTTestPValueColumn for DryJob, fixes #345 (by @AndreyAkinshin ) 795f4a Disable jitting for RunStrategy=ColdStart, fixes #335 (by @AndreyAkinshin ) 5b5a8c Fixed typo (by @lukasz-pyrzyk ) 54519c Merge pull request #347 from lukasz-pyrzyk/master (by @adamsitnik ) fbac75 Introduced Dummy actions (by @AndreyAkinshin ) 484f53 Set library version: 0.10.2 (by @AndreyAkinshin ) Contributors (7) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) ig-sinicyn ( @ig-sinicyn ) Łukasz Pyrzyk ( @lukasz-pyrzyk ) Marko Lahma ( @lahma ) Shay Rojansky ( @roji ) Thank you very much! Additional details Date: January 21, 2017 Milestone: v0.10.2 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.2 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.2 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.2 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.2 BenchmarkDotNet v0.10.1 MemoryDiagnoser got improved. The changes: Memory Diagnoser is now part of BenchmarkDotNet.Core.dll, and it's enabled by default MemoryDiagnoser is 100% accurate about allocated memory when using default settings or Job.ShortRun or any longer job. (see #284 ) Memory Diagnoser no longer includes allocations from Cleanup/Setup methods (see #186 ) the results are now scaled so they are stable across the runs. (see #133 ) .NET Core 1.1+ support, we no longer support 1.0, we target netcoreapp1.1 now. Reason: we wanted to use GC.GetAllocatedBytesForCurrentThread in MemoryDiagnoser which is available only in 1.1+ Improved information about environment in summary Minor bugfixes Milestone details In the v0.10.1 scope, 9 issues were resolved and 2 pull requests where merged. This release includes 38 commits by 2 contributors. Resolved issues (9) #133 High differences between run for GC Diagnoser (assignee: @adamsitnik ) #186 GC Diagnoser should not include allocations done by Setup method (assignee: @adamsitnik ) #200 be accurate about allocated bytes/op (assignee: @adamsitnik ) #208 Troubles with MemoryDiagnoserTests (assignee: @adamsitnik ) #298 PlatformNotSupportedException when reading ProcessorAffinity on MacOS (assignee: @adamsitnik ) #301 netcoreapp1.1 support (assignee: @adamsitnik ) #309 Diagnosers don't export data to the measurements.csv files (assignee: @adamsitnik ) #312 RuntimeInformation can be made static and internal (assignee: @AndreyAkinshin ) #313 Bug in Generator (interface as a return type) (assignee: @AndreyAkinshin ) Merged pull requests (2) #284 built-in accurate and cross platform Memory Diagnoser (by @adamsitnik ) #314 Improved information about job environments in summary (by @AndreyAkinshin ) Commits (38) 23f3b2 built-in accurate and cross platform Memory Diagnoser, fixes #186, fixes #200 (by @adamsitnik ) 4cabc2 don't try to use AppDomain's Monitoring in Mono since it's not implemented there (by @adamsitnik ) 99c21e scale GC collections count / op, makes MemoryDiagnoser output stable for benc... (by @adamsitnik ) e91255 use per mille to make the Memory Diagnoser output more human-friendly + reduc... (by @adamsitnik ) a0536d Merge branch 'master' into universalMemoryDiagnoser (by @adamsitnik ) ade1be preallocate results list in more safe, but still ugly way (by @adamsitnik ) 102282 closed the ugly code in separate class (by @adamsitnik ) 7825b7 Update links in docs (by @AndreyAkinshin ) aaf720 Fix typo (by @AndreyAkinshin ) 1e2d38 update to netcoreapp1.1 in order to get universal cross platform memory diagn... (by @adamsitnik ) e69e80 don't show Gen 1 and Gen 2 columns if empty for all benchmarks (by @adamsitnik ) b10a84 PlatformNotSupportedException when reading ProcessorAffinity on MacOS, fixes ... (by @adamsitnik ) 2a529a update to .NET Core 1.1, fixes #301 (by @adamsitnik ) e6ccee always show Gen 0 column, display Gen 0/1/2 per 1k op (by @adamsitnik ) 3bcc59 Merge branch 'master' into universalMemoryDiagnoser (by @adamsitnik ) a09810 make public things readonly, expensive things lazy and extend's validators in... (by @adamsitnik ) eae2cd added documentation and smarter bytes formatting (by @adamsitnik ) 1208c3 Merge branch 'master' into universalMemoryDiagnoser (by @adamsitnik ) f1f231 Merge pull request #284 from dotnet/universalMemoryDiagnoser (by @AndreyAkinshin ) 6300a2 include MemoryDiagnoser's results in CsvMeasurementsExporter, fixes #309 (by @adamsitnik ) ddb37e don't use spaces in columns names in CSV, #309 (by @adamsitnik ) 112f62 Fix stupid bug with condition for optional MedianColumn (by @AndreyAkinshin ) 60127c Remove Cpu_Ilp_RyuJit.cs because it's obsolete (by @AndreyAkinshin ) 401456 Print full information about a GenerateException (by @AndreyAkinshin ) 0b9177 Support of benchmark methods with an interface as a return type, fixed #313 (by @AndreyAkinshin ) b42b9e Improved information about job environments in summary (by @AndreyAkinshin ) 92f1db Improved information about job environments in summary, part 2 (by @AndreyAkinshin ) 5d8dd7 Merge pull request #314 from dotnet/summary (by @AndreyAkinshin ) d279f6 Make RuntimeInformation static internal, fix #312 (by @AndreyAkinshin ) 1df6ca Minor API improvements in BenchmarkSwitcher (by @AndreyAkinshin ) c12daf Dot't show the median column for the N=1 case (by @AndreyAkinshin ) 19caa2 RyuJit is always avaiable for .NET Core (by @adamsitnik ) 13e12c make JitOptimizationsValidator work for .NET Core (needed properties are avai... (by @adamsitnik ) c17b43 hide the AllocatedBytes column for Mono, show Gen 0 only if any of the benchm... (by @adamsitnik ) 29ac91 updated docs about Diagnosers in the Overview ;) (by @adamsitnik ) cc974e Improved information about job environments in summary, part 3 (by @AndreyAkinshin ) 8846af Update docs (by @AndreyAkinshin ) 37b126 Set library version: 0.10.1 (by @AndreyAkinshin ) Contributors (2) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Date: December 04, 2016 Milestone: v0.10.1 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.1 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.1 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.1 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.1 BenchmarkDotNet v0.10.0 Now BenchmarkDotNet is a part of .NET Foundation Job and Column API refactoring (see new documentation) Measurement engine improvements Horology enhancement (see TimeInterval and Frequency ) Introduced RankColumn which is based on WelchTTest (see 157aabc3 ) JsonExporters refactoring (see the Exporters/Json section in the documentation) Renamed JsonExporters classed and attributes JsonExporters with custom settings JsonExporters now includes information about the target type namespace (see #246 ). Add JetBrains.Annotations (see #253 ) RFC 4180 support in CSV exporters (see #241 ) Many bugfixes Milestone details In the v0.10.0 scope, 19 issues were resolved and 7 pull requests where merged. This release includes 85 commits by 7 contributors. Resolved issues (19) #30 Better information when we haven't got a valid measurement #121 Strange # of \"Launches\" chosen with Count.Auto #154 PathTooLong exception on custom config #185 Report if difference between 2 benchmarks is statistically significance #241 .csv results output does not play well with Excel or Google Sheets #244 DefaultConfig StatisticColumn values #246 No namespace information? #265 Add ability to specify that benchmark requires STAThread #266 Don't assume that TargetType has reference to BenchmarkDotNet (assignee: @adamsitnik ) #268 Print runtime of child processes in summary #271 Params attribute does not handle nullable types #272 [Setup] error when doing inheritance #276 System.EntryPointNotFoundException #280 Cannot run on OSX / Mono (System.Xml.XmlException: Root element is missing) #281 Results are exported twice for single run #288 IdleWarmup running off forever #291 [Bug] Incorrect results for targetCount:Auto #292 Support for Beta versions #296 [BUG] NRE in OutliersAnalyser Merged pull requests (7) #253 Mark [Benchmark] as implying implicit use (by @roji ) #267 Make shipped assemblies have CLSCompliant(true) applied (by @lahma ) #277 Changed diagnosers flow, reduced heap allocations in Engine to 0 (by @adamsitnik ) #278 Support Atlassian flavored wiki markup (by @lahma ) #286 Mutable Job implementation (by @ig-sinicyn ) #287 Fix docs: job API changed (by @ig-sinicyn ) #293 Presenters: IFormattable support (by @ig-sinicyn ) Commits (85) a8b4e7 JsonExporters refactoring (by @AndreyAkinshin ) e6a4ae JsonExporters: add information about namespaces, resolves #246 (by @AndreyAkinshin ) 29ee0a Add Namespace column (by @AndreyAkinshin ) 26c333 Better error message (by @arthrp ) 12b313 Merge pull request #251 from arthrp/master (by @AndreyAkinshin ) 03d00c Mark [Benchmark] as implying implicit use (by @roji ) 394a93 Merge pull request #253 from roji/resharper-annotations (by @AndreyAkinshin ) 4912ea Remove unnecessary specific shell reference (by @factormystic ) 023115 Merge pull request #254 from factormystic/patch-1 (by @AndreyAkinshin ) 972fee Big refactoring (by @AndreyAkinshin ) cf839a Improved ranks (by @AndreyAkinshin ) ef3ecf Extended TimeInterval and Frequency API (by @AndreyAkinshin ) dfcc98 Minor fixes (by @AndreyAkinshin ) fb3757 Improved CSV export, fixes #241 (by @AndreyAkinshin ) f490d1 further root folder cleanup #228 (by @adamsitnik ) f7a6a0 Added [MeansImplicitUse] and explanation to summary for SetupAttribute and Cl... (by @adamsitnik ) 56b1f2 Configuration fix in JitOptimizationsTests (by @AndreyAkinshin ) faac58 Introduce AnaylyzeLaunchVariance (by @AndreyAkinshin ) 9953a9 Smart statistics in StatisticsColumnProvider (by @AndreyAkinshin ) 2a6578 Minor fixes in docs (by @AndreyAkinshin ) 03fb04 Introduce UnrollFactor (by @AndreyAkinshin ) 137636 NewLine fix in OutputLogger (by @AndreyAkinshin ) b35d52 Unique column support (by @AndreyAkinshin ) 24e944 Don't assume that TargetType has reference to BenchmarkDotNet, fixes #266 (by @adamsitnik ) 69330a Make shipped assemblies have CLSCompliant(true) applied (by @lahma ) fb8402 Merge pull request #267 from lahma/features/cls-compliancy (by @adamsitnik ) 0944b5 Make exported HTML valid, add alternating color to result table (by @lahma ) 748a2c Merge pull request #269 from lahma/features/html-export-enhancements (by @adamsitnik ) afff51 ExecutionValidator should not throw on overridden [Setup] methods, fixes #272 (by @adamsitnik ) ab9db4 Support nullable types as [Params], fixes #271 (by @adamsitnik ) ce4994 support for [STAThread], fixes #265 (by @adamsitnik ) 13fa5c move ConsoleHandler to separate file for better readability (by @adamsitnik ) 0e8e82 Print runtime of child processes in summary, fixes #268 (by @adamsitnik ) 491a28 Print more info about runtime of child processes in summary (and in a nicer w... (by @adamsitnik ) 0580a5 updated docs for #265 (by @adamsitnik ) f9baa6 catch native exceptions when determining clock type, #276 (by @adamsitnik ) 93a23d Check OS version in WindowsClock, fixed #276 (by @AndreyAkinshin ) 8d65fe changed diagnosers flow, possibility to hook up before jitting, after setup a... (by @adamsitnik ) f346ff added predefined attributes for diagnosers (by @adamsitnik ) e7cc6b Support Atlassian flavored wiki markup (by @lahma ) 376bd8 reduce memory allocated by Engine during run to increase MemoryDiagnoser accu... (by @adamsitnik ) b5ab55 display results when runing when no diagnoser is attached (by @adamsitnik ) 7ae2b5 Improved idle method for primitive types (by @AndreyAkinshin ) e1213a Fix NRE in BuildJobRuntimes (by @AndreyAkinshin ) 572fa4 Make code CLS-Compliant, fix CS3015 warning (by @AndreyAkinshin ) 4070a1 preload all settings in ctors, introduced IEngineFactory (by @adamsitnik ) 2f0df7 make Engine use InvocationCount (by @adamsitnik ) 8a7a12 calculate Statistics without allocations! makes the code look bad, but saves ... (by @adamsitnik ) d8fa70 remove last allocations from Engine.Run (by @adamsitnik ) f2a106 perform Jitting after first Setup call, better naming, test fix (by @adamsitnik ) be3ce3 introduce general catch with hopes to help with #280 (by @adamsitnik ) 3c5e70 post code review changes (by @adamsitnik ) 16e258 possibility to define custom Engine (by @adamsitnik ) afa586 Merge pull request #277 from PerfDotNet/diagnosersFlow (by @adamsitnik ) 534189 export files only once, not twice, fixes #281 (by @adamsitnik ) a733b5 Mutable Job implementation (by @ig-sinicyn ) 259647 Merge pull request #286 from ig-sinicyn/feature-mutable-characteristics (by @AndreyAkinshin ) c184b8 Fix docs: job API changed (by @ig-sinicyn ) 47b152 Merge pull request #287 from ig-sinicyn/fix-docs-jobs-updated (by @AndreyAkinshin ) 868ffc Jobs: WithXxx() extension methods added back, docs updated (by @ig-sinicyn ) eede54 Jobs: .With() methods now create new instances of the Job. (by @ig-sinicyn ) 40f160 Test fixed (by @ig-sinicyn ) fd92f7 Jobs: helper for .With() methods (by @ig-sinicyn ) 307b72 Merge pull request #289 from ig-sinicyn/features-jobs-with (by @AndreyAkinshin ) d576f5 Presenters: IFormattable support (by @ig-sinicyn ) 8647e7 Fix #291 (by @AndreyAkinshin ) 49c000 Merge pull request #293 from ig-sinicyn/fix-presenter-culture (by @AndreyAkinshin ) 684334 Merge pull request #278 from lahma/features/atlassian-wiki-markup (by @AndreyAkinshin ) 7f3ca5 Make BenchmarkRunnerCore.Run public (by @AndreyAkinshin ) 10a91e Allow using newer versions of Microsoft.NETCore.App, fixes #292 (by @adamsitnik ) 134d74 Misc improvements in Exporters (by @AndreyAkinshin ) 33c63f Respect RemoveOutliers in the RunResults (by @AndreyAkinshin ) 5e022b Fix #291, part 2 (by @AndreyAkinshin ) 4b6ea9 Improved name for the Id CharacteristicColumn (by @AndreyAkinshin ) af6f8a Fix some compilation warnings (by @AndreyAkinshin ) 2f8584 Analysers refactoring + OutliersAnalyser (by @AndreyAkinshin ) b11935 Make BenchmarkRunnerCore public (by @AndreyAkinshin ) 781740 Specify generated id for the default job (by @AndreyAkinshin ) 846255 JobTests.Test01Create fix (by @AndreyAkinshin ) 9f9544 Check if there is no MainTarget measurements in OutliersAnalyser, fixes #296 (by @AndreyAkinshin ) 503b04 Proper exception in GetStatistics for empty input, see #296 (by @AndreyAkinshin ) c667aa Fix path to logo (by @AndreyAkinshin ) 0b91c3 Fix null check in JobMode.ApplyCore (by @AndreyAkinshin ) 2edb56 Copyrights and links update (by @AndreyAkinshin ) 2edb9a Set library version: 0.10.0 (by @AndreyAkinshin ) Contributors (7) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Arthur ( @arthrp ) factormystic ( @factormystic ) ig-sinicyn ( @ig-sinicyn ) Marko Lahma ( @lahma ) Shay Rojansky ( @roji ) Thank you very much! Additional details Date: November 10, 2016 Milestone: v0.10.0 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.0 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.0 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.0 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.0 Online Documentation: https://dotnet.github.io/BenchmarkDotNet/ BenchmarkDotNet v0.9.9 Attribute config style (see #166 ) Online documentation (see #219 ) Mono LLVM support (see #226 ) Async method support (see #236 ) NuGet packages and repo layout restructuring (see #225 , #228 ) [Cleanup] attribute (see #215 ) New statistics columns: Skewness , Kurtosis , WelchTTestPValue , Improved math for the Scaled column Now current default branch is master Minor improvements and bug fixes Milestone details In the v0.9.9 scope, 14 issues were resolved and 1 pull requests where merged. This release includes 46 commits by 4 contributors. Resolved issues (14) #166 Suggestion: Attribute Config style (assignee: @AndreyAkinshin ) #215 Allow a [Cleanup] method to be specified #219 Online documentation and API reference #223 Add support for System.Type in Params #224 [Breaking change] BenchmarkAttribute become sealed. #225 Refactoring the roslyn dependency into another package #226 Support Mono/LLVM as a runtime/jit #227 Suggestion: change default branch (assignee: @AndreyAkinshin ) #228 Suggestion: clean up the root folder #231 Add references to default framework assemblies (System.Runtime etc) #232 Make all tests use OutputLogger (assignee: @adamsitnik ) #235 Don't show non-error output of dotnet cli (assignee: @adamsitnik ) #236 Possibility to benchmark asynchronous methods (assignee: @adamsitnik ) #240 Total Time reports hour rounded up Merged pull requests (1) #233 Add support of Cleanup attribute #215 (by @DenisIstomin ) Commits (46) f9f748 Improved \"Scaled\" column (by @AndreyAkinshin ) 5d7ba9 Warmup improvements (by @AndreyAkinshin ) 664c64 Add Skewness, Kurtosis, and WelchTTestPValue columns and configs (by @AndreyAkinshin ) c9e802 Attribute Config style, fixes #166 (by @AndreyAkinshin ) 378173 README: add supported OS (by @AndreyAkinshin ) 50ac57 Make Benchmark, Params and Setup attributes non-sealed again, fixes #224, #57 (by @adamsitnik ) b9c815 Support Mono/LLVM as a runtime/jit, fixes #226 (by @adamsitnik ) cdfbd5 Update info about default branch, see #227 (by @AndreyAkinshin ) 42e9b9 Add System.Type support in Params, fixes #223 (by @AndreyAkinshin ) db3dc3 Suggestion: clean up the root folder, fixes #228 (by @adamsitnik ) 4e1db3 use shorter names for test for xunit test runner (method name instead of full... (by @adamsitnik ) a35b22 make sure all framework assemblies are referenced, #231 (by @adamsitnik ) 19426a spliting BenchmarkDotNet.dll to few dlls to avoid mandatory Roslyn dependency... (by @adamsitnik ) 356a39 move BenchmarkRunner's core to separate class to .Core project so it can be ... (by @adamsitnik ) 0121a6 minor cleanup: rename LLVM => Llvm, remove [Obsolete] things (by @adamsitnik ) fb8047 Make all tests use OutputLogger, fixes #232 (by @adamsitnik ) ae17a7 Add support of Cleanup attribute, fix #215 (by @DenisIstomin ) 3bf9c0 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @adamsitnik ) 355c6f Don't show non-error output of dotnet cli, fixes #235 (by @adamsitnik ) 76df80 Possibility to benchmark asynchronous methods #236 (by @adamsitnik ) 3ab578 use GetAwaiter().GetResult() for Tasks instead of .Wait or .Result, #236 (by @adamsitnik ) d1db7d Added documentation source and output based on readme.md (by @FransBouma ) ac8cf2 Updated folder structure, removed html output, updated gitignore (by @FransBouma ) bed0f9 Removed unused folder copy directive from docnet.json (by @FransBouma ) 650fca Merge pull request #239 from FransBouma/master (by @AndreyAkinshin ) aceb96 Added Api docs generation directives (by @FransBouma ) a9ee7c Fix in total time formatting, fix #240 (by @AndreyAkinshin ) 1d2141 Update README.md (by @AndreyAkinshin ) 7b9fdb Fixed a couple of issues with api doc generation (by @FransBouma ) 682837 Merge pull request #243 from FransBouma/master (by @AndreyAkinshin ) 9a2cf2 docs improvements (by @AndreyAkinshin ) 334925 Rename: GarbageCollection -> GcMode (by @AndreyAkinshin ) 7a740a SummaryTableTests and minor refactorings (by @AndreyAkinshin ) c9d358 Transform GcModeColumn with null values to a trivial column (by @AndreyAkinshin ) cb6359 Improved HardwareTimerKind detection (by @AndreyAkinshin ) 04f736 Fix references in the IntegrationTests project files (by @AndreyAkinshin ) a9403a Fix warnings (by @AndreyAkinshin ) 691a05 BenchmarkDotNet.Tests: Remove the System.Globalization dependency (by @AndreyAkinshin ) 9e97d7 Show JitModules in EnvInfo only for the classic toolchain (by @AndreyAkinshin ) 823518 Improved docs (by @AndreyAkinshin ) 5fb854 Update README (by @AndreyAkinshin ) 5ebf8b Minor fixes (by @AndreyAkinshin ) 086dfd generic wrapper for config values (by @adamsitnik ) cf58b0 Merge branch 'gc' (by @adamsitnik ) bbccbe docs: add informations about NuGet packages (by @AndreyAkinshin ) 60bea3 Set library version: 0.9.9 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Denis Istomin ( @DenisIstomin ) Frans Bouma ( @FransBouma ) Thank you very much! Additional details Date: August 18, 2016 Milestone: v0.9.9 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.9 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.9.9 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.9.9 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.9 Online Documentation: https://perfdotnet.github.io/BenchmarkDotNet/ BenchmarkDotNet v0.9.8 CoreCLR RTM support (see #216 ). Breaking change: we have dropped dnx451 and dnxcore50 support. Migration from MSBuild to Roslyn, which supports Mono on Linux and MacOS (see #149 ). Breaking change: we have dropped .NET 4.0 support. Ability to manage GC mode: turn on/off the Server/Concurrent GC modes, extend to CPU groups, set gcAllowVeryLargeObjects and avoid BenchmarkDotNet from forcing GC.Collect (see #188 , #76 and #211 ) Support CopyToOutput (see #212 ). Now you can use native dependencies as well as custom files. Copying custom settings from app.config (see #108 ). It means we support assembly binding redirects as well as custom connection strings etc. AsciiDocExporter (see #169 ) Framework setting in Job has been removed (see #194 ) Minor bugfixes and improvements Milestone details In the v0.9.8 scope, 21 issues were resolved and 1 pull requests where merged. This release includes 69 commits by 5 contributors. Resolved issues (21) #57 Make Benchmark, Setup and Params attribute sealed in explicit way #76 Allow users to set gcAllowVeryLargeObjects for Runtime Settings (assignee: @AndreyAkinshin ) #77 Implement a C.I build (assignee: @mattwarren ) #108 Copy custom setting from app.config #131 [Mono] BenchmarkDotNet doesn't work on Mac OS #149 Migrate from MSBuild to Roslyn #174 NRE in Summary indexer property. #176 Split and simplify printed summaries #188 Ability to manage GC mode: turn on/off the Server/Concurrent GC modes and extend to CPU groups #191 MSBuild dependency - best way of fixing? #194 Framework settings in Jobs (assignee: @mattwarren ) #196 Allow specifying a gist url to RunUrl #197 Regression in 0.9.7: --help option fails under dotnet run #203 Third-party libraries must be explicitly included in test context to be loaded by runner #209 Fix appveyor bug #211 Possibility to turn off GC.Collect after each benchmark run (assignee: @adamsitnik ) #212 Support CopyToOutput #214 Benchmark ignores binding redirects #216 Update to .NET Core RTM (assignee: @adamsitnik ) #218 Errors in BenchmarkDotNet.Samples.FSharp.Core/projects.json #222 A problem with System.Threading.Tasks Merged pull requests (1) #169 Support export to asciidoc (by @russcam ) Commits (69) fcf48e Support export to asciidoc (by @russcam ) 590a0a Road to Roslyn: first attempt (by @AndreyAkinshin ) 704605 Added appveyor ci build (by @gigi81 ) 3859a1 Catch exception when accessing Console.WindowWidth, fixes #197 (by @mattwarren ) 7b92eb Filter tests by attribute (see #130) (by @mattwarren ) dd3464 Merge pull request #202 from gigi81/appveyor-build-2 (by @adamsitnik ) 29d106 Added missing 'build dependency' (by @gigi81 ) 2e8209 Merge pull request #205 from gigi81/fix-missing-dependency (by @AndreyAkinshin ) ff298d Appveyor build improvements (by @gigi81 ) 600cdd Merge pull request #206 from gigi81/appveyor-4 (by @AndreyAkinshin ) 68b070 Fixed tests not using OutputLogger (by @gigi81 ) 7d0501 Renamed _output to output (by @gigi81 ) ae5eab Merge pull request #207 from gigi81/fix-outputlogger (by @AndreyAkinshin ) dfe110 Small cleanup: remove compilation warnings (by @AndreyAkinshin ) ffe9f7 Clean up, part 2 (by @AndreyAkinshin ) 559f20 appveyor specific test fixes (by @AndreyAkinshin ) 38af24 MemoryDiagnoserTests: double.Parse Culture fix (by @AndreyAkinshin ) 02048d StatResultExtenderTests: SpeedUp (by @AndreyAkinshin ) f2b21f Clean up, part 3 (by @AndreyAkinshin ) d32328 SpeedUp: BaselineScaledColumnsTest, StatResultExtenderTests (by @AndreyAkinshin ) 5e37fa MemoryDiagnoserTests: additional parsing fixes (by @AndreyAkinshin ) 45c66f Merge branch 'develop' into Roslyn (by @adamsitnik ) a4cb8c MemoryDiagnoserTests: Temporarily suppressed (by @AndreyAkinshin ) ae38a5 README: add the appveyor badge (by @AndreyAkinshin ) 77bd64 README: update badges (by @AndreyAkinshin ) a74f82 README: update badges, part 2 (by @AndreyAkinshin ) 453a49 merging recent changes from develop with Roslyn branch to get it working again (by @adamsitnik ) ce4af5 add dependencies in recursive way, fixes #203 (by @adamsitnik ) a36af4 farewell MSBuid (by @adamsitnik ) d2dd83 Workaround for xunit bug (by @gigi81 ) 46f2b7 Merge pull request #210 from gigi81/xunit-workaround-2 (by @AndreyAkinshin ) c5b4ae Merge remote-tracking branch 'refs/remotes/origin/develop' into Roslyn (by @AndreyAkinshin ) 54109b copy custom settings from app.config file, fixes #108 (by @adamsitnik ) 20c41f enable GC settings customization, fixes #188 (by @adamsitnik ) dd0bc4 tests fix ;) (by @adamsitnik ) 0726b5 Possibility to turn off GC.Collect after each benchmark run, fixes #211 (by @adamsitnik ) da24b4 rename GC to GarbageCollection to avoid conflicts with System.GC (by @adamsitnik ) 3bf420 gcAllowVeryLargeObjects, fixes #76 (by @adamsitnik ) bdce98 split EnvironmentInfo into Host and Benchmark specific, make expensive method... (by @adamsitnik ) e819c8 added GC info to BenchmarkEnvironmentInfo (by @adamsitnik ) 9e0480 change GC settings display order (Workstation Concurrent => Concurrent Workst... (by @adamsitnik ) d03d17 support CopyToOutput: build in output directory + some refacotring, fixes #212 (by @adamsitnik ) 237370 minor bug fix: support spaces in parameters representation (by @adamsitnik ) 06349a Update to .NET Core RTM, drop DNX* support, fixes #216 (by @adamsitnik ) 106477 Merge branch 'develop' of https://github.com/russcam/BenchmarkDotNet into rus... (by @AndreyAkinshin ) 2e18db Merge branch 'russcam-develop' into develop (by @AndreyAkinshin ) 388155 Fix a NRE bug in Summary indexer, fixes #174 (by @AndreyAkinshin ) d448b4 Now RunUrl can work with non-raw github and gist urls, fixes #196 (by @AndreyAkinshin ) 7e1b95 Welch's Two Sample t-test (by @AndreyAkinshin ) cc70cb specify version of F# compiler in explicit way to workaround nuget bug, fixes... (by @adamsitnik ) e21373 use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes #149 (by @adamsitnik ) cd25cc use single reflection api after update to .NET 4.5 (by @adamsitnik ) 785d92 make Benchmark, Setup and Params Attribute sealed #57 (by @adamsitnik ) 8a3212 hopefully a workaround for appveyor build (by @adamsitnik ) ef7e35 hopefully a workaround for appveyor build, which does not have the latest dot... (by @adamsitnik ) 918a6d Remove xmlns for packages.config in IntegrationTests.Classic (by @AndreyAkinshin ) b897ed Merge branch 'Roslyn' into develop (by @adamsitnik ) 742a16 skip test that fails for Core on appveyor, #221 (by @adamsitnik ) a94a8b skip test that fails for Classic on appveyor, #221 (by @adamsitnik ) fec206 Fix incorrect xml-docs in MathHelper (by @AndreyAkinshin ) 1567d9 DEVELOPING.md: add a section about develop NuGet feed (by @AndreyAkinshin ) 5c3c31 appveyor: add BenchmarkDotNet.Diagnostics.Windows.nupkg to artifacts (by @AndreyAkinshin ) a69188 DEVELOPING.md: fix a typo (by @AndreyAkinshin ) 4e99b4 project.json: add tags (by @AndreyAkinshin ) 61b4c1 use System.Threading.Tasks as nuget package to fix nuget installation problem... (by @adamsitnik ) 976118 remove Framework settings from Jobs, fixes #194 (by @adamsitnik ) be0b71 try to remove the directory few more times when it's still not released to ma... (by @adamsitnik ) 0647a0 use the Configuration from the hosting process, not BDN dll (by @adamsitnik ) c6405a Set library version: 0.9.8 (by @AndreyAkinshin ) Contributors (5) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Luigi Grilli ( @gigi81 ) Matt Warren ( @mattwarren ) Russ Cam ( @russcam ) Thank you very much! Additional details Milestone: v0.9.8 Date: July 07, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.8 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.8 BenchmarkDotNet v0.9.7 .NET Core RC2 support (see #187 ) Bugfixes Milestone details In the v0.9.7 scope, 8 issues were resolved and 0 pull requests where merged. This release includes 27 commits by 3 contributors. Resolved issues (8) #168 Unable to run tests locally #170 Error handling in the spawned Benchmark process (assignee: @mattwarren ) #172 Ensure CsvMeasurementsExporter is enabled when RPlotExporter is used (assignee: @mattwarren ) #179 Job.GetAllProperties(): old property names are used #181 CompositeValidator: some validators will be skipped #183 [Suggestion] Make ValidationError public #187 .NET Core RC2 (assignee: @adamsitnik ) #192 Avoid creating .cs files at execution time Merged pull requests (0) Commits (27) 7568c0 Initial work on #130 (currently just matching existing behaviour) (by @mattwarren ) 34965e Fixes #170 (by @mattwarren ) 4d6d32 Remove \"@\" from the ProcessorName (by @AndreyAkinshin ) 57b402 Specify HintPath for all referenced assemblies (for mono support) (by @AndreyAkinshin ) 0d065b Merge branch 'develop' of github.com:PerfDotNet/BenchmarkDotNet into develop (by @mattwarren ) c24a9c Less \"magic\" strings - Fixes #179 (by @mattwarren ) 1371ea Allow Exporters to have dependencies, fixes #172 (by @mattwarren ) d6a55c Further work on #130 (by @mattwarren ) e0ebd4 Tidy up of the Json exporter code (part of #189) (by @mattwarren ) ae330c Allow formatted/indented Json (see #189) (by @mattwarren ) 83fd20 Also allow args with \"--\", i.e. --exporters=json (see #189) (by @mattwarren ) 78af45 File missing from previous check-in \"ae330c4\" (#189) (by @mattwarren ) 9352d0 \"Measurments\" -> \"Measurements\" (by @mattwarren ) a34507 .NET Core RC2 support, fixes #187 (by @adamsitnik ) 0c9524 remove IValidationError interface, make the implementation public, fixes #183 (by @adamsitnik ) 30a6ec Avoid creating .cs files at execution time, fixes #192 (by @adamsitnik ) 792176 hiding CompositeValidator, fix few typos, fixes #181 (by @adamsitnik ) a345e7 Use short, hard coded name for folders to avoid PathTooLongEx if user does no... (by @adamsitnik ) 354b28 minor cleanup after moving to RC2 (by @adamsitnik ) 53b7ff dotnet cli bug workaround, Tornhoof's idea (by @adamsitnik ) 8e6d30 added missing Nuget feeds to NuGet.Config, removed launchSettings which we do... (by @adamsitnik ) 9addd0 Improvements in MethodInvoker (by @AndreyAkinshin ) ccd91d Update Chronometer.HardwareTimerKind (by @AndreyAkinshin ) e9db3d Update year in LICENSE.md (by @AndreyAkinshin ) acd019 updated docs for .NET Core RC2 #187 (by @adamsitnik ) 605aa1 README.md: add a link to BenchmarkDotNet.Diagnostics.Windows (by @AndreyAkinshin ) 571b3d Set library version: 0.9.7 (by @AndreyAkinshin ) Contributors (3) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Milestone: v0.9.7 Date: May 29, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.7 https://www.nuget.org/packages/BenchmarkDotNet/0.9.7-beta https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.7 BenchmarkDotNet v0.9.6 Added Percentiles (see #164 ) Added support for Json export (see #84 ) Bugfixes Milestone details In the v0.9.6 scope, 11 issues were resolved and 2 pull requests where merged. This release includes 40 commits by 5 contributors. Resolved issues (11) #100 Code generation doesn't support generic classes #112 Generic benchmark classes are not supported #140 Readd an ability to define and to use custom Toolchain #141 [Request for comments] Assembly-level config attribute? #151 Crash during benchmark with baseline #152 MarkdownExporter.Default.ExportToLog fails with NRE for Summary with Critical Validation Errors #153 ManualConfig.Add(IConfig config) does not add the validators. #156 Cleanup benchmark folders #158 BaselineDiffColumn: NullReferenceException if one of the benchmark methods was failed. #161 Build warnings after update to 0.9.5 #171 Problem with ExceptionDispatchInfo (assignee: @AndreyAkinshin ) Merged pull requests (2) #138 Percentiles added into Statistics, StatisticColumn, BaselineDiffColumn (by @ig-sinicyn ) #164 Percentiles added into Statistics, StatisticColumn, BaselineDiffColumn (by @ig-sinicyn ) Commits (40) 9e625a copying validators when merging configs, fixes #153 (by @adamsitnik ) 5d0a7d returning empty objects instead of nulls, fixes #152 (by @adamsitnik ) cfff3b switching back to the old moniker that is supported not only by dnx and dotne... (by @adamsitnik ) 522fde Initial work on Json export (#84) (by @mattwarren ) 31452f Make SimpleJson build under \"DNXCore,Version=v5.0\" - (#84) (by @mattwarren ) 48b17a Merge branch 'develop' of github.com:PerfDotNet/BenchmarkDotNet into develop (by @mattwarren ) d8dad6 removing ClrMD dependencies that were causing troubles with nuget package rel... (by @adamsitnik ) 0a81d4 removing ClrMd diagnosers, they are kept in clrmd branch (by @adamsitnik ) 972ea2 setting BenchmarkDotNet version to one that is not in the Nuget yet to get do... (by @adamsitnik ) 1e6581 Removing final traces or Runtime and Source SourceDiagnosers (by @mattwarren ) 3576d4 Make BaselineDiffColumn more robust - fixes #158 and #151 (by @mattwarren ) 3f0d7b Exclude \"BenchmarkDotNet.Artifacts\" folder (can get in the way when building) (by @mattwarren ) 00995d Percentiles added into Statistics, StatisticColumn, BaselineDiffColumn (by @ig-sinicyn ) 2410d4 Update project.json files (by @AndreyAkinshin ) ed75f6 Assembly-level config attribute, Fixes #141 (by @AndreyAkinshin ) 6f3a0c Add a BenchmarkSwitcher constructor for assembly, see #141 (by @AndreyAkinshin ) 4124d0 Catch InvalidOperationException in ClassicBuilder (by @AndreyAkinshin ) 9c8513 Cleanup benchmark folders (by default!), fixes #156 (by @adamsitnik ) d0179f merge KeepBenchmarkFiles and allow fluent api usage, #156 (by @adamsitnik ) b8130a Readd an ability to define and to use custom Toolchain, fixes #140 (by @adamsitnik ) 8a263b moving KeepBenchmarkFiles merge logic to Add method (by @adamsitnik ) e1e5c7 Sample & documentation for percentiles (by @ig-sinicyn ) 0d4262 Merge commit '00995dfac270ae71e81897348ec379cd97fb01c3' into feature-percentiles (by @ig-sinicyn ) 54b4f0 Merge pull request #164 from ig-sinicyn/feature-percentiles (by @AndreyAkinshin ) f8278c Generic benchmark support, fixes #100, fixes #112 (by @AndreyAkinshin ) c28056 Support Mono+.NET4.6 in CommonExtensions.ToStr. (by @AndreyAkinshin ) 285f77 set dependencies to MSBuild dlls as \"type\": \"build\" to make them implicit dep... (by @adamsitnik ) 42abd1 Merge remote-tracking branch 'refs/remotes/origin/develop' into develop (by @mattwarren ) 030d6c Rename \"GCDiagnoser\" -> \"MemoryDiagnoser\" (by @mattwarren ) 4e96e6 give compilation error instead of warning or exception at runtime (by @adamsitnik ) 0fbe10 Revert \"give compilation error instead of warning or exception at runtime\" (by @adamsitnik ) 19708a Tidy up of the Integration tests (by @mattwarren ) f7b3a4 Thread safe jobs, fixes #171 (by @AndreyAkinshin ) edf293 DisableTestParallelization for Classic integration tests to avoid races (by @adamsitnik ) 89165f moving dll that is required for custom path integration tests out of root folder (by @adamsitnik ) cbaa3b README: Add additional info about RPlotExprter (by @AndreyAkinshin ) 1cc936 The benchmark is improperly testing the Max operation because as all the numb... (by @redknightlois ) 40a1ea Merge pull request #173 from redknightlois/develop (by @AndreyAkinshin ) a9bf3b README: add information about the diagnostics package (by @AndreyAkinshin ) 5191bc Set library version: 0.9.6 (by @AndreyAkinshin ) Contributors (5) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) ig-sinicyn ( @ig-sinicyn ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Milestone: v0.9.6 Date: May 11, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.6 https://www.nuget.org/packages/BenchmarkDotNet/0.9.6-beta https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.9.6 BenchmarkDotNet v0.9.5 Added validators, JitOptimizationsValidator detects all non-optimzied dlls that were referenced #134 Strong naming #101 Add IOrderProvider #107 Putting all the generated artifacts in a separate folder: ./BenchmarkDotNet.Artifacts/results and ./BenchmarkDotNet.Artifacts/bin #94 Printing dotnet cli version for .NET Core and Dnx451, informing user when not installed. Closed #128 Supporting assembly redirects #67 Changed used msbuild version: 12 for .NET 4.5 (VS 2013), 14 for .NET 4.6 (VS 2015). Closed #132 and #137 Switched to new ‘dotnet’ target framework monikers (dotnet5.4 instead of dnxcore50), why dnx452, dnx46, net462 support added Executing single Benchmark for multiple Runtimes also with Diagnoser attached (see #117 ) Misc minor changes Milestone details In the v0.9.5 scope, 13 issues were resolved and 0 pull requests where merged. This release includes 45 commits by 4 contributors. Resolved issues (13) #67 F# requiring assembly binding redirects for FSharp.Core #94 Put all the generated artifacts in a separate folder #101 Strong naming? #107 Specify benchmark method order #122 Reports: Move params columns next to Method column #128 Print dotnet cli version in EnvironmentInfo #129 Improve DnxAndCoreTests #132 [Bug] FileNotFoundException On 0.9.4. #134 [Feature request] Release builds only? #137 Brand new machine with VS 2015 only b0rks #142 [Suggestion] BenchmarkDotNet.Analyzers.IAnalyser - use same spelling for namespace and type? #148 Crash on [Params] with a string value that contains an invalid path char #150 Declaring nested enums and using them as parameter value make incorrectly generated code/ Merged pull requests (0) Commits (45) 2645ef use AutoGenerateBindingRedirects to avoid assembly conflicts, fixes #67 (by @adamsitnik ) 693b21 warn user if dotnet cli is not installed and print it's version in summary, f... (by @adamsitnik ) bfb017 target NET46 to reference msbuild 14 that comes with VS 2015 to make BDN work... (by @adamsitnik ) fceb3c fallback to bat if MSBuild dlls are not found + generate bat when needed (by @adamsitnik ) 49bdf0 restore: generating build script file (now for all runtimes) (by @adamsitnik ) b9b0bc scripts: cleanup -> build -> show failed tests if any ->cleanup, fixes #129 (by @adamsitnik ) ad64d8 Put all the generated artifacts in a separate folder, fixes #94 (by @adamsitnik ) 902de6 F# samples targeting .NET Core +classic F# part reorganization (by @adamsitnik ) b31c0b supported languages: updated readme & integration tests for Visual Basic (by @adamsitnik ) 24ade7 handle missing MSBuild.dll, get latest msbuild in fallback script scenario, s... (by @adamsitnik ) d371de Spelling mistake in errors message (see #139) (by @mattwarren ) c882dd core: dependencies cleanup + getting rid of warnings (by @adamsitnik ) b14e35 Add IOrderProvider, fixes #107 (by @AndreyAkinshin ) c95267 warn user if non-optimized dll is used, fixes #134 (by @adamsitnik ) 5876f5 Strong naming, fixes #101 (by @adamsitnik ) 036168 Analys(z)ers unification, lets use single spelling, fixes #142 (by @adamsitnik ) 2fa5c0 Update README.md (by @JohanLarsson ) 8b8641 Merge pull request #145 from JohanLarsson/master (by @AndreyAkinshin ) 734533 introducing Validators: validate benchmarks before running, return errors in ... (by @adamsitnik ) eaa943 ExecutionValidator: allow users to verify that all their benchmarks are runna... (by @adamsitnik ) e4fa4b support overriding with 'stronger' validators, eliminate duplicates (by @adamsitnik ) 57666a Add column order for SummaryTable, fixes #122 (by @AndreyAkinshin ) 62af92 Minor fixes in README (by @AndreyAkinshin ) 5e6877 updated README (by @adamsitnik ) 1255a4 Initial work on BenchmarkDotNet.Diagnostics.Windows rename (by @mattwarren ) 59ca8c Ensure renamed diagnostics dll is loaded (BenchmarkDotNet.Diagnostics.Windows... (by @mattwarren ) 825193 Added info about Diagnosers (by @mattwarren ) b836c5 Spelling/formatting (by @mattwarren ) 3f74c7 Fixing project.json (after I overwrite previous changes) (by @mattwarren ) c24a78 Merge branch 'develop' of https://github.com/PerfDotNet/BenchmarkDotNet into ... (by @mattwarren ) 8c678f reflecting recent Diagnosers->Diagnostics.Windows changes (by @adamsitnik ) 9bcdca Executing single Benchmark for multiple Runtimes [with Diagnoser attached] #117 (by @adamsitnik ) 4dffdb Switching to new ‘dotnet’ target framework monikers (by @adamsitnik ) 81b1e4 improved Runtimes descriptions + .NET 4.6.2 support (by @adamsitnik ) 8e92e1 dnx452 and dnx46 support (by @adamsitnik ) 06efde Fix in BaselineDiffColumnTest, see also #122 (by @AndreyAkinshin ) f79f83 DEVELOPING.md: use stable version of dotnet cli (by @AndreyAkinshin ) c2206d BenchmarkDotNet/project.json: correct version for System.IO.FileSystem (by @AndreyAkinshin ) 1b650d Support for nested Enums as Params values, fixes #150 (by @adamsitnik ) 76ef44 characters as Params support, including invalid path characters, fixes #148 (by @adamsitnik ) 14e45c Distinct jobs to avoid possible duplication when config is doubled (by @adamsitnik ) 837254 cleanup (by @adamsitnik ) d0cf6b added NETCore.Platforms dependency to make dotnet cli restore our Core projects (by @adamsitnik ) f7a20e replacing the chars that are invalid for file names, not only paths #148 (by @adamsitnik ) e31872 Set library version: 0.9.5 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Johan Larsson ( @JohanLarsson ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Milestone: v0.9.5 Date: May 02, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.5 https://www.nuget.org/packages/BenchmarkDotNet/0.9.5-beta BenchmarkDotNet v0.9.4 Improved messages about error in benchmarks, see #104 Natural sort order, see #92 , #95 , #97 Improved double / float / decimal / enum support for Params, see #96 , #105 , #116 Now environment info includes information about HardwareTimerKind and JitModules Added DryConfig Improved export performance, closed #119 , merged #124 Better cmd-line discoverability (see #78 ), e.g. run Benchmark.exe --help and some useful information will be printed Supporting all kinds of references for generated project (exact version, custom paths, GAC, sub-folders, dependent assemblies not copied), closed #41 , #49 , #72 , #123 , merged #125 Friendliness to LinqPad restored, closed #66 , merged #125 Milestone details In the v0.9.4 scope, 13 issues were resolved and 2 pull requests where merged. This release includes 55 commits by 4 contributors. Resolved issues (13) #41 Seems, not supported \"sub-folder\" #49 Dependent assemblies are not copied or added to the project file. #72 Referenced assembly dll-file (directly via file) not referenced in generated Program.csproj #78 Better command line discoverability (assignee: @mattwarren ) #92 Results in the R graphs aren't displayed in a \"Natural Sort Order\" #95 Results should preserve the order of param values definition #96 Implement enums as valid Param for test #97 Params changes an order #104 System.InvalidOperationException: StatSummary: Sequence contains no elements #105 Params Attribute bug with float type #116 Issue when ParamAttribute decorated property is double and current system culture has comma as decimal separator #119 For large benchmarks report exporting is very, very slow and has a massive Gen2 heap #123 Can not run benchmark that references custom framework library (like WindowsBase) Merged pull requests (2) #124 Faster export (by @adamsitnik ) #125 supporting all kinds of references for generated project (by @adamsitnik ) Commits (55) 74789d Sort results by Parameter, in a Natural Sort Order (by @mattwarren ) fec115 ParameterComparer refacotring (by @AndreyAkinshin ) 9d3856 Add information about JIT modules in EnvironmentHelper (by @AndreyAkinshin ) 7667ee Adding TraceEvent library for parsing ETW Events (by @mattwarren ) ae71f2 More work on the GC/Allocation diagnostics (by @mattwarren ) efa739 Allow diagnosers to be run from cmd line or via [Config(..)] (by @mattwarren ) 633f1c Throw an error when invalid Config(..) options are specified (by @mattwarren ) 04678a Add information about HardwareTimerKind (by @AndreyAkinshin ) 7f3cf0 Fix in GetCorrectTypeNameTest (by @AndreyAkinshin ) d9b890 Fix in HardwareTimerKind (by @AndreyAkinshin ) 416e36 Natural sort order for CsvMeasurementsExporter and plots, Fixed #92 (by @AndreyAkinshin ) dfc54a Ensure we sort the results by Method Name/Description (by @mattwarren ) fa6c62 Changed GCDiagnoser to inspect live ETW event stream instead of recording to ... (by @goldshtn ) d3f7ce Params: float/double/decimal support, Fixed #105 (by @AndreyAkinshin ) 7bce9b Params: enum support, Fixed #96 (by @AndreyAkinshin ) 4890dd Merge pull request #106 from goldshtn/develop (by @mattwarren ) 9072b9 More robust when a benchmark throws an exception (see #104) (by @mattwarren ) 2b9162 Work on #73 - highlighting in the Console output (by @mattwarren ) f62483 Work on #73 - highlighting in the Console output (by @mattwarren ) a639d5 Work on #73 - highlighting in Markdown output (by @mattwarren ) 1457fe Changing [ConfigWithDryJobs] -> [DryConfig] (by @mattwarren ) 396b7d Diagnostics for \"JIT In-lining\" events (by @mattwarren ) 7a1027 Merge remote-tracking branch 'origin/master' into develop (by @adamsitnik ) 6ec7f0 GC Diagnosers: reference to nuget package, unit test for both CLASSIC and DNX (by @adamsitnik ) 9e7059 Proper XML Doc comment for DryConfig attribute (by @mattwarren ) ad6be7 README.md: update (by @AndreyAkinshin ) a4d0b8 Merge branch 'master' into develop (by @adamsitnik ) 71e911 perf: CSV export: less allocations, reusing JobShortInfo (by @adamsitnik ) 409b5e perf: logging with less allocations (by @adamsitnik ) be6bfc perf: simpified LoggerWithPrefix, no need to check for multiple lines because... (by @adamsitnik ) ade8a1 perf: avoid string.Concat and string.PadLeft (by @adamsitnik ) f070eb perf: reuse AllProperties, reduced complexity (by @adamsitnik ) 57c88b perf: deffer export to enable continuous progress updates instead of single l... (by @adamsitnik ) 40071d loggers: final cleanup and fix for doubled new lines for diagnosers (by @adamsitnik ) c46854 supporting all kinds of references for generated project. This closes #49, cl... (by @adamsitnik ) a36e34 Initial work on better cmd line discoverability (part of #78) (by @mattwarren ) 3f0752 Better formatting in the Baseline column (by @mattwarren ) 8ab1a2 More samples (by @mattwarren ) 1981a3 Refactoring of ConfigParser code (part of #78) (by @mattwarren ) 3d1eba Allows \"Exporters\" and \"Analysers\" to be specified via cmd line (part of #78) (by @mattwarren ) 5d195a Allow \"all\" option, i.e. \"exporters=all\" (part of #78) (by @mattwarren ) 2146b8 Added some tests for ConfigParser (by @mattwarren ) 582e08 Merge pull request #124 from PerfDotNet/perf (by @AndreyAkinshin ) 84e67d README: Update team section (by @AndreyAkinshin ) 4d6001 README: add FAQ question (by @AndreyAkinshin ) 43ade3 BenchmarkDotNet.Samples: add #CLASSIC_RELEASE in launchSettings (by @AndreyAkinshin ) e3c2d1 README: some improvements (by @AndreyAkinshin ) c416c4 use the highest used target framework version to avoid framework mismatches +... (by @adamsitnik ) 8a49b3 Merge branch 'develop' into references (by @adamsitnik ) 23b2ea integration tests for complex references scenarios (by @adamsitnik ) ddfa4a classic: specify full name and use newer msbuild dlls to avoid calling extra bat (by @adamsitnik ) 79e8eb code cleanup after LINQPad 4 & 5 verification (by @adamsitnik ) 445137 Merge pull request #125 from PerfDotNet/references (by @AndreyAkinshin ) 4f1e1f Update package description (by @AndreyAkinshin ) 0f5531 Set library version: 0.9.4 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Sasha Goldshtein ( @goldshtn ) Thank you very much! Additional details Milestone: v0.9.4 Date: March 24, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.4 https://www.nuget.org/packages/BenchmarkDotNet/0.9.4-beta BenchmarkDotNet v0.9.3 CoreCLR support (Closed #52 , Merged #113 ) Milestone details In the v0.9.3 scope, 2 issues were resolved and 1 pull requests where merged. This release includes 12 commits by 2 contributors. Resolved issues (2) #52 CoreCLR Compatibility #114 Update NETStandard.Library dependency Merged pull requests (1) #113 Core Clr support (by @adamsitnik ) Commits (12) 5b6460 Core: compilable main project (by @adamsitnik ) cfdde6 Core: compilable samples and tests projects (by @adamsitnik ) ab8b26 Core: new profile for running Samples from VS (by @adamsitnik ) 9e1372 Core: new toolchain implementation with dnx451 code reuse (by @adamsitnik ) de8bcc Core: tests: script to run both dnx and core (by @adamsitnik ) 05d50f Core: dotnet cli supports only x64 now, workaround (by @adamsitnik ) 726c66 Core: executing only supported benchmarks (x86 and Legacy Jit are not supported) (by @adamsitnik ) de3371 Core: Dnx and Core as Runtimes, removed Toolchain configuration (by @adamsitnik ) e7a3a8 Core: generating path in Linux-friendly way ;) (by @adamsitnik ) fede7c Core: notify user when the process.Priority can not be set and continue execu... (by @adamsitnik ) d59827 Merge pull request #113 from PerfDotNet/coreclr (by @AndreyAkinshin ) 939891 Set library version: 0.9.3 (by @AndreyAkinshin ) Contributors (2) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Milestone: v0.9.3 Date: March 13, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.3 https://www.nuget.org/packages/BenchmarkDotNet/0.9.3-beta BenchmarkDotNet v0.9.2 Dnx451 support (Closed #51 , Merged #87 ) Milestone details In the v0.9.2 scope, 1 issues were resolved and 1 pull requests where merged. This release includes 48 commits by 2 contributors. Resolved issues (1) #51 DNX Compatibility Merged pull requests (1) #87 DNX451 support (by @adamsitnik ) Commits (48) f25427 road to DNX: part I: moving from csproj to xproj (by @adamsitnik ) 2fe5cf road to DNX: part II: added dnx451 target (DNX SDK running on .Net 4.5.1) (by @adamsitnik ) 6b4400 road to DNX: part II: the moment when Unit Test has shown up in VS! (by @adamsitnik ) c97792 road to DNX: part II: able to debug Samples (by @adamsitnik ) f901d6 road to DNX: part II: the moment when Integration Test has shown up in VS! (by @adamsitnik ) f46296 road to DNX: part II: including *.txt files as resources, excluding auto-gene... (by @adamsitnik ) cfc1b6 updated gitignore to exclude files created during integration tests run (by @adamsitnik ) 60b343 Road to DNX: benchmark execution : building project.json instead of .csproj (by @adamsitnik ) 0d41cb Road to DNX: benchmark execution : compiling project.json with Microsoft.Dnx.... (by @adamsitnik ) 31bc59 updated versions in .json files after sync with master, (by @adamsitnik ) c8e826 road to DNX: compilation: adding MetadataReferences for dlls required to comp... (by @adamsitnik ) 2ebe6c road to DNX: compilation: adding executing assembly as dependency to project.... (by @adamsitnik ) 76a74e Road to DNX: removing dependencies to BenchmarkDotNet.Diagnostics for DNX451 ... (by @adamsitnik ) 40419a road to DNX: handling \"nuget-like\" package versions that can contain text (as... (by @adamsitnik ) 8f06a7 it should have never happened but it does when debugging: DirectoryNotFoundEx... (by @adamsitnik ) 7c2a96 Road to DNX: reusing MS dnu to restore and build. Simple solution that just w... (by @adamsitnik ) e51d4d Road to DNX: alternative to MS dnu. reuses nuget and roslyn but as for now it... (by @adamsitnik ) ada7cb Road to DNX: replacing dnu build with dnx run. +putting files in a folder tha... (by @adamsitnik ) 18e969 road to DNX: referencing the right thing, bitness the same as hosting process (by @adamsitnik ) 8e870c road to DNX: setting the compiler EXPLICIT to finally make it WORKING (at lea... (by @adamsitnik ) 466d13 Road to DNX: removing failed PoC,dependencies cleanup, added some comments (by @adamsitnik ) 5b3675 Road to DNX: removing dependencies to MSBuild for DNX target, some project.js... (by @adamsitnik ) 3e65e8 road to DNU: reference project during development, but package when released (by @adamsitnik ) 617a61 road to DNX: logging output from dnu restore/dnx run + default timeout (by @adamsitnik ) 075cdc road to DNX: new value for toolchain enum: DNX451 (by @adamsitnik ) bd3fea road to DNX: being able to debug NET40 from VS (by @adamsitnik ) da5a9a road to DNX: copying all files that used to be copied in \".csproj times\" (by @adamsitnik ) 5d8717 road to DNX: new debug profile with DNX trace mode ON, use when troubleshooti... (by @adamsitnik ) 8272f6 road to DNX: fixing tests (by @adamsitnik ) 96bcf8 road to DNX: make sure that our child process get the right priority and affi... (by @adamsitnik ) cd0ba8 road to DNX: respecting specified benchmark processor architecture (by @adamsitnik ) b1eb28 road to DNX: added all output files from integration tests to .gitignore (by @adamsitnik ) aa62d1 fix for 4.0 (was passing arguments in wrong order) (by @adamsitnik ) 0c1251 merge (by @adamsitnik ) 46cd5e F# support, limited to existing tools possibilities (can not run from VS, onl... (by @adamsitnik ) 74020c Merge remote-tracking branch 'upstream/master' (by @adamsitnik ) 3402f0 replacing dnx with dotnet cli (by @adamsitnik ) d634f4 road to DNX: final cleanup (by @adamsitnik ) 24cd3a removing project.lock.json files (by @adamsitnik ) 80becb removing all .csproj & packages.config file + keeping only single .sln file (by @adamsitnik ) 9633d5 removing nuspec (now auto-generated by VS based on project.json) + version in... (by @adamsitnik ) 617d82 running Classic Framework tests from console + minor cleanup (by @adamsitnik ) fc9d98 DNX: running once compiled assembly directly without dotnet cli (perf+abble t... (by @adamsitnik ) 8adad8 dnx: Diagnosers support. Currently only these which do not need umanaged libs... (by @adamsitnik ) 34c3c9 DNX: changed folder of the auto-generated files to benchmark-specific + samples (by @adamsitnik ) 9cf009 DNX: description for development (by @adamsitnik ) 43af33 update to dotnet cli changes: output path and exit codes , now we set output... (by @adamsitnik ) f59d3e Merge pull request #87 from adamsitnik/master (by @AndreyAkinshin ) Contributors (2) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Milestone: v0.9.2 Date: March 5, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.2 BenchmarkDotNet v0.9.1 Milestone details In the v0.9.1 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 5 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (5) a0cfba use benchmarkSwitcher and 0.9.0 api features (by @cloudRoutine ) a88fc0 Merge pull request #89 from cloudRoutine/patch-1 (by @AndreyAkinshin ) 99d7c5 Improved ReflectionExtensions.GetCorrectTypeName; Fixed #90 (by @AndreyAkinshin ) 770510 Improved work with idle method that returns a value type; Fixed #70 (by @AndreyAkinshin ) 3c4410 Set library version: 0.9.1 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Jared Hester ( @cloudRoutine ) Thank you very much! Additional details Date: February 10, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.1 BenchmarkDotNet v0.9.0 New API Autodetermination of amount iteration for warmup/target idle/main iterations, duration of iteration, amount of CLR launches. Milestone details In the v0.9.0 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 34 commits by 4 contributors. Resolved issues (0) Merged pull requests (0) Commits (34) 71369d Add benchmarks to tests different ways of accessing arrays. Copypasted from h... (by @alexandrnikitin ) 9a5930 Merge pull request #79 from alexandrnikitin/samples-array-access (by @AndreyAkinshin ) 1b8cf9 MathSummaryTests: fix output (by @AndreyAkinshin ) 92503b BenchmarkSwitcher improvements (by @AndreyAkinshin ) ebaeea Big API refactoring (by @AndreyAkinshin ) f149cb Big API refactoring, Part 2 (by @AndreyAkinshin ) 380d9a Big API refactoring, Part 3 (by @AndreyAkinshin ) 6cd2ce Big API refactoring, Part 4 (by @AndreyAkinshin ) 1665d8 Big API refactoring, Part 5 (by @AndreyAkinshin ) 140312 A better way of running a F# integration test (by @mattwarren ) 8e58ab Big API refactoring, Part 6 (by @AndreyAkinshin ) 9ec71b Add html export, resolved #75 (by @alinasmirnova ) 7ae4ed Merge pull request #86 from alinasmirnova/refactoring (by @AndreyAkinshin ) bfbc80 Big API refactoring, Part 7 (by @AndreyAkinshin ) 256ed4 Re-design of the IDiagnoser API (by @mattwarren ) f4bad8 Initial work on ETW Diagnostic Providers (by @mattwarren ) da2e3f Big API refactoring, Part 8 (by @AndreyAkinshin ) 5df553 Big API refactoring, Part 9 (by @AndreyAkinshin ) 120b7c Big API refactoring, Part 10 (by @AndreyAkinshin ) e61425 Big API refactoring, Part 11 (by @AndreyAkinshin ) 171ba0 Big API refactoring, Part 12 (by @AndreyAkinshin ) 854633 Big API refactoring, Part 13 (by @AndreyAkinshin ) caafa9 Fix a bug in Templates/BenchmarkProgram.txt (by @AndreyAkinshin ) 568c44 Add BenchmarkDotNet.Samples.FSharp (by @AndreyAkinshin ) 2fa773 Fix a bug in Generator (by @AndreyAkinshin ) 30e855 Update README (by @AndreyAkinshin ) 1164ef Update README (by @AndreyAkinshin ) 9c357c Improved plots for benchmarks with Params (by @AndreyAkinshin ) ef41f6 Fix a bug in ClassicBuilder (by @AndreyAkinshin ) 02babc Add BaselineDiffColumn.Scaled (by @AndreyAkinshin ) 4388c8 Remove construction with description in BenchmarkAttribute (by @AndreyAkinshin ) c9c25f Update README (by @AndreyAkinshin ) 1cef82 RPlotExporter improvements (by @AndreyAkinshin ) 173abf Set library version: 0.9.0 (by @AndreyAkinshin ) Contributors (4) Alexandr Nikitin ( @alexandrnikitin ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Date: February 9, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.9.0 BenchmarkDotNet v0.8.2 Changes in the Summary table Summary table now supports ResultExtenders that can add new column to the table Now we use StandardError (aka Error ) as the main accuracy metric Columns op/s , StdDev are disabled by default (you can add it via ResultExtenders) Statistic improvements, now you have detailed statistic in the console log like follows: Mean = 118.5298 us, StdError = 1.2863 us (N = 30, StdDev = 7.0454 us) Min = 109.1602 us, Median = 117.1794 us, Max = 132.5764 us IQR = 10.1244 us, LowerFence = 98.0834 us, UpperFence = 138.5810 us ConfidenceInterval = [116.0086 us; 121.0510 us] (CI 95%) Added the Baseline feature, see #64 Export improvements, now you have files <BenchmarkName>-report-github.md , <BenchmarkName>-report-stackoverflow.md for easy publishing results on GitHub and StackOverflow. Basic plotting. Added new BenchmarkRPlotExporter that creates BuildPlots.R in the bin directory. It is an R script that generates boxplot and barplot for your benchmarks (you should have installed R with defined R_HOME environment variable) Updated environment info Added Stopwatch Frequency and Resolution Split common benchmark properties (like Mode , Platform , Runtime ) in several lines (3 properties per line) Log improvements: add total time, statistics, list of exported files Bug fixes Milestone details In the v0.8.2 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 34 commits by 3 contributors. Resolved issues (0) Merged pull requests (0) Commits (34) de0140 Add BenchmarkEnvironmentAnalyser (by @AndreyAkinshin ) 9ea78f Improved confidence intervals (by @AndreyAkinshin ) b8d4b6 Rename: PreWarmup -> Pilot (by @AndreyAkinshin ) 988efc Reporting: change StandardDeviation to StandardError (by @AndreyAkinshin ) 4da39d Big refactoring (by @AndreyAkinshin ) 6a0caa Add BenchmarkRPlotExporter (by @AndreyAkinshin ) 3a6ea4 Allow plugins to extend the Results Table (by @mattwarren ) 7a7991 Create a \"Result Extender\" plug-in for #64 (by @mattwarren ) 70ea89 Integration tests for #64 (by @mattwarren ) a2d0ec Separate class for string extensions. (by @alinasmirnova ) 5d6c78 Multiline prefix string extension. (by @alinasmirnova ) bdd84e New logger type for adding prefix. StackOverflow markdowns. (by @alinasmirnova ) ba9ec5 Move ExportToFile to ExporterBase. Add file suffix. (by @alinasmirnova ) 38cd8c GitHub markdown support. (by @alinasmirnova ) 732420 Markdown readme edits (by @alinasmirnova ) 541eef Merge pull request #71 from alinasmirnova/refactoring (by @AndreyAkinshin ) c53618 Merge remote-tracking branch 'refs/remotes/origin/develop' into refactoring (by @AndreyAkinshin ) e3f420 Samples: add Intro_08_Baseline (by @AndreyAkinshin ) 145b78 README: add NuGet badge (by @AndreyAkinshin ) b0e108 Minor fixes (by @AndreyAkinshin ) 565c25 Update README (by @AndreyAkinshin ) 045e2a Add BenchmarkStatResultExtender (by @AndreyAkinshin ) 20c6d2 Minor fixes (by @AndreyAkinshin ) f80edc Update README (by @AndreyAkinshin ) 3d2309 README: links to wiki (by @AndreyAkinshin ) d60d0f Fix bug in TimeUnit (by @AndreyAkinshin ) 034961 Unit tests for TimeUnit (by @AndreyAkinshin ) f2c6f1 Logs: add total time (by @AndreyAkinshin ) 140dec Merge branch 'refs/heads/refactoring' into develop (by @AndreyAkinshin ) 9e16e8 Ensure that the DeltaResultExtender doesn't throw (by @mattwarren ) 60f7c9 Merge branch 'develop' of https://github.com/PerfDotNet/BenchmarkDotNet into ... (by @mattwarren ) 77b24b Rollback of bad changes from the last merge (by @AndreyAkinshin ) 3df71a More robust way of wiring up BenchmarkBaselineDeltaResultExtender (by @mattwarren ) 8e5a0e Set library version: 0.8.2 (by @AndreyAkinshin ) Contributors (3) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! Additional details Date: January 19, 2016 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.8.2 BenchmarkDotNet v0.8.1 Milestone details In the v0.8.1 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 12 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (12) 79ee93 README.md: small fixes (by @AndreyAkinshin ) a3e2dc Adding missing CLRMD binary dependencies (by @mattwarren ) 7492c1 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @mattwarren ) ddae06 Lazy-load the Diagnostic plug-ins, fixes #63 (by @mattwarren ) 5df0df More robust version of the Diagnostic Library (see #53) (by @mattwarren ) 9f3ba0 Ensure that non-void SingleRun Benchmarks work (by @mattwarren ) de5bca Allow Benchmarks that use Inner classes (see #55) (by @mattwarren ) 5d000f Ensure we can run Benchmarks produced by F# (see #59) (by @mattwarren ) 8b0563 Added missing binary dependency (part of #59) (by @mattwarren ) 60047e Fixing #45 (by @mattwarren ) 3bede9 Implemented Ctrl-C handling in the Console (Fixes #50) (by @mattwarren ) 719391 Set library version: 0.8.1 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Thank you very much! BenchmarkDotNet v0.8.0 Milestone details In the v0.8.0 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 67 commits by 5 contributors. Resolved issues (0) Merged pull requests (0) Commits (67) 042631 Atomics sample (by @redknightlois ) 6ce693 Merge pull request #35 from redknightlois/master (by @AndreyAkinshin ) e73ce4 Update Intro_03_SingleRun (by @AndreyAkinshin ) add75c Samples: add Js_AsVsCast (by @AndreyAkinshin ) 1d4653 Samples: updates Js_AsVsCast (by @AndreyAkinshin ) 73f48f BenchmarkRuntime support (by @AndreyAkinshin ) 8e9fec BenchmarkRuntime: fix a bug (by @AndreyAkinshin ) 0d8a86 Added RotateBits (will be interested when https://github.com/dotnet/coreclr/i.. . (by @redknightlois ) 724970 Added and special case which we know it must not be optimized at all (for com... (by @redknightlois ) 30ba93 Merge pull request #43 from redknightlois/master (by @AndreyAkinshin ) a2338c Big refactoring (by @AndreyAkinshin ) dc8d02 Make the \"Getting Started\" guide read better (by @mattwarren ) 9883ca Update README.md (by @mattwarren ) 3cd76b Update README.md (by @mattwarren ) 6a3d00 Update README.md (by @mattwarren ) 7de832 Better way of generating Benchmark competition list (by @mattwarren ) 10ded0 Add Jit_GenericsMethod (by @AndreyAkinshin ) e5538b Fix for #42 (make benchmarks work in LINQPad) (by @mattwarren ) 873450 Make logging robust when strings contain '{' or '} (by @mattwarren ) 2ee55a Create a batch file that builds the benchmark (by @mattwarren ) d14b18 Adding \"Advanced Features\" section (by @mattwarren ) deb1a9 Sample benchmark for different types of loops (by @mattwarren ) 26e7b0 Move sample to correct namespace (by @mattwarren ) 505711 Grouping parameter results together (fixes #36) (by @mattwarren ) 1ee786 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @mattwarren ) 496ae1 Add support for benchmarking methods of generic classes (#44) (by @mattwarren ) ad12e1 Return of the Params (by @AndreyAkinshin ) f80613 Little cleanup (by @AndreyAkinshin ) 52a076 Little refactoring (Flow -> Toolchain) (by @AndreyAkinshin ) 2f383e Moar samples (by @mattwarren ) 30b162 Initial work on code for asm/IL viewing (by @mattwarren ) 6a8873 Initial support for printing Assembly code (by @mattwarren ) 8cd841 Print diagnostic info (with flag \"-printDiagnostics\") (by @mattwarren ) 236043 Adding missing CLRMD dependancies (by @mattwarren ) 58b7a3 Print the method when we have a \"call\" asm instruction (by @mattwarren ) 1dae2b Change Jit_GenericsMethod benchmark to reproduce on x64 both Legacy & RuyJit (by @alexandrnikitin ) 6ae157 Merge pull request #47 from alexandrnikitin/samples-Jit_GenericsMethod-x64repro (by @AndreyAkinshin ) c39b7c README: add gitter link (by @AndreyAkinshin ) b0768e Ensure we \"close\" the code section in the markdown we generate (by @mattwarren ) 6c9ae7 Merge branch 'master' of https://github.com/PerfDotNet/BenchmarkDotNet (by @mattwarren ) 9ed66d Show how you can write \"Performance\" Unit Tests (by @mattwarren ) 7c9c6d Helper methods for Performance Unit Tests (by @mattwarren ) 3a2c75 Make Perf Unit Test more robust!! (by @mattwarren ) d1ddd3 Ensure the Description is used when sorting (if available) (by @mattwarren ) 27d662 Moving assembly viewer into BenchmarkDotNet.Diagnostics (by @mattwarren ) 1ef961 Load BenchmarkDotNet.Diagnostics dynamically (by @mattwarren ) 7eb70a New plugin system (by @AndreyAkinshin ) 2114d7 Fix typos in API (by @AndreyAkinshin ) e0a488 Fix in PerformanceUnitTest (by @AndreyAkinshin ) 02cddd BenchmarkDotNet.Tests: upgrade xunit to 2.1 (by @AndreyAkinshin ) 3d8ff2 IntegrationTests: replace GetTestOutput by AccumulationLogger (by @AndreyAkinshin ) 5ebf69 IntegrationTests: upgrade xunit to 2.1 (by @AndreyAkinshin ) 280834 Diagnostic refactoring (by @AndreyAkinshin ) 79ee42 Custom toolchains (by @AndreyAkinshin ) 527df6 Analysers (by @AndreyAkinshin ) 3d8199 Fix in BuildTable (by @AndreyAkinshin ) 699588 Tidy up of Source Diagnoser code (part of #53) (by @mattwarren ) 5ab029 Better way of getting the called method name (part of #53) (by @mattwarren ) 37f468 Integration test for Source Diagnostics (see #53) (by @mattwarren ) da0093 Spelling mistakes and remove unused using stmts (by @mattwarren ) fbf409 Fix typo in README (by @ForNeVeR ) 4895c6 Merge pull request #61 from ForNeVeR/patch-1 (by @AndreyAkinshin ) dd5f1f Rename: exec -> execute (by @AndreyAkinshin ) 6826a9 BenchmarkSwitcher: update the promt message (by @AndreyAkinshin ) f2a63f Update README.md (by @AndreyAkinshin ) 54cfdc Samples/Program.cs: small fix (by @AndreyAkinshin ) a927e9 Set library version: 0.8.0 (by @AndreyAkinshin ) Contributors (5) Alexandr Nikitin ( @alexandrnikitin ) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) Friedrich von Never ( @ForNeVeR ) Matt Warren ( @mattwarren ) Thank you very much! BenchmarkDotNet v0.7.8 Milestone details In the v0.7.8 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 36 commits by 5 contributors. Resolved issues (0) Merged pull requests (0) Commits (36) 6ede76 Reporting: better number formats for ops/sec. (by @ppanyukov ) 118bc9 Merge pull request #17 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) 994cbc Markdown friendly reporting (by @AndreyAkinshin ) 91bbb4 Reporting: use fixed precision for AvrTime and StdDev. (by @ppanyukov ) e9b8fe Merge pull request #18 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) 121c3d Reporting: uniform time units across all benchmarks. (by @ppanyukov ) 1cb520 Merge pull request #21 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) a4f53e Reporting: refactor use of BenchmarkTimeSpan. (by @ppanyukov ) 7fbf63 Merge pull request #24 from ppanyukov/feature/report-num-align (by @AndreyAkinshin ) c8c893 message for Obsolete warning which tells what to use now + updated README (by @adamsitnik ) b48756 Merge pull request #26 from adamsitnik/master (by @AndreyAkinshin ) 36f849 Add Jit_RegistersVsStack (by @AndreyAkinshin ) 32cafc Allow a [Setup] method to be used on Benchmarks (by @mattwarren ) 8a14a8 Missed out of last commit (by @mattwarren ) 0103b7 Integration tests for [Setup] method closes #23, closes #7 (by @mattwarren ) 1e7c25 Display MSBuild errors in the console output, see #22 (by @mattwarren ) 876303 Added new benchmark for Stopwatch v DateTime (by @mattwarren ) e5f748 New ReportExporter system (by @AndreyAkinshin ) e0fdbc Add BenchmarkDotNet.Visualizer (by @AndreyAkinshin ) 954d08 Fix bug in op/s reporting (by @mattwarren ) d9dcf4 Tidying up BenchmarkDotNet.Samples layout see #29 (by @mattwarren ) 7abb1b Making Visualizer samples point to the new location (see #29) (by @mattwarren ) 96d5b9 Speed up the integration tests, closes #23 (by @mattwarren ) 2568a1 Initial work on Params attribute (see #8) (by @mattwarren ) 47fad8 Ensure Benchmarks with Params show up properly in Reports (by @mattwarren ) 36e060 Integration tests and sample for Params attribute (by @mattwarren ) 76ad88 Fixing some spelling mistakes (by @mattwarren ) 81e6eb Update BenchmarkProgram.txt (by @mattwarren ) 4008cf Merge pull request #32 from PerfDotNet/mattwarren-exception-handling (by @mattwarren ) 9e893e Statistic improvements (by @AndreyAkinshin ) 9ce9f9 Ensure that Params attribute can work with static fields/properties (by @mattwarren ) 7c3782 Update README.md (by @AndreyAkinshin ) 5a1783 Update Array_HeapAllocVsStackAlloc.cs (by @mattwarren ) 50ff16 Allow just number param in RunCompetitions. (by @vkkoshelev ) 04c306 Merge pull request #34 from vedun-z/master (by @AndreyAkinshin ) a630dc Set library version: 0.7.8 (by @AndreyAkinshin ) Contributors (5) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Matt Warren ( @mattwarren ) Philip Panyukov ( @ppanyukov ) vkkoshelev ( @vkkoshelev ) Thank you very much! BenchmarkDotNet v0.7.7 Milestone details In the v0.7.7 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 14 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (14) c94525 Add Cpu_BranchPerdictor (by @AndreyAkinshin ) 44cbb0 Add Algo_Md5VsSha256 (by @AndreyAkinshin ) 4d789c Most significant bit and bool to int conversions. (by @redknightlois ) 09446b Updated to avoid using an array. (by @redknightlois ) b16153 Fixed a bug where converting a bool to int instead to byte (which is the nati... (by @redknightlois ) 52acca Merge pull request #15 from redknightlois/master (by @AndreyAkinshin ) 66cce4 Fix troubles with inlining (by @AndreyAkinshin ) a8e641 Fixes in Jit_BoolToInt (by @AndreyAkinshin ) cfbb88 Rename task parameters: Current -> Host (by @AndreyAkinshin ) 209b4f Rename Task to BenchmarkTask, fix #9 (by @AndreyAkinshin ) 74be9d Fix typos (by @AndreyAkinshin ) adc6c2 Fix Intro_01_MethodTasks (by @AndreyAkinshin ) 438042 Add BenchmarkRunner.RunUrl (by @AndreyAkinshin ) 72d606 Set library version: 0.7.7 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) Thank you very much! BenchmarkDotNet v0.7.6 Milestone details In the v0.7.6 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 9 commits by 5 contributors. Resolved issues (0) Merged pull requests (0) Commits (9) 8e9942 Update README.md (by @NN--- ) 51ef26 Merge pull request #11 from NN---/patch-2 (by @AndreyAkinshin ) db8791 Fixed link to samples. (by @redknightlois ) 14ddf4 Merge pull request #12 from redknightlois/patch-1 (by @mattwarren ) d70b4c Accessibility and genericness checks added for benchmark methods. (by @krk ) 04ce12 Benchmark methods defined in nested classes are supported. (by @krk ) a5caba Improvements in log parser (by @AndreyAkinshin ) d750b9 Merge pull request #13 from krk/master (by @AndreyAkinshin ) eab4bd Set library version: 0.7.6 (by @AndreyAkinshin ) Contributors (5) Andrey Akinshin ( @AndreyAkinshin ) Federico Andres Lois ( @redknightlois ) Kerem ( @krk ) Matt Warren ( @mattwarren ) NN ( @NN--- ) Thank you very much! BenchmarkDotNet v0.7.5 Milestone details In the v0.7.5 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 4 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (4) 957a01 Update samples (by @AndreyAkinshin ) 118e2f Add the Cpu_Ilp_RyuJit sample (by @AndreyAkinshin ) b7e564 Update copyrights (by @AndreyAkinshin ) b6cce3 v0.7.5: Improved project building (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! BenchmarkDotNet v0.7.4 Milestone details In the v0.7.4 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 2 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (2) c5e924 Update README (by @AndreyAkinshin ) 641c95 v0.7.4: New benchmark Invoker, new samples, refactoring, minor fixes (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! BenchmarkDotNet v0.7.3 Milestone details In the v0.7.3 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 1 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (1) 42e13b v0.7.3: Small bug fixes (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! BenchmarkDotNet v0.7.2 Milestone details In the v0.7.2 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 2 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (2) 19f1e2 Add templates for BenchmarkProjectGenerator (by @AndreyAkinshin ) 043c04 v0.7.2: BenchmarkMode.Throughput, OperationCountAttribute, minor improvements... (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! BenchmarkDotNet v0.7.1 Milestone details In the v0.7.1 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 4 commits by 1 contributors. Resolved issues (0) Merged pull requests (0) Commits (4) b2bc76 A bugfix (MSBuild fail case) (by @AndreyAkinshin ) ce7f58 Improved SingleRun (by @AndreyAkinshin ) 295cc2 Current values for JitVersion, Platform, and Framework (by @AndreyAkinshin ) 744eba Set library version: 0.7.1 (by @AndreyAkinshin ) Contributors (1) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! BenchmarkDotNet v0.7.0 Milestone details In the v0.7.0 scope, 0 issues were resolved and 0 pull requests where merged. This release includes 59 commits by 2 contributors. Resolved issues (0) Merged pull requests (0) Commits (59) 7f1c49 Add ShiftVsMultiplyBenchmark (by @AndreyAkinshin ) 21298c Renaming (by @AndreyAkinshin ) 86aada Add ReverseSortProgram (by @AndreyAkinshin ) 5830ef Add MakeRefVsBoxingProgram (by @AndreyAkinshin ) fe121e Automatic adjustment WarmUpIterationCount (by @AndreyAkinshin ) d3dd9c Improved console output (by @AndreyAkinshin ) 5e5df2 Update IncrementProgram (by @AndreyAkinshin ) dca61d Change Average statistic to Median (by @AndreyAkinshin ) 9d57e6 Update README.md (by @AndreyAkinshin ) 7cca77 StaticFieldProgram -> ArrayIterationProgram (by @AndreyAkinshin ) e02906 Add ForeachArray and ForeachList programs (by @AndreyAkinshin ) 8e3f6e Add StandardDeviation calculation (by @AndreyAkinshin ) 8b0c50 Add BenchmarkSettings singleton with DetailedMode property (by @AndreyAkinshin ) eae5bf Add useful arguments for console application (by @AndreyAkinshin ) 6f15f0 Update README.md (by @AndreyAkinshin ) c1c44b Add StackFrameProgram (by @AndreyAkinshin ) bbc6e7 Update StackFrameProgram (by @AndreyAkinshin ) 5f8121 Set version number and add NuGet package metadata (by @AndreyAkinshin ) 9425cb Add ProcessorAffinity to settings (by @AndreyAkinshin ) bcc037 Add single result benchmark mode (--single) and disable warmup mode (--disabl... (by @AndreyAkinshin ) 4ce0b4 Add build.bat for Benchmarks project (by @AndreyAkinshin ) 69fbc7 Add --output-file option (by @AndreyAkinshin ) df2092 Update build system (by @AndreyAkinshin ) addd25 Update run.bat (by @AndreyAkinshin ) b5c154 Add Mono support to run.bat (by @AndreyAkinshin ) a4b42a Update build system (by @AndreyAkinshin ) 65bbf7 Benchmarks: add support of selecting target program via number (by @AndreyAkinshin ) d4317b Add MedianTicks to CompetitionResult report in DetailedMode fixed #1 (by @AndreyAkinshin ) 3999e0 Update README.md (by @AndreyAkinshin ) bd7452 Update EnvironmentTickCount hack (by @AndreyAkinshin ) cf7aa6 Add CultureInfo setting (by @AndreyAkinshin ) 16bb5e Set BenchmarkDotNet version: 0.5.1 (by @AndreyAkinshin ) 07cf52 Add CompetitionBase: now competitions can be created in form of unit tests. (by @mijay ) 284b78 Full refactoring (by @AndreyAkinshin ) 2943d9 Add BenchmarkDotNet.Samples project (by @AndreyAkinshin ) 572483 Merge branch 'dev' (by @AndreyAkinshin ) 324d99 Remove ReflectionVsExpressionCompetition (by @AndreyAkinshin ) ce5c67 Add CacheConsiousBinarySearchCompetition (by @AndreyAkinshin ) ba8725 Add SelectVsConvertAllCompetition (by @AndreyAkinshin ) 60b002 Set BenchmarkDotNet version: 0.5.2 (by @AndreyAkinshin ) 3a4213 Fix in GetBenchmarkMethodClean (by @AndreyAkinshin ) 73ee56 Add BitCountCompetition (by @AndreyAkinshin ) 72836a Add missed Clean in BenchmarkCompetitionTask, Fixed #4 (by @AndreyAkinshin ) 1258cb Big refactoring (by @AndreyAkinshin ) 03bf14 Attributes renaming (by @AndreyAkinshin ) 98a3cd Improved environment info (by @AndreyAkinshin ) fe6e4e New benchmarks: ArrayBoundEliminationCompetition, InstructionLevelParallelism... (by @AndreyAkinshin ) c89054 Fix in EnvironmentHelper.GetConfiguration() (by @AndreyAkinshin ) 90d260 Add icon (by @AndreyAkinshin ) beb681 Improved WarmUp (by @AndreyAkinshin ) 7a63b6 Big refactoring (by @AndreyAkinshin ) 8197e5 Update samples (by @AndreyAkinshin ) c8d348 Add BenchmarkProperties (by @AndreyAkinshin ) 97c73a Update Cpu_InstructionLevelParallelism (by @AndreyAkinshin ) 957714 Small fixes (by @AndreyAkinshin ) fdf4dd Update README (by @AndreyAkinshin ) 8ac1ab Merge branch 'big-refactoring' (by @AndreyAkinshin ) 18a256 Small fixes (by @AndreyAkinshin ) 20df13 NuGet version: 0.7.0 (by @AndreyAkinshin ) Contributors (2) Andrey Akinshin ( @AndreyAkinshin ) Dmitry Kononchuk ( @mijay ) Thank you very much!"
  },
  "changelog/index.html": {
    "href": "changelog/index.html",
    "title": "ChangeLog | BenchmarkDotNet",
    "keywords": "ChangeLog BenchmarkDotNet v0.11.0 BenchmarkDotNet v0.10.14 BenchmarkDotNet v0.10.13 BenchmarkDotNet v0.10.12 BenchmarkDotNet v0.10.11 BenchmarkDotNet v0.10.10 BenchmarkDotNet v0.10.9 BenchmarkDotNet v0.10.8 BenchmarkDotNet v0.10.7 BenchmarkDotNet v0.10.6 BenchmarkDotNet v0.10.5 BenchmarkDotNet v0.10.4 BenchmarkDotNet v0.10.3 BenchmarkDotNet v0.10.2 BenchmarkDotNet v0.10.1 BenchmarkDotNet v0.10.0 BenchmarkDotNet v0.9.9 BenchmarkDotNet v0.9.8 BenchmarkDotNet v0.9.7 BenchmarkDotNet v0.9.6 BenchmarkDotNet v0.9.5 BenchmarkDotNet v0.9.4 BenchmarkDotNet v0.9.3 BenchmarkDotNet v0.9.2 BenchmarkDotNet v0.9.1 BenchmarkDotNet v0.9.0 BenchmarkDotNet v0.8.2 BenchmarkDotNet v0.8.1 BenchmarkDotNet v0.8.0 BenchmarkDotNet v0.7.8 BenchmarkDotNet v0.7.7 BenchmarkDotNet v0.7.6 BenchmarkDotNet v0.7.5 BenchmarkDotNet v0.7.4 BenchmarkDotNet v0.7.3 BenchmarkDotNet v0.7.2 BenchmarkDotNet v0.7.1 BenchmarkDotNet v0.7.0 Full ChangeLog"
  },
  "changelog/v0.10.0.html": {
    "href": "changelog/v0.10.0.html",
    "title": "BenchmarkDotNet v0.10.0 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.0 Now BenchmarkDotNet is a part of .NET Foundation Job and Column API refactoring (see new documentation) Measurement engine improvements Horology enhancement (see TimeInterval and Frequency ) Introduced RankColumn which is based on WelchTTest (see 157aabc3 ) JsonExporters refactoring (see the Exporters/Json section in the documentation) Renamed JsonExporters classed and attributes JsonExporters with custom settings JsonExporters now includes information about the target type namespace (see #246 ). Add JetBrains.Annotations (see #253 ) RFC 4180 support in CSV exporters (see #241 ) Many bugfixes Milestone details In the v0.10.0 scope, 19 issues were resolved and 7 pull requests where merged. This release includes 85 commits by 7 contributors. Resolved issues (19) #30 Better information when we haven't got a valid measurement #121 Strange # of \"Launches\" chosen with Count.Auto #154 PathTooLong exception on custom config #185 Report if difference between 2 benchmarks is statistically significance #241 .csv results output does not play well with Excel or Google Sheets #244 DefaultConfig StatisticColumn values #246 No namespace information? #265 Add ability to specify that benchmark requires STAThread #266 Don't assume that TargetType has reference to BenchmarkDotNet (assignee: @adamsitnik ) #268 Print runtime of child processes in summary #271 Params attribute does not handle nullable types #272 [Setup] error when doing inheritance #276 System.EntryPointNotFoundException #280 Cannot run on OSX / Mono (System.Xml.XmlException: Root element is missing) #281 Results are exported twice for single run #288 IdleWarmup running off forever #291 [Bug] Incorrect results for targetCount:Auto #292 Support for Beta versions #296 [BUG] NRE in OutliersAnalyser Merged pull requests (7) #253 Mark [Benchmark] as implying implicit use (by @roji ) #267 Make shipped assemblies have CLSCompliant(true) applied (by @lahma ) #277 Changed diagnosers flow, reduced heap allocations in Engine to 0 (by @adamsitnik ) #278 Support Atlassian flavored wiki markup (by @lahma ) #286 Mutable Job implementation (by @ig-sinicyn ) #287 Fix docs: job API changed (by @ig-sinicyn ) #293 Presenters: IFormattable support (by @ig-sinicyn ) Commits (85) a8b4e7 JsonExporters refactoring (by @AndreyAkinshin ) e6a4ae JsonExporters: add information about namespaces, resolves #246 (by @AndreyAkinshin ) 29ee0a Add Namespace column (by @AndreyAkinshin ) 26c333 Better error message (by @arthrp ) 12b313 Merge pull request #251 from arthrp/master (by @AndreyAkinshin ) 03d00c Mark [Benchmark] as implying implicit use (by @roji ) 394a93 Merge pull request #253 from roji/resharper-annotations (by @AndreyAkinshin ) 4912ea Remove unnecessary specific shell reference (by @factormystic ) 023115 Merge pull request #254 from factormystic/patch-1 (by @AndreyAkinshin ) 972fee Big refactoring (by @AndreyAkinshin ) cf839a Improved ranks (by @AndreyAkinshin ) ef3ecf Extended TimeInterval and Frequency API (by @AndreyAkinshin ) dfcc98 Minor fixes (by @AndreyAkinshin ) fb3757 Improved CSV export, fixes #241 (by @AndreyAkinshin ) f490d1 further root folder cleanup #228 (by @adamsitnik ) f7a6a0 Added [MeansImplicitUse] and explanation to summary for SetupAttribute and Cl... (by @adamsitnik ) 56b1f2 Configuration fix in JitOptimizationsTests (by @AndreyAkinshin ) faac58 Introduce AnaylyzeLaunchVariance (by @AndreyAkinshin ) 9953a9 Smart statistics in StatisticsColumnProvider (by @AndreyAkinshin ) 2a6578 Minor fixes in docs (by @AndreyAkinshin ) 03fb04 Introduce UnrollFactor (by @AndreyAkinshin ) 137636 NewLine fix in OutputLogger (by @AndreyAkinshin ) b35d52 Unique column support (by @AndreyAkinshin ) 24e944 Don't assume that TargetType has reference to BenchmarkDotNet, fixes #266 (by @adamsitnik ) 69330a Make shipped assemblies have CLSCompliant(true) applied (by @lahma ) fb8402 Merge pull request #267 from lahma/features/cls-compliancy (by @adamsitnik ) 0944b5 Make exported HTML valid, add alternating color to result table (by @lahma ) 748a2c Merge pull request #269 from lahma/features/html-export-enhancements (by @adamsitnik ) afff51 ExecutionValidator should not throw on overridden [Setup] methods, fixes #272 (by @adamsitnik ) ab9db4 Support nullable types as [Params], fixes #271 (by @adamsitnik ) ce4994 support for [STAThread], fixes #265 (by @adamsitnik ) 13fa5c move ConsoleHandler to separate file for better readability (by @adamsitnik ) 0e8e82 Print runtime of child processes in summary, fixes #268 (by @adamsitnik ) 491a28 Print more info about runtime of child processes in summary (and in a nicer w... (by @adamsitnik ) 0580a5 updated docs for #265 (by @adamsitnik ) f9baa6 catch native exceptions when determining clock type, #276 (by @adamsitnik ) 93a23d Check OS version in WindowsClock, fixed #276 (by @AndreyAkinshin ) 8d65fe changed diagnosers flow, possibility to hook up before jitting, after setup a... (by @adamsitnik ) f346ff added predefined attributes for diagnosers (by @adamsitnik ) e7cc6b Support Atlassian flavored wiki markup (by @lahma ) 376bd8 reduce memory allocated by Engine during run to increase MemoryDiagnoser accu... (by @adamsitnik ) b5ab55 display results when runing when no diagnoser is attached (by @adamsitnik ) 7ae2b5 Improved idle method for primitive types (by @AndreyAkinshin ) e1213a Fix NRE in BuildJobRuntimes (by @AndreyAkinshin ) 572fa4 Make code CLS-Compliant, fix CS3015 warning (by @AndreyAkinshin ) 4070a1 preload all settings in ctors, introduced IEngineFactory (by @adamsitnik ) 2f0df7 make Engine use InvocationCount (by @adamsitnik ) 8a7a12 calculate Statistics without allocations! makes the code look bad, but saves ... (by @adamsitnik ) d8fa70 remove last allocations from Engine.Run (by @adamsitnik ) f2a106 perform Jitting after first Setup call, better naming, test fix (by @adamsitnik ) be3ce3 introduce general catch with hopes to help with #280 (by @adamsitnik ) 3c5e70 post code review changes (by @adamsitnik ) 16e258 possibility to define custom Engine (by @adamsitnik ) afa586 Merge pull request #277 from PerfDotNet/diagnosersFlow (by @adamsitnik ) 534189 export files only once, not twice, fixes #281 (by @adamsitnik ) a733b5 Mutable Job implementation (by @ig-sinicyn ) 259647 Merge pull request #286 from ig-sinicyn/feature-mutable-characteristics (by @AndreyAkinshin ) c184b8 Fix docs: job API changed (by @ig-sinicyn ) 47b152 Merge pull request #287 from ig-sinicyn/fix-docs-jobs-updated (by @AndreyAkinshin ) 868ffc Jobs: WithXxx() extension methods added back, docs updated (by @ig-sinicyn ) eede54 Jobs: .With() methods now create new instances of the Job. (by @ig-sinicyn ) 40f160 Test fixed (by @ig-sinicyn ) fd92f7 Jobs: helper for .With() methods (by @ig-sinicyn ) 307b72 Merge pull request #289 from ig-sinicyn/features-jobs-with (by @AndreyAkinshin ) d576f5 Presenters: IFormattable support (by @ig-sinicyn ) 8647e7 Fix #291 (by @AndreyAkinshin ) 49c000 Merge pull request #293 from ig-sinicyn/fix-presenter-culture (by @AndreyAkinshin ) 684334 Merge pull request #278 from lahma/features/atlassian-wiki-markup (by @AndreyAkinshin ) 7f3ca5 Make BenchmarkRunnerCore.Run public (by @AndreyAkinshin ) 10a91e Allow using newer versions of Microsoft.NETCore.App, fixes #292 (by @adamsitnik ) 134d74 Misc improvements in Exporters (by @AndreyAkinshin ) 33c63f Respect RemoveOutliers in the RunResults (by @AndreyAkinshin ) 5e022b Fix #291, part 2 (by @AndreyAkinshin ) 4b6ea9 Improved name for the Id CharacteristicColumn (by @AndreyAkinshin ) af6f8a Fix some compilation warnings (by @AndreyAkinshin ) 2f8584 Analysers refactoring + OutliersAnalyser (by @AndreyAkinshin ) b11935 Make BenchmarkRunnerCore public (by @AndreyAkinshin ) 781740 Specify generated id for the default job (by @AndreyAkinshin ) 846255 JobTests.Test01Create fix (by @AndreyAkinshin ) 9f9544 Check if there is no MainTarget measurements in OutliersAnalyser, fixes #296 (by @AndreyAkinshin ) 503b04 Proper exception in GetStatistics for empty input, see #296 (by @AndreyAkinshin ) c667aa Fix path to logo (by @AndreyAkinshin ) 0b91c3 Fix null check in JobMode.ApplyCore (by @AndreyAkinshin ) 2edb56 Copyrights and links update (by @AndreyAkinshin ) 2edb9a Set library version: 0.10.0 (by @AndreyAkinshin ) Contributors (7) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Arthur ( @arthrp ) factormystic ( @factormystic ) ig-sinicyn ( @ig-sinicyn ) Marko Lahma ( @lahma ) Shay Rojansky ( @roji ) Thank you very much! Additional details Date: November 10, 2016 Milestone: v0.10.0 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.0 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.0 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.0 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.0 Online Documentation: https://dotnet.github.io/BenchmarkDotNet/"
  },
  "changelog/v0.10.1.html": {
    "href": "changelog/v0.10.1.html",
    "title": "BenchmarkDotNet v0.10.1 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.1 MemoryDiagnoser got improved. The changes: Memory Diagnoser is now part of BenchmarkDotNet.Core.dll, and it's enabled by default MemoryDiagnoser is 100% accurate about allocated memory when using default settings or Job.ShortRun or any longer job. (see #284 ) Memory Diagnoser no longer includes allocations from Cleanup/Setup methods (see #186 ) the results are now scaled so they are stable across the runs. (see #133 ) .NET Core 1.1+ support, we no longer support 1.0, we target netcoreapp1.1 now. Reason: we wanted to use GC.GetAllocatedBytesForCurrentThread in MemoryDiagnoser which is available only in 1.1+ Improved information about environment in summary Minor bugfixes Milestone details In the v0.10.1 scope, 9 issues were resolved and 2 pull requests where merged. This release includes 38 commits by 2 contributors. Resolved issues (9) #133 High differences between run for GC Diagnoser (assignee: @adamsitnik ) #186 GC Diagnoser should not include allocations done by Setup method (assignee: @adamsitnik ) #200 be accurate about allocated bytes/op (assignee: @adamsitnik ) #208 Troubles with MemoryDiagnoserTests (assignee: @adamsitnik ) #298 PlatformNotSupportedException when reading ProcessorAffinity on MacOS (assignee: @adamsitnik ) #301 netcoreapp1.1 support (assignee: @adamsitnik ) #309 Diagnosers don't export data to the measurements.csv files (assignee: @adamsitnik ) #312 RuntimeInformation can be made static and internal (assignee: @AndreyAkinshin ) #313 Bug in Generator (interface as a return type) (assignee: @AndreyAkinshin ) Merged pull requests (2) #284 built-in accurate and cross platform Memory Diagnoser (by @adamsitnik ) #314 Improved information about job environments in summary (by @AndreyAkinshin ) Commits (38) 23f3b2 built-in accurate and cross platform Memory Diagnoser, fixes #186, fixes #200 (by @adamsitnik ) 4cabc2 don't try to use AppDomain's Monitoring in Mono since it's not implemented there (by @adamsitnik ) 99c21e scale GC collections count / op, makes MemoryDiagnoser output stable for benc... (by @adamsitnik ) e91255 use per mille to make the Memory Diagnoser output more human-friendly + reduc... (by @adamsitnik ) a0536d Merge branch 'master' into universalMemoryDiagnoser (by @adamsitnik ) ade1be preallocate results list in more safe, but still ugly way (by @adamsitnik ) 102282 closed the ugly code in separate class (by @adamsitnik ) 7825b7 Update links in docs (by @AndreyAkinshin ) aaf720 Fix typo (by @AndreyAkinshin ) 1e2d38 update to netcoreapp1.1 in order to get universal cross platform memory diagn... (by @adamsitnik ) e69e80 don't show Gen 1 and Gen 2 columns if empty for all benchmarks (by @adamsitnik ) b10a84 PlatformNotSupportedException when reading ProcessorAffinity on MacOS, fixes ... (by @adamsitnik ) 2a529a update to .NET Core 1.1, fixes #301 (by @adamsitnik ) e6ccee always show Gen 0 column, display Gen 0/1/2 per 1k op (by @adamsitnik ) 3bcc59 Merge branch 'master' into universalMemoryDiagnoser (by @adamsitnik ) a09810 make public things readonly, expensive things lazy and extend's validators in... (by @adamsitnik ) eae2cd added documentation and smarter bytes formatting (by @adamsitnik ) 1208c3 Merge branch 'master' into universalMemoryDiagnoser (by @adamsitnik ) f1f231 Merge pull request #284 from dotnet/universalMemoryDiagnoser (by @AndreyAkinshin ) 6300a2 include MemoryDiagnoser's results in CsvMeasurementsExporter, fixes #309 (by @adamsitnik ) ddb37e don't use spaces in columns names in CSV, #309 (by @adamsitnik ) 112f62 Fix stupid bug with condition for optional MedianColumn (by @AndreyAkinshin ) 60127c Remove Cpu_Ilp_RyuJit.cs because it's obsolete (by @AndreyAkinshin ) 401456 Print full information about a GenerateException (by @AndreyAkinshin ) 0b9177 Support of benchmark methods with an interface as a return type, fixed #313 (by @AndreyAkinshin ) b42b9e Improved information about job environments in summary (by @AndreyAkinshin ) 92f1db Improved information about job environments in summary, part 2 (by @AndreyAkinshin ) 5d8dd7 Merge pull request #314 from dotnet/summary (by @AndreyAkinshin ) d279f6 Make RuntimeInformation static internal, fix #312 (by @AndreyAkinshin ) 1df6ca Minor API improvements in BenchmarkSwitcher (by @AndreyAkinshin ) c12daf Dot't show the median column for the N=1 case (by @AndreyAkinshin ) 19caa2 RyuJit is always avaiable for .NET Core (by @adamsitnik ) 13e12c make JitOptimizationsValidator work for .NET Core (needed properties are avai... (by @adamsitnik ) c17b43 hide the AllocatedBytes column for Mono, show Gen 0 only if any of the benchm... (by @adamsitnik ) 29ac91 updated docs about Diagnosers in the Overview ;) (by @adamsitnik ) cc974e Improved information about job environments in summary, part 3 (by @AndreyAkinshin ) 8846af Update docs (by @AndreyAkinshin ) 37b126 Set library version: 0.10.1 (by @AndreyAkinshin ) Contributors (2) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Date: December 04, 2016 Milestone: v0.10.1 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.1 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.1 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.1 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.1"
  },
  "changelog/v0.10.10.html": {
    "href": "changelog/v0.10.10.html",
    "title": "BenchmarkDotNet v0.10.10 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.10 Highlights: Disassembly Diagnoser (read more here: Disassembling .NET Code with BenchmarkDotNet ) ParamsSources .NET Core x86 support Environment variables and Mono args support Better environment description More: additional sections in the documentation, bug fixes, build script improvements, internal refactoring. Overview post: BenchmarkDotNet v0.10.10 Milestone details In the v0.10.10 scope, 34 issues were resolved and 18 pull requests where merged. This release includes 95 commits by 11 contributors. Resolved issues (34) #160 Make ClrMd Source diagnoser working with new ClrMD api (assignee: @adamsitnik ) #167 Detect virtual machine environment (assignee: @lukasz-pyrzyk ) #262 Runtime knobs (assignee: @adamsitnik ) #310 Support 32bit benchmarks for .NET Core (assignee: @adamsitnik ) #350 ParamsSource (assignee: @adamsitnik ) #437 Add DisassemblyDiagnoser for outputting disassembled JITed code. (assignee: @adamsitnik ) #466 MSBuild parameters are not passed to generated benchmark project (assignee: @adamsitnik ) #495 Attributes put on base methods are not considered in derived class (assignee: @lukasz-pyrzyk ) #500 Borken compilation for net46 projects when .NET Framework 4.7 is installed (assignee: @adamsitnik ) #505 JsonExporterBase doesn't include MemoryDiagnoser stats in output #511 [bug] Bug in GetTargetedMatchingMethod() logic #513 IterationSetup not run in Job.InProcess #516 Get a compilation error \"CS1009: Unrecognized escape sequence\" when using verbatim strings #519 BenchmarkSwitcher.RunAllJoined throws InvalidOperationException (assignee: @AndreyAkinshin ) #526 Remove project.json support (assignee: @adamsitnik ) #529 No namespace in export filenames can lead to data loss #530 Build error on Appveyor with recent changes. #533 When I clone, build, and run BenchmarkDotNet.Samples I get an error #534 Allow the users to compare 32 vs 64 RyuJit for .NET Core (assignee: @adamsitnik ) #535 No way to set RuntimeFrameworkVersion in multiple-version config (assignee: @adamsitnik ) #536 Strange disassembly ordering/truncation (assignee: @adamsitnik ) #537 Can't benchmark a netstandard2.0 project (assignee: @adamsitnik ) #538 Duplicate using causing benchmark not to work (assignee: @adamsitnik ) #539 Target .NET Core 2.0 to take advantage of the new APIs (assignee: @adamsitnik ) #540 Artifacts for disassembler projects (assignee: @adamsitnik ) #542 Problems with Disassembler + Job.Dry (assignee: @adamsitnik ) #555 Test \"CanDisassembleAllMethodCalls\" fails on Ubuntu (assignee: @adamsitnik ) #556 Table in report is broken in VSCode markdown viewer (assignee: @adamsitnik ) #558 Warn the users when running Benchmarks from xUnit with shadow copy enabled (assignee: @adamsitnik ) #559 DissassemblyDiagnoser jit/arch info seems to be wrong (assignee: @adamsitnik ) #561 Strange behaviour when benchmark project is build in debug mode (assignee: @adamsitnik ) #562 DisassemblyDiagnoser crashes on overloaded benchmark (assignee: @adamsitnik ) #564 [Bug] Benchmarking a method doesn't run global setup when filter is applied (assignee: @adamsitnik ) #571 Allow users to use non compile-time constants as Parameters (assignee: @adamsitnik ) Merged pull requests (18) #507 Fix a typo in Jobs.md (by @aidmsu ) #508 Fixed some typos and grammar (by @lukasz-pyrzyk ) #512 Warning about antivirus software after benchmark failure (by @lukasz-pyrzyk ) #514 #495 - Unit test for reading attributes from the base class (by @lukasz-pyrzyk ) #515 Fix #513 - IterationSetup not run in Job.InProcess (by @ig-sinicyn ) #518 Fixed information about MemoryDiagnoser. (by @cincuranet ) #520 XML Exporter documentation and samples (by @Teknikaali ) #525 adding validator for setup cleanup attributes (by @ipjohnson ) #527 Detecting virtual machine hypervisor, #167 (by @lukasz-pyrzyk ) #531 Remove --no-build argument for dotnet test & pack commands. (by @Ky7m ) #532 Fix type of local in EmitInvokeMultipleBody (by @pentp ) #547 Fix markdown headers (by @jawn ) #548 Fix condition in package reference list and update dotnet cli version from 1.0.4 to 2.0.0 for non-Windows system (by @Ky7m ) #549 Project files cleanup (by @Ky7m ) #552 Fix exporters to use fully qualified filenames (by @Teknikaali ) #563 Remove leading space character in a MD table row, #556 (by @rolshevsky ) #565 Single point of full config creation (by @ig-sinicyn ) #569 Update cakebuild scripts (by @Ky7m ) Commits (95) 682820 Fix typo in Jobs.md (by @aidmsu ) e82a8b Fixed some typos and grammar (by @lukasz-pyrzyk ) a0e9b9 Disassembly Diagnoser: displaying ASM, IL and C# for any JIT (by @adamsitnik ) 57e0f0 recursive disassembling (by @adamsitnik ) 1975ae return structured results from Disassembler (by @adamsitnik ) 9ae365 Warning about antivirus software after benchmark failure (#512) (by @lukasz-pyrzyk ) 74b41e Unit test for reading attributes from the base class, fixes #495 (by @lukasz-pyrzyk ) 3bab2d Fix #513 - IterationSetup not run in Job.InProcess (#515) (by @ig-sinicyn ) 769a39 use the IL instructions to detect more calls (by @adamsitnik ) b69537 use InstructionPointer to combine asm with hardware counters (by @adamsitnik ) 200244 Fixed information about MemoryDiagnoser. (by Jiri Cincura) 848a1a handling the lovely edge cases (Cecil vs ClrMD differences in naming types an... (by @adamsitnik ) 40049b single text representation of asm is a range of IPs! (by @adamsitnik ) 56e252 XML Exporter documentation and samples (#520) (by @Teknikaali ) c18597 eliminate duplicates (ClrMD fault), be more defensive for edge cases (by @adamsitnik ) a9262f allow the users to specify recursive depth limit (50MB output for simple lock... (by @adamsitnik ) fbe329 Support params which include slashes, fixes #516 (by @AndreyAkinshin ) f2b9c0 Fix RunAllJoined, fixes #519 (by @AndreyAkinshin ) 983764 UX ;) (by @adamsitnik ) c010de adding validator for setup cleanup attributes (by @ipjohnson ) 424723 Merge pull request #525 from ipjohnson/master (by @adamsitnik ) 7b680a prefer unit tests over integration tests if possible (by @adamsitnik ) 93dc6e Remove project.json support, fixes #526 (by @adamsitnik ) 19f22b Merge pull request #518 from cincuranet/docs (by @adamsitnik ) fe2db1 configurable, runtime specific diagnosers, hard part transparent to end users (by @adamsitnik ) fb60e5 disassembly diagnoser for Mono (by @adamsitnik ) 55ce0d smart diagnoser can choose the right disassembler (by @adamsitnik ) 46c911 one test to verify all scenarios (by @adamsitnik ) d06086 minor improvements (by @adamsitnik ) 116119 group instructions into maps for better visualization (by @adamsitnik ) d19b1e test fix: split on any new line ;) (by @adamsitnik ) 647a67 Merge branch 'asm' (by @adamsitnik ) 91c8e4 move disassembler stuff to resources of Core project to make it super easy to... (by @adamsitnik ) 363900 Remove --no-build argument for dotnet test & pack commands. (by @Ky7m ) 22e993 Disable parallel build option (by @Ky7m ) 9c327c Merge pull request #531 from Ky7m/removes-no-build-argument (by @adamsitnik ) 20db28 the docs for Disassembly Diagnoser, #437 (by @adamsitnik ) 13732b added asm report with navigation (by @adamsitnik ) 33ee03 fix type of local in EmitInvokeMultipleBody (by @pentp ) 7d943f Merge pull request #532 from pentp/master (by @adamsitnik ) 4d173d RyuJit 32bit support for .NET Core, fixes #310, fixes #533 (by @adamsitnik ) 5f5237 test fix (set platform in explicit way to avoid lack of 32-bit .NET Core sdk ... (by @adamsitnik ) f359c9 allow the users to set custom RuntimeFrameworkVersion, fixes #535 (by @adamsitnik ) 264150 disassembler: print the results in machine code order, not il, part of #536 (by @adamsitnik ) 0088bd Detecting virtual machine hypervisor, #167 (#527) (by @lukasz-pyrzyk ) 007444 print all returns (maps with negative ILOffset are not always prolog or epilo... (by @adamsitnik ) aebc32 empty methods for LegacyJit64 have only maps with negative ILOffset, #536 (by @adamsitnik ) ba7489 docs for Toolchains, closes #537 (by @adamsitnik ) 8c4f53 allow the users to specify custom build configuration, #466, close #528 (by @adamsitnik ) eb80b2 Environment Variables support, #262 (by @adamsitnik ) ab7045 test fixes ;) (by @adamsitnik ) 455c60 allow the users to specify custom arguments (Mono, MsBuild), #466, #262 (by @adamsitnik ) e03384 make sure that all new custom settings are presented in human friendly way, #262 (by @adamsitnik ) cc8d07 enforce TreatWarningsAsErrors=False in auto-generated csproj to override glob... (by @adamsitnik ) 97ab49 target .NET Core 2.0 to take full advantage of the new API, fixes #539 (by @adamsitnik ) 8b2c7e check if reference assemblies are installed when choosing the default .NET fr... (by @adamsitnik ) feabd1 bump the .NET Core version, #539 (by @adamsitnik ) a21f86 for .NET Core 1.1 we should run only the Backward Compatibility tests. #539 (by @adamsitnik ) b7a966 typo fix (by @adamsitnik ) 73a30a docs: Customizing Mono, Env Variables & minor updates, fixes #262 (by @adamsitnik ) 612b41 exclude Artifacts for disassembler projects, fixes #540 (by @adamsitnik ) 360326 typo, #540 (by @adamsitnik ) f3e4ae show nice error when Job.Dry is used for Disassembler, fixes #542 (by @adamsitnik ) c6bbda allow to specify custom dotnet cli path to compare RyuJit 32 vs 64 for .NET C... (by @adamsitnik ) a0c7e5 Add info about Redstone 3,4 in WindowsBrandVersions (by @AndreyAkinshin ) d42262 Additional info about WindowsBrandVersions (by @AndreyAkinshin ) cd0a1f Improve formatting in WindowsBrandVersions (by @AndreyAkinshin ) 1cd844 Fix OsBrandStringTests.WindowsIsPrettified (by @AndreyAkinshin ) f00787 Fix markdown headers (by @jawn ) 363814 Merge pull request #547 from jawn/patch-1 (by @adamsitnik ) 405c4c Update dotnet cli version from 1.0.4 to 2.0.0 for non-Windows system. (#548) (by @Ky7m ) 97a9b2 Fix compiler warning connected to problem with the XML tag. (by @Ky7m ) 24585d Remove PackageTargetFallback element. (by @Ky7m ) 174c19 Merge pull request #549 from Ky7m/csproj-files-cleanup (by @AndreyAkinshin ) 84a4e2 Fix exporters to use fully qualified filenames (#552), fixes #529 (by @Teknikaali ) a7578a disable Disassembler tests for non-Windows OS, fixes #555 (by @adamsitnik ) a147dd Remove leading space character in a MD table row, fixes #556 (by @rolshevsky ) 9c194c DisassemblyDiagnoser crashes on overloaded benchmark, fixes #562 (by @adamsitnik ) 9076a6 give users nice warning when they run into shadow copy issues, fixes #558 (by @adamsitnik ) 1670ca the build fix ;) (by @adamsitnik ) d5854d Include UBR in Windows versions (by @AndreyAkinshin ) 1fcfee display correct runtime info in exported disassembly result, fixes #559 (by @adamsitnik ) de45ad Single point of full config creation (#565) (by @ig-sinicyn ) 395a52 make sure filters don't exclude Setup/Cleanup methods, fixes #564 (by @adamsitnik ) 4276ac fail when running benchmarks in Debug with DefaultConfig, fixes #561 (by @adamsitnik ) 0145f8 Fix build number for Windows 10 Fall Creators Update (by @AndreyAkinshin ) 7f7a7c Update cakebuild scripts (#569) (by @Ky7m ) cff577 introduce ParamsSource attribute, fixes #350, part of #256 (by @adamsitnik ) 3af915 introduce IParam to support complex, not-compile time constants as parameters... (by @adamsitnik ) 4a877f build the disassemblers before .Core, but don't add the dependency to them to... (by @adamsitnik ) 188850 specify all the embedded resources in explicit way to avoid some crazy MSBuil... (by @adamsitnik ) b5fbbf Typo fix (by @AndreyAkinshin ) eb90ce Update message in JitOptimizationsValidator (by @AndreyAkinshin ) 6c1137 Updated DotSettings (by @AndreyAkinshin ) 3d0dfe Set library version: 0.10.10 (by @AndreyAkinshin ) Contributors (11) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Andrey Dorokhov ( @aidmsu ) Anssi Kettunen ( @Teknikaali ) Bernard Vander Beken ( @jawn ) Ian Johnson ( @ipjohnson ) ig-sinicyn ( @ig-sinicyn ) Igor Fesenko ( @Ky7m ) Łukasz Pyrzyk ( @lukasz-pyrzyk ) Pent Ploompuu ( @pentp ) Rostislav Olshevsky ( @rolshevsky ) Thank you very much! Additional details Date: November 03, 2017 Milestone: v0.10.10 ( List of commits ) NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.10 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.10 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.10 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.10"
  },
  "changelog/v0.10.6.html": {
    "href": "changelog/v0.10.6.html",
    "title": "BenchmarkDotNet v0.10.6 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.6 Removed buggy allocation from Engine which was spoiling the results of MemoryDiagnoser for micro benchmarks. This part of the code is now guarded with very strict integration tests, it should never happen again. We now also exclude the side effects of the Allocation Quantum. This bug was serious, you must update to 0.10.6 ( #439 ) Support of the PackageTargetFallback setting which allows to reference components that target old framework monikers (like dotnet5.4 or portable-net45+win8 ) ( #438 ) Added InstructionRetiredPerCycleColumn which shows up automatically when HardwareCounter.InstructionRetired and HardwareCounter.TotalCycles are used. Support benchmark classes without namespace ( #446 ) Fix problem with RPlotExporter and quoted directories in %PATH% ( #446 ) Show Windows brand version in summary Milestone details In the v0.10.6 scope, 3 issues were resolved and 1 pull requests where merged. This release includes 11 commits by 3 contributors. Resolved issues (3) #438 Need to Update Autogenerated csproj file (assignee: @adamsitnik ) #439 Question - This benchmark apparently allocates, but why? (assignee: @adamsitnik ) #446 ArgumentNullException if RPlotExporter is used (assignee: @AndreyAkinshin ) Merged pull requests (1) #444 Added line separator at the end in JsonExporters (by @alinasmirnova ) Commits (11) 3c1f09 copy the PackageTargetFallback setting if present in csproj to support older ... (by @adamsitnik ) ffab7d remove allocation from Engine, make sure tests detect breaking change in the ... (by @adamsitnik ) 7c9a0f consider Allocation Quantum side effects to have correct results for micro be... (by @adamsitnik ) 4af5f3 Added line separator in JsonExporters (by @alinasmirnova ) 8ac913 added Instruction Retired per Cycle (IPC) to the predefined columns for Pmc D... (by @adamsitnik ) 0898c3 post code review changes (by @adamsitnik ) b4d68e 'kB' -> 'KB' (by @AndreyAkinshin ) 23bd4f Handle null values in CsvHelper.Escape (by @AndreyAkinshin ) 77ed63 RPlotExporter.FindInPath: handle exceptions, trim quotes #446 (by @AndreyAkinshin ) 626e3a Show Windows brand versions in summary (by @AndreyAkinshin ) 247634 Set library version: 0.10.6 (by @AndreyAkinshin ) Contributors (3) Adam Sitnik ( @adamsitnik ) Alina Smirnova ( @alinasmirnova ) Andrey Akinshin ( @AndreyAkinshin ) Thank you very much! Additional details Date: May 12, 2017 Milestone: v0.10.6 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.6 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.6 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.6 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.6"
  },
  "changelog/v0.10.7.html": {
    "href": "changelog/v0.10.7.html",
    "title": "BenchmarkDotNet v0.10.7 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.7 LINQPad support (5.22.05+) ( #66 , #445 ) Benchmark filters and categories ( #248 ) Updated setup/cleanup attributes: [GlobalSetup] , [GlobalCleanup] , [IterationSetup] , [IterationCleanup] ( #270 , #274 , #325 , #456 ) Better Value Types support ( afa803d0 ) Building Sources on Linux: it's possible to build the solution (with unloaded F#/VB projects), run samples (for both net46/netcoreapp1.1), run unit tests (for netcoreapp1.1 only) Fix minor bugs in JsonExporter ( #451 ) Milestone details In the v0.10.7 scope, 6 issues were resolved and 1 pull requests where merged. This release includes 24 commits by 4 contributors. Resolved issues (6) #66 Friendliness to LinqPad (assignee: @adamsitnik ) #248 Support a \"category\" attribute for selecting benchmarks (assignee: @AndreyAkinshin ) #270 Add support for Cleanup and Setup between benchmarks (assignee: @AndreyAkinshin ) #274 Support for run-once Setup and Clean-up with Parameters available (assignee: @AndreyAkinshin ) #325 Setup & Cleanup versions of attribute which would run before/after each benchmark iteration (assignee: @AndreyAkinshin ) #445 Missing reference to Microsoft.CodeAnalysis.CSharp when using BenchmarkDotNet in Linqpad (assignee: @adamsitnik ) Merged pull requests (1) #451 Fix minor bugs in JsonExporter (by @Teknikaali ) Commits (24) a54645 handle the LINQPad shadow copying, #445, #66 (by @adamsitnik ) fe3032 Add Filters (by @AndreyAkinshin ) 2e7427 Add categories (by @AndreyAkinshin ) f96346 Add categories filters (by @AndreyAkinshin ) 34f808 Support category filters in BenchmarkSwitcher (by @AndreyAkinshin ) 786afe Implement join mode in BenchmarkSwitcher (by @AndreyAkinshin ) a77a77 Post code review changes (by @AndreyAkinshin ) cc7006 Fix minor bugs in JsonExporter (#451) (by @Teknikaali ) 4dd789 Rename Setup/Cleanup to GlobalSetup/GlobalCleanup (by @AndreyAkinshin ) 21369c Introduce IterationSetup/IterationCleanup (by @AndreyAkinshin ) 0e9be7 Add IterationSetupCleanupAnalyser (by @AndreyAkinshin ) 4f3703 docs: update structure (by @AndreyAkinshin ) 5fe564 docs: add info about RunStrategy.Monitoring and new Setup/Cleanup attributes (by @AndreyAkinshin ) 87ce0f Mark ProcessPropertiesTests as WindowsOnly (by @AndreyAkinshin ) 7e479e Fix typo in File_StreamVsMemoryMapperVewStream.cs (by @AndreyAkinshin ) 975514 Wrong xml doc comment (by @ig-sinicyn ) 165b13 Merge pull request #455 from ig-sinicyn/patch-1 (by @adamsitnik ) afa803 better Value Types support (by @adamsitnik ) d16ddb workaround for weird AppVeyor behavior (by @adamsitnik ) 9f3d68 support recursive nesting for returned types (by @adamsitnik ) b7668e Add tests/runCoreTests.sh (by @AndreyAkinshin ) 3cceb6 runCoreTests.sh: fix output file for integration-tests (by @AndreyAkinshin ) a21421 Make some tests Windows-only (by @AndreyAkinshin ) 00a156 Set library version: 0.10.7 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Anssi Kettunen ( @Teknikaali ) ig-sinicyn ( @ig-sinicyn ) Thank you very much! Additional details Date: June 05, 2017 Milestone: v0.10.7 Overview post: http://aakinshin.net/blog/post/bdn-v0_10_7/ NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.7 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.7 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.7 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.7"
  },
  "changelog/v0.10.8.html": {
    "href": "changelog/v0.10.8.html",
    "title": "BenchmarkDotNet v0.10.8 | BenchmarkDotNet",
    "keywords": "BenchmarkDotNet v0.10.8 Legend for time units ( #349 , #459 , f14e508e ) XML exporter ( #157 , #452 , a0148db8 ) .NET Framework 4.7 support ( #461 , 3f2b5c3c , 5513873a ) Public API for AllocationQuantum ( #450 , #462 , a0148db8 ) Milestone details In the v0.10.8 scope, 5 issues were resolved and 3 pull requests where merged. This release includes 8 commits by 4 contributors. Resolved issues (5) #157 Implement export to xml #349 What the report title and value means? (assignee: @AndreyAkinshin ) #450 [Minor feature request] Please make GcStats.AllocationQuantum public #459 [Question] What does the unit of measurement us stand for #461 .NET Framework 4.7 support (assignee: @adamsitnik ) Merged pull requests (3) #452 Feature: XML Exporter (by @Teknikaali ) #455 Wrong xml doc comment (by @ig-sinicyn ) #462 make allocation quantum public, deal with a spelling error and expose… (by @RichLinnell ) Commits (8) f14e50 Add legend for time units (by @AndreyAkinshin ) e59550 Add info about OrderProviders in docs (by @AndreyAkinshin ) 6fc245 Fix ConfigPassingTest (by @AndreyAkinshin ) ef0583 Feature: XML Exporter (#452) (by @Teknikaali ) 3f2b5c .NET 4.7 support from .NET Core host process on Windows, fixes #461 (by @adamsitnik ) a0148d make allocation quantum public, deal with a spelling error and expose allocat... (by @RichLinnell ) 551387 add Windows check to our CsProjClassicNetToolchain (by @adamsitnik ) 971565 Set library version: 0.10.8 (by @AndreyAkinshin ) Contributors (4) Adam Sitnik ( @adamsitnik ) Andrey Akinshin ( @AndreyAkinshin ) Anssi Kettunen ( @Teknikaali ) Rich Linnell ( @RichLinnell ) Thank you very much! Additional details Date: June 09, 2017 Milestone: v0.10.8 NuGet Packages: https://www.nuget.org/packages/BenchmarkDotNet/0.10.8 https://www.nuget.org/packages/BenchmarkDotNet.Core/0.10.8 https://www.nuget.org/packages/BenchmarkDotNet.Toolchains.Roslyn/0.10.8 https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/0.10.8"
  },
  "api/BenchmarkDotNet.Attributes.WelchTTestPValueColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.WelchTTestPValueColumnAttribute.html",
    "title": "Class WelchTTestPValueColumnAttribute | BenchmarkDotNet",
    "keywords": "Class WelchTTestPValueColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute WelchTTestPValueColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class WelchTTestPValueColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors WelchTTestPValueColumnAttribute() Declaration public WelchTTestPValueColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Characteristics.CompositeResolver.html": {
    "href": "api/BenchmarkDotNet.Characteristics.CompositeResolver.html",
    "title": "Class CompositeResolver | BenchmarkDotNet",
    "keywords": "Class CompositeResolver Inheritance System.Object CompositeResolver Implements IResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public class CompositeResolver : IResolver Constructors CompositeResolver(IResolver[]) Declaration public CompositeResolver(params IResolver[] resolvers) Parameters Type Name Description IResolver [] resolvers Methods CanResolve(Characteristic) Declaration public bool CanResolve(Characteristic characteristic) Parameters Type Name Description Characteristic characteristic Returns Type Description System.Boolean Resolve(CharacteristicObject, Characteristic) Declaration public object Resolve(CharacteristicObject obj, Characteristic characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic characteristic Returns Type Description System.Object Resolve<T>(CharacteristicObject, Characteristic<T>) Declaration public T Resolve<T>(CharacteristicObject obj, Characteristic<T> characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic <T> characteristic Returns Type Description T Type Parameters Name Description T Implements IResolver"
  },
  "api/BenchmarkDotNet.Characteristics.IResolver.html": {
    "href": "api/BenchmarkDotNet.Characteristics.IResolver.html",
    "title": "Interface IResolver | BenchmarkDotNet",
    "keywords": "Interface IResolver An entity which can resolve default values of Characteristic<T> . Namespace : BenchmarkDotNet.Characteristics Assembly : BenchmarkDotNet.dll Syntax public interface IResolver Methods CanResolve(Characteristic) Declaration bool CanResolve(Characteristic characteristic) Parameters Type Name Description Characteristic characteristic Returns Type Description System.Boolean Resolve(CharacteristicObject, Characteristic) Declaration object Resolve(CharacteristicObject obj, Characteristic characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic characteristic Returns Type Description System.Object Resolve<T>(CharacteristicObject, Characteristic<T>) Declaration T Resolve<T>(CharacteristicObject obj, Characteristic<T> characteristic) Parameters Type Name Description CharacteristicObject obj Characteristic <T> characteristic Returns Type Description T Type Parameters Name Description T"
  },
  "api/BenchmarkDotNet.Columns.IColumnProvider.html": {
    "href": "api/BenchmarkDotNet.Columns.IColumnProvider.html",
    "title": "Interface IColumnProvider | BenchmarkDotNet",
    "keywords": "Interface IColumnProvider Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public interface IColumnProvider Methods GetColumns(Summary) Declaration IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Collections.Generic.IEnumerable < IColumn >"
  },
  "api/BenchmarkDotNet.Columns.IsBaselineColumn.html": {
    "href": "api/BenchmarkDotNet.Columns.IsBaselineColumn.html",
    "title": "Class IsBaselineColumn | BenchmarkDotNet",
    "keywords": "Class IsBaselineColumn Inheritance System.Object IsBaselineColumn Implements IColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Columns Assembly : BenchmarkDotNet.dll Syntax public class IsBaselineColumn : IColumn Fields Default Declaration public static readonly IColumn Default Field Value Type Description IColumn Properties AlwaysShow Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean Category Declaration public ColumnCategory Category { get; } Property Value Type Description ColumnCategory ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String Id Declaration public string Id { get; } Property Value Type Description System.String IsNumeric Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean Legend Declaration public string Legend { get; } Property Value Type Description System.String PriorityInCategory Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 UnitType Declaration public UnitType UnitType { get; } Property Value Type Description UnitType Methods GetValue(Summary, Benchmark) Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.String GetValue(Summary, Benchmark, ISummaryStyle) Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description Summary summary Benchmark benchmark ISummaryStyle style Returns Type Description System.String IsAvailable(Summary) Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description Summary summary Returns Type Description System.Boolean IsDefault(Summary, Benchmark) Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Boolean Implements IColumn Extension Methods ColumnExtensions.ToProvider(IColumn)"
  },
  "api/BenchmarkDotNet.Configs.ConfigParser.html": {
    "href": "api/BenchmarkDotNet.Configs.ConfigParser.html",
    "title": "Class ConfigParser | BenchmarkDotNet",
    "keywords": "Class ConfigParser Inheritance System.Object ConfigParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Configs Assembly : BenchmarkDotNet.dll Syntax public class ConfigParser Methods Parse(String[]) Declaration public IConfig Parse(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IConfig PrintOptions(ILogger, Int32, Int32) Declaration public void PrintOptions(ILogger logger, int prefixWidth, int outputWidth) Parameters Type Name Description ILogger logger System.Int32 prefixWidth System.Int32 outputWidth"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.NetCoreAppSettings.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.NetCoreAppSettings.html",
    "title": "Class NetCoreAppSettings | BenchmarkDotNet",
    "keywords": "Class NetCoreAppSettings custom settings used in the auto-generated project.json / .csproj file Inheritance System.Object NetCoreAppSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.DotNetCli Assembly : BenchmarkDotNet.dll Syntax public class NetCoreAppSettings Constructors NetCoreAppSettings(String, String, String, String) sample values: netcoreapp2.0, netcoreapp2.1 used in the auto-generated .csproj file simply ignored if null or empty display name used for showing the results customize dotnet cli path if default is not desired simply ignored if null Declaration public NetCoreAppSettings(string targetFrameworkMoniker, string runtimeFrameworkVersion, string name, string customDotNetCliPath = null) Parameters Type Name Description System.String targetFrameworkMoniker System.String runtimeFrameworkVersion System.String name System.String customDotNetCliPath Fields NetCoreApp20 Declaration public static readonly NetCoreAppSettings NetCoreApp20 Field Value Type Description NetCoreAppSettings NetCoreApp21 Declaration public static readonly NetCoreAppSettings NetCoreApp21 Field Value Type Description NetCoreAppSettings NetCoreApp22 Declaration public static readonly NetCoreAppSettings NetCoreApp22 Field Value Type Description NetCoreAppSettings Properties CustomDotNetCliPath Declaration public string CustomDotNetCliPath { get; } Property Value Type Description System.String Name display name used for showing the results Declaration public string Name { get; } Property Value Type Description System.String RuntimeFrameworkVersion Declaration public string RuntimeFrameworkVersion { get; } Property Value Type Description System.String TargetFrameworkMoniker sample values: netcoreapp2.0, netcoreapp2.1 Declaration public string TargetFrameworkMoniker { get; } Property Value Type Description System.String Methods WithCustomDotNetCliPath(String, String) Declaration public NetCoreAppSettings WithCustomDotNetCliPath(string customDotNetCliPath, string displayName) Parameters Type Name Description System.String customDotNetCliPath System.String displayName Returns Type Description NetCoreAppSettings"
  },
  "api/BenchmarkDotNet.Toolchains.DotNetCli.html": {
    "href": "api/BenchmarkDotNet.Toolchains.DotNetCli.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.DotNetCli | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.DotNetCli Classes CustomDotNetCliToolchainBuilder DotNetCliBuilder DotNetCliExecutor DotNetCliGenerator DotNetCliPublisher NetCoreAppSettings custom settings used in the auto-generated project.json / .csproj file"
  },
  "api/BenchmarkDotNet.Validators.ExecutionValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.ExecutionValidator.html",
    "title": "Class ExecutionValidator | BenchmarkDotNet",
    "keywords": "Class ExecutionValidator Inheritance System.Object ExecutionValidatorBase ExecutionValidator Implements IValidator Inherited Members ExecutionValidatorBase.TreatsWarningsAsErrors ExecutionValidatorBase.Validate(ValidationParameters) ExecutionValidatorBase.GetDisplayExceptionMessage(Exception) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class ExecutionValidator : ExecutionValidatorBase, IValidator Fields DontFailOnError Declaration public static readonly ExecutionValidator DontFailOnError Field Value Type Description ExecutionValidator FailOnError Declaration public static readonly ExecutionValidator FailOnError Field Value Type Description ExecutionValidator Methods ExecuteBenchmarks(Object, IEnumerable<Benchmark>, List<ValidationError>) Declaration protected override void ExecuteBenchmarks(object benchmarkTypeInstance, IEnumerable<Benchmark> benchmarks, List<ValidationError> errors) Parameters Type Name Description System.Object benchmarkTypeInstance System.Collections.Generic.IEnumerable < Benchmark > benchmarks System.Collections.Generic.List < ValidationError > errors Overrides ExecutionValidatorBase.ExecuteBenchmarks(Object, IEnumerable<Benchmark>, List<ValidationError>) Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.ExecutionValidatorBase.html": {
    "href": "api/BenchmarkDotNet.Validators.ExecutionValidatorBase.html",
    "title": "Class ExecutionValidatorBase | BenchmarkDotNet",
    "keywords": "Class ExecutionValidatorBase Inheritance System.Object ExecutionValidatorBase ExecutionValidator ReturnValueValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public abstract class ExecutionValidatorBase : IValidator Constructors ExecutionValidatorBase(Boolean) Declaration protected ExecutionValidatorBase(bool failOnError) Parameters Type Name Description System.Boolean failOnError Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods ExecuteBenchmarks(Object, IEnumerable<Benchmark>, List<ValidationError>) Declaration protected abstract void ExecuteBenchmarks(object benchmarkTypeInstance, IEnumerable<Benchmark> benchmarks, List<ValidationError> errors) Parameters Type Name Description System.Object benchmarkTypeInstance System.Collections.Generic.IEnumerable < Benchmark > benchmarks System.Collections.Generic.List < ValidationError > errors GetDisplayExceptionMessage(Exception) Declaration protected static string GetDisplayExceptionMessage(Exception ex) Parameters Type Name Description System.Exception ex Returns Type Description System.String Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.GenericBenchmarksValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.GenericBenchmarksValidator.html",
    "title": "Class GenericBenchmarksValidator | BenchmarkDotNet",
    "keywords": "Class GenericBenchmarksValidator Inheritance System.Object GenericBenchmarksValidator Implements IValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public class GenericBenchmarksValidator : IValidator Fields DontFailOnError Declaration public static readonly IValidator DontFailOnError Field Value Type Description IValidator Properties TreatsWarningsAsErrors Declaration public bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration public IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError > Implements IValidator"
  },
  "api/BenchmarkDotNet.Validators.IValidator.html": {
    "href": "api/BenchmarkDotNet.Validators.IValidator.html",
    "title": "Interface IValidator | BenchmarkDotNet",
    "keywords": "Interface IValidator Namespace : BenchmarkDotNet.Validators Assembly : BenchmarkDotNet.dll Syntax public interface IValidator Properties TreatsWarningsAsErrors Declaration bool TreatsWarningsAsErrors { get; } Property Value Type Description System.Boolean Methods Validate(ValidationParameters) Declaration IEnumerable<ValidationError> Validate(ValidationParameters validationParameters) Parameters Type Name Description ValidationParameters validationParameters Returns Type Description System.Collections.Generic.IEnumerable < ValidationError >"
  },
  "api/BenchmarkDotNet.Analysers.ConclusionHelper.html": {
    "href": "api/BenchmarkDotNet.Analysers.ConclusionHelper.html",
    "title": "Class ConclusionHelper | BenchmarkDotNet",
    "keywords": "Class ConclusionHelper Inheritance System.Object ConclusionHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Analysers Assembly : BenchmarkDotNet.dll Syntax public static class ConclusionHelper Methods Print(ILogger, List<Conclusion>) Declaration public static void Print(ILogger logger, List<Conclusion> conclusions) Parameters Type Name Description ILogger logger System.Collections.Generic.List < Conclusion > conclusions"
  },
  "api/BenchmarkDotNet.Attributes.ArgumentsSourceAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ArgumentsSourceAttribute.html",
    "title": "Class ArgumentsSourceAttribute | BenchmarkDotNet",
    "keywords": "Class ArgumentsSourceAttribute Inheritance System.Object System.Attribute ArgumentsSourceAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class ArgumentsSourceAttribute : Attribute Constructors ArgumentsSourceAttribute(String) Declaration public ArgumentsSourceAttribute(string name) Parameters Type Name Description System.String name Properties Name Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/BenchmarkDotNet.Attributes.ClrJobAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.ClrJobAttribute.html",
    "title": "Class ClrJobAttribute | BenchmarkDotNet",
    "keywords": "Class ClrJobAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute ClrJobAttribute Implements IConfigSource Inherited Members JobConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class ClrJobAttribute : JobConfigBaseAttribute, IConfigSource Constructors ClrJobAttribute(Boolean) Declaration public ClrJobAttribute(bool isBaseline = false) Parameters Type Name Description System.Boolean isBaseline Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.CsvMeasurementsExporterAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.CsvMeasurementsExporterAttribute.html",
    "title": "Class CsvMeasurementsExporterAttribute | BenchmarkDotNet",
    "keywords": "Class CsvMeasurementsExporterAttribute Inheritance System.Object System.Attribute ExporterConfigBaseAttribute CsvMeasurementsExporterAttribute Implements IConfigSource Inherited Members ExporterConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class CsvMeasurementsExporterAttribute : ExporterConfigBaseAttribute, IConfigSource Constructors CsvMeasurementsExporterAttribute(CsvSeparator) Declaration public CsvMeasurementsExporterAttribute(CsvSeparator separator = CsvSeparator.CurrentCulture) Parameters Type Name Description CsvSeparator separator Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.EncodingAttribute.Unicode.html": {
    "href": "api/BenchmarkDotNet.Attributes.EncodingAttribute.Unicode.html",
    "title": "Class EncodingAttribute.Unicode | BenchmarkDotNet",
    "keywords": "Class EncodingAttribute.Unicode Inheritance System.Object System.Attribute EncodingAttribute EncodingAttribute.Unicode Implements IConfigSource Inherited Members EncodingAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class Unicode : EncodingAttribute, IConfigSource Constructors Unicode() Declaration public Unicode() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.GlobalSetupAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.GlobalSetupAttribute.html",
    "title": "Class GlobalSetupAttribute | BenchmarkDotNet",
    "keywords": "Class GlobalSetupAttribute Marks method to be executed before all benchmark iterations. It's going to be executed only once, just before warm up. Inheritance System.Object System.Attribute TargetedAttribute GlobalSetupAttribute SetupAttribute Inherited Members TargetedAttribute.Target System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class GlobalSetupAttribute : TargetedAttribute"
  },
  "api/BenchmarkDotNet.Attributes.JobConfigBaseAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.JobConfigBaseAttribute.html",
    "title": "Class JobConfigBaseAttribute | BenchmarkDotNet",
    "keywords": "Class JobConfigBaseAttribute Inheritance System.Object System.Attribute JobConfigBaseAttribute ClrJobAttribute CoreJobAttribute CoreRtJobAttribute DryClrJobAttribute DryCoreJobAttribute DryCoreRtJobAttribute DryJobAttribute DryMonoJobAttribute InProcessAttribute LegacyJitX64JobAttribute LegacyJitX86JobAttribute LongRunJobAttribute MediumRunJobAttribute MonoJobAttribute RyuJitX64JobAttribute RyuJitX86JobAttribute ShortRunJobAttribute SimpleJobAttribute VeryLongRunJobAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class)] public class JobConfigBaseAttribute : Attribute, IConfigSource Constructors JobConfigBaseAttribute() Declaration protected JobConfigBaseAttribute() JobConfigBaseAttribute(Job[]) Declaration protected JobConfigBaseAttribute(params Job[] jobs) Parameters Type Name Description Job [] jobs Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.KurtosisColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.KurtosisColumnAttribute.html",
    "title": "Class KurtosisColumnAttribute | BenchmarkDotNet",
    "keywords": "Class KurtosisColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute KurtosisColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class KurtosisColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors KurtosisColumnAttribute() Declaration public KurtosisColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MemoryDiagnoserAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MemoryDiagnoserAttribute.html",
    "title": "Class MemoryDiagnoserAttribute | BenchmarkDotNet",
    "keywords": "Class MemoryDiagnoserAttribute Inheritance System.Object System.Attribute MemoryDiagnoserAttribute Implements IConfigSource Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MemoryDiagnoserAttribute : Attribute, IConfigSource Constructors MemoryDiagnoserAttribute() Declaration public MemoryDiagnoserAttribute() Properties Config Declaration public IConfig Config { get; } Property Value Type Description IConfig Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Attributes.MinColumnAttribute.html": {
    "href": "api/BenchmarkDotNet.Attributes.MinColumnAttribute.html",
    "title": "Class MinColumnAttribute | BenchmarkDotNet",
    "keywords": "Class MinColumnAttribute Inheritance System.Object System.Attribute ColumnConfigBaseAttribute MinColumnAttribute Implements IConfigSource Inherited Members ColumnConfigBaseAttribute.Config System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Attributes Assembly : BenchmarkDotNet.dll Syntax public class MinColumnAttribute : ColumnConfigBaseAttribute, IConfigSource Constructors MinColumnAttribute() Declaration public MinColumnAttribute() Implements IConfigSource"
  },
  "api/BenchmarkDotNet.Mathematics.Statistics.html": {
    "href": "api/BenchmarkDotNet.Mathematics.Statistics.html",
    "title": "Class Statistics | BenchmarkDotNet",
    "keywords": "Class Statistics Inheritance System.Object Statistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : BenchmarkDotNet.Mathematics Assembly : BenchmarkDotNet.dll Syntax public class Statistics Constructors Statistics(IEnumerable<Double>) Declaration public Statistics(IEnumerable<double> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > values Statistics(IEnumerable<Int32>) Declaration public Statistics(IEnumerable<int> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > values Statistics(Double[]) Declaration public Statistics(params double[] values) Parameters Type Name Description System.Double [] values Properties AllOutliers Declaration public double[] AllOutliers { get; } Property Value Type Description System.Double [] ConfidenceInterval Declaration public ConfidenceInterval ConfidenceInterval { get; } Property Value Type Description ConfidenceInterval InterquartileRange Declaration public double InterquartileRange { get; } Property Value Type Description System.Double Kurtosis Declaration public double Kurtosis { get; } Property Value Type Description System.Double LowerFence Declaration public double LowerFence { get; } Property Value Type Description System.Double LowerOutliers Declaration public double[] LowerOutliers { get; } Property Value Type Description System.Double [] Max Declaration public double Max { get; } Property Value Type Description System.Double Mean Declaration public double Mean { get; } Property Value Type Description System.Double Median Declaration public double Median { get; } Property Value Type Description System.Double Min Declaration public double Min { get; } Property Value Type Description System.Double N Declaration public int N { get; } Property Value Type Description System.Int32 Percentiles Declaration public PercentileValues Percentiles { get; } Property Value Type Description PercentileValues Q1 Declaration public double Q1 { get; } Property Value Type Description System.Double Q3 Declaration public double Q3 { get; } Property Value Type Description System.Double Skewness Declaration public double Skewness { get; } Property Value Type Description System.Double StandardDeviation Declaration public double StandardDeviation { get; } Property Value Type Description System.Double StandardError Declaration public double StandardError { get; } Property Value Type Description System.Double UpperFence Declaration public double UpperFence { get; } Property Value Type Description System.Double UpperOutliers Declaration public double[] UpperOutliers { get; } Property Value Type Description System.Double [] Variance Declaration public double Variance { get; } Property Value Type Description System.Double Methods CalcCentralMoment(Int32) Declaration public double CalcCentralMoment(int k) Parameters Type Name Description System.Int32 k Returns Type Description System.Double CanBeInverted() Returns true, if this statistics can be inverted (see Invert() ). Declaration public bool CanBeInverted() Returns Type Description System.Boolean DivMean(Statistics, Statistics) Mean for [X/Y]. Declaration public static double DivMean(Statistics x, Statistics y) Parameters Type Name Description Statistics x Statistics y Returns Type Description System.Double DivVariance(Statistics, Statistics) Variance for [X/Y]. Declaration public static double DivVariance(Statistics x, Statistics y) Parameters Type Name Description Statistics x Statistics y Returns Type Description System.Double GetActualOutliers(OutlierMode) Declaration public double[] GetActualOutliers(OutlierMode outlierMode) Parameters Type Name Description OutlierMode outlierMode Returns Type Description System.Double [] GetConfidenceInterval(ConfidenceLevel, Int32) Declaration public ConfidenceInterval GetConfidenceInterval(ConfidenceLevel level, int n) Parameters Type Name Description ConfidenceLevel level System.Int32 n Returns Type Description ConfidenceInterval GetValues() Declaration public IEnumerable<double> GetValues() Returns Type Description System.Collections.Generic.IEnumerable < System.Double > Invert() Statistics for [1/X]. If Min is less then or equal to 0, returns null. Declaration public Statistics Invert() Returns Type Description Statistics IsActualOutlier(Double, OutlierMode) Declaration public bool IsActualOutlier(double value, OutlierMode outlierMode) Parameters Type Name Description System.Double value OutlierMode outlierMode Returns Type Description System.Boolean IsLowerOutlier(Double) Declaration public bool IsLowerOutlier(double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsOutlier(Double) Declaration public bool IsOutlier(double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean IsUpperOutlier(Double) Declaration public bool IsUpperOutlier(double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean MulMean(Statistics, Statistics) Mean for [X*Y]. Declaration public static double MulMean(Statistics x, Statistics y) Parameters Type Name Description Statistics x Statistics y Returns Type Description System.Double MulVariance(Statistics, Statistics) Variance for [X*Y]. Declaration public static double MulVariance(Statistics x, Statistics y) Parameters Type Name Description Statistics x Statistics y Returns Type Description System.Double Sqr() Statistics for [X^2]. Declaration public Statistics Sqr() Returns Type Description Statistics ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() WithoutOutliers() Declaration public double[] WithoutOutliers() Returns Type Description System.Double [] Extension Methods StatisticsExtensions.ToStr(Statistics) StatisticsExtensions.ToTimeStr(Statistics, Encoding, TimeUnit, Boolean) HistogramExtensions.GetOptimalBinSize(Statistics, Nullable<BinSizeRule>)"
  },
  "api/BenchmarkDotNet.Reports.Summary.html": {
    "href": "api/BenchmarkDotNet.Reports.Summary.html",
    "title": "Class Summary | BenchmarkDotNet",
    "keywords": "Class Summary Inheritance System.Object Summary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public class Summary Constructors Summary(String, IList<BenchmarkReport>, HostEnvironmentInfo, IConfig, String, TimeSpan, ValidationError[]) Declaration public Summary(string title, IList<BenchmarkReport> reports, HostEnvironmentInfo hostEnvironmentInfo, IConfig config, string resultsDirectoryPath, TimeSpan totalTime, ValidationError[] validationErrors) Parameters Type Name Description System.String title System.Collections.Generic.IList < BenchmarkReport > reports HostEnvironmentInfo hostEnvironmentInfo IConfig config System.String resultsDirectoryPath System.TimeSpan totalTime ValidationError [] validationErrors Properties AllRuntimes Declaration public string AllRuntimes { get; } Property Value Type Description System.String Benchmarks Declaration public Benchmark[] Benchmarks { get; } Property Value Type Description Benchmark [] Config Declaration public IConfig Config { get; } Property Value Type Description IConfig HasCriticalValidationErrors Declaration public bool HasCriticalValidationErrors { get; } Property Value Type Description System.Boolean HostEnvironmentInfo Declaration public HostEnvironmentInfo HostEnvironmentInfo { get; } Property Value Type Description HostEnvironmentInfo Item[Benchmark] Returns a report for the given benchmark or null if there is no a corresponded report. Declaration public BenchmarkReport this[Benchmark benchmark] { get; } Parameters Type Name Description Benchmark benchmark Property Value Type Description BenchmarkReport Reports Declaration public BenchmarkReport[] Reports { get; } Property Value Type Description BenchmarkReport [] ResultsDirectoryPath Declaration public string ResultsDirectoryPath { get; } Property Value Type Description System.String Style Declaration public ISummaryStyle Style { get; } Property Value Type Description ISummaryStyle Table Declaration public SummaryTable Table { get; } Property Value Type Description SummaryTable Title Declaration public string Title { get; } Property Value Type Description System.String TotalTime Declaration public TimeSpan TotalTime { get; } Property Value Type Description System.TimeSpan ValidationErrors Declaration public ValidationError[] ValidationErrors { get; } Property Value Type Description ValidationError [] Methods GetLogicalGroupKey(Benchmark) Declaration public string GetLogicalGroupKey(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.String GetNumberOfExecutedBenchmarks() Declaration public int GetNumberOfExecutedBenchmarks() Returns Type Description System.Int32 HasReport(Benchmark) Declaration public bool HasReport(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Extension Methods ReportExtensions.GetReportFor<T>(Summary, Expression<Action<T>>) ReportExtensions.GetRunsFor<T>(Summary, Expression<Action<T>>) SummaryExtensions.GetColumns(Summary) SummaryExtensions.GetLogicalGroupForBenchmark(Summary, Benchmark)"
  },
  "api/BenchmarkDotNet.Reports.SummaryExtensions.html": {
    "href": "api/BenchmarkDotNet.Reports.SummaryExtensions.html",
    "title": "Class SummaryExtensions | BenchmarkDotNet",
    "keywords": "Class SummaryExtensions Inheritance System.Object SummaryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public static class SummaryExtensions Methods GetColumns(Summary) Declaration public static IColumn[] GetColumns(this Summary summary) Parameters Type Name Description Summary summary Returns Type Description IColumn [] GetLogicalGroupForBenchmark(Summary, Benchmark) Declaration public static IEnumerable<Benchmark> GetLogicalGroupForBenchmark(this Summary summary, Benchmark benchmark) Parameters Type Name Description Summary summary Benchmark benchmark Returns Type Description System.Collections.Generic.IEnumerable < Benchmark >"
  },
  "api/BenchmarkDotNet.Reports.SummaryStyle.html": {
    "href": "api/BenchmarkDotNet.Reports.SummaryStyle.html",
    "title": "Class SummaryStyle | BenchmarkDotNet",
    "keywords": "Class SummaryStyle Inheritance System.Object SummaryStyle Implements ISummaryStyle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public class SummaryStyle : ISummaryStyle Properties Default Declaration public static SummaryStyle Default { get; } Property Value Type Description SummaryStyle PrintUnitsInContent Declaration public bool PrintUnitsInContent { get; set; } Property Value Type Description System.Boolean PrintUnitsInHeader Declaration public bool PrintUnitsInHeader { get; set; } Property Value Type Description System.Boolean SizeUnit Declaration public SizeUnit SizeUnit { get; set; } Property Value Type Description SizeUnit TimeUnit Declaration public TimeUnit TimeUnit { get; set; } Property Value Type Description TimeUnit Methods WithSizeUnit(SizeUnit) Declaration public ISummaryStyle WithSizeUnit(SizeUnit sizeUnit) Parameters Type Name Description SizeUnit sizeUnit Returns Type Description ISummaryStyle WithTimeUnit(TimeUnit) Declaration public ISummaryStyle WithTimeUnit(TimeUnit timeUnit) Parameters Type Name Description TimeUnit timeUnit Returns Type Description ISummaryStyle Implements ISummaryStyle"
  },
  "api/BenchmarkDotNet.Reports.SummaryTable.SummaryTableColumn.TextJustification.html": {
    "href": "api/BenchmarkDotNet.Reports.SummaryTable.SummaryTableColumn.TextJustification.html",
    "title": "Enum SummaryTable.SummaryTableColumn.TextJustification | BenchmarkDotNet",
    "keywords": "Enum SummaryTable.SummaryTableColumn.TextJustification Namespace : BenchmarkDotNet.Reports Assembly : BenchmarkDotNet.dll Syntax public enum TextJustification Fields Name Description Left Right"
  },
  "api/BenchmarkDotNet.Toolchains.CustomCoreClr.html": {
    "href": "api/BenchmarkDotNet.Toolchains.CustomCoreClr.html",
    "title": "Namespace BenchmarkDotNet.Toolchains.CustomCoreClr | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Toolchains.CustomCoreClr Classes CustomCoreClrToolchain CustomCoreClrToolchainBuilder Generator generates new csproj file for self-contained .NET Core app which uses given CoreCLR NuGet packages based on https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingDotNetCli.md and https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md"
  },
  "api/BenchmarkDotNet.Exporters.CombinedDisassemblyExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.CombinedDisassemblyExporter.html",
    "title": "Class CombinedDisassemblyExporter | BenchmarkDotNet",
    "keywords": "Class CombinedDisassemblyExporter Inheritance System.Object ExporterBase CombinedDisassemblyExporter Implements IExporter Inherited Members ExporterBase.Name ExporterBase.Encoding ExporterBase.FileNameSuffix ExporterBase.ExportToFiles(Summary, ILogger) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class CombinedDisassemblyExporter : ExporterBase, IExporter Constructors CombinedDisassemblyExporter(IReadOnlyDictionary<Benchmark, DisassemblyResult>) Declaration public CombinedDisassemblyExporter(IReadOnlyDictionary<Benchmark, DisassemblyResult> results) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < Benchmark , DisassemblyResult > results Properties FileCaption Declaration protected override string FileCaption { get; } Property Value Type Description System.String Overrides ExporterBase.FileCaption FileExtension Declaration protected override string FileExtension { get; } Property Value Type Description System.String Overrides ExporterBase.FileExtension Methods ExportToLog(Summary, ILogger) Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Overrides ExporterBase.ExportToLog(Summary, ILogger) Implements IExporter"
  },
  "api/BenchmarkDotNet.Exporters.CompositeExporter.html": {
    "href": "api/BenchmarkDotNet.Exporters.CompositeExporter.html",
    "title": "Class CompositeExporter | BenchmarkDotNet",
    "keywords": "Class CompositeExporter Inheritance System.Object CompositeExporter Implements IExporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Exporters Assembly : BenchmarkDotNet.dll Syntax public class CompositeExporter : IExporter Constructors CompositeExporter(IExporter[]) Declaration public CompositeExporter(params IExporter[] exporters) Parameters Type Name Description IExporter [] exporters Properties Name Declaration public string Name { get; } Property Value Type Description System.String Methods ExportToFiles(Summary, ILogger) Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description Summary summary ILogger consoleLogger Returns Type Description System.Collections.Generic.IEnumerable < System.String > ExportToLog(Summary, ILogger) Declaration public void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description Summary summary ILogger logger Implements IExporter"
  },
  "api/BenchmarkDotNet.Extensions.html": {
    "href": "api/BenchmarkDotNet.Extensions.html",
    "title": "Namespace BenchmarkDotNet.Extensions | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Extensions Classes ConfigurationExtensions ReportExtensions StatisticsExtensions StringAndTextExtensions"
  },
  "api/BenchmarkDotNet.Filters.AllCategoriesFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.AllCategoriesFilter.html",
    "title": "Class AllCategoriesFilter | BenchmarkDotNet",
    "keywords": "Class AllCategoriesFilter Filter benchmarks which have all the target categories Inheritance System.Object AllCategoriesFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class AllCategoriesFilter : IFilter Constructors AllCategoriesFilter(String[]) Declaration public AllCategoriesFilter(string[] targetCategories) Parameters Type Name Description System.String [] targetCategories Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.AnyCategoriesFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.AnyCategoriesFilter.html",
    "title": "Class AnyCategoriesFilter | BenchmarkDotNet",
    "keywords": "Class AnyCategoriesFilter Filter benchmarks which have any of the target categories Inheritance System.Object AnyCategoriesFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class AnyCategoriesFilter : IFilter Constructors AnyCategoriesFilter(String[]) Declaration public AnyCategoriesFilter(string[] targetCategories) Parameters Type Name Description System.String [] targetCategories Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Filters.AttributesFilter.html": {
    "href": "api/BenchmarkDotNet.Filters.AttributesFilter.html",
    "title": "Class AttributesFilter | BenchmarkDotNet",
    "keywords": "Class AttributesFilter filters benchmarks by provided attribute names Inheritance System.Object AttributesFilter Implements IFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Filters Assembly : BenchmarkDotNet.dll Syntax public class AttributesFilter : IFilter Constructors AttributesFilter(String[]) Declaration public AttributesFilter(string[] attributes) Parameters Type Name Description System.String [] attributes Methods Predicate(Benchmark) Declaration public bool Predicate(Benchmark benchmark) Parameters Type Name Description Benchmark benchmark Returns Type Description System.Boolean Implements IFilter"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.InProcessExecutor.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.InProcessExecutor.html",
    "title": "Class InProcessExecutor | BenchmarkDotNet",
    "keywords": "Class InProcessExecutor Implementation of IExecutor for in-process benchmarks. Inheritance System.Object InProcessExecutor Implements IExecutor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public class InProcessExecutor : IExecutor Constructors InProcessExecutor(TimeSpan, BenchmarkActionCodegen, Boolean) Initializes a new instance of the InProcessExecutor class. Declaration public InProcessExecutor(TimeSpan timeout, BenchmarkActionCodegen codegenMode, bool logOutput) Parameters Type Name Description System.TimeSpan timeout Timeout for the run. BenchmarkActionCodegen codegenMode Describes how benchmark action code is generated. System.Boolean logOutput true if the output should be logged. Fields DefaultTimeout Default timeout for in-process benchmarks. Declaration public static readonly TimeSpan DefaultTimeout Field Value Type Description System.TimeSpan Properties CodegenMode Describes how benchmark action code is generated. Declaration public BenchmarkActionCodegen CodegenMode { get; } Property Value Type Description BenchmarkActionCodegen Benchmark action code generation mode. ExecutionTimeout Timeout for the run. Declaration public TimeSpan ExecutionTimeout { get; } Property Value Type Description System.TimeSpan The timeout for the run. LogOutput Gets a value indicating whether the output should be logged. Declaration public bool LogOutput { get; } Property Value Type Description System.Boolean true if the output should be logged; otherwise, false . Methods Execute(ExecuteParameters) Executes the specified benchmark. Declaration public ExecuteResult Execute(ExecuteParameters executeParameters) Parameters Type Name Description ExecuteParameters executeParameters Returns Type Description ExecuteResult Implements IExecutor"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.InProcessGenerator.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.InProcessGenerator.html",
    "title": "Class InProcessGenerator | BenchmarkDotNet",
    "keywords": "Class InProcessGenerator Implementation of IGenerator for in-process benchmarks. Inheritance System.Object InProcessGenerator Implements IGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public class InProcessGenerator : IGenerator Methods GenerateProject(BuildPartition, ILogger, String) returns a success Declaration public GenerateResult GenerateProject(BuildPartition buildPartition, ILogger logger, string rootArtifactsFolderPath) Parameters Type Name Description BuildPartition buildPartition ILogger logger System.String rootArtifactsFolderPath Returns Type Description GenerateResult Implements IGenerator"
  },
  "api/BenchmarkDotNet.Toolchains.InProcess.InProcessHost.html": {
    "href": "api/BenchmarkDotNet.Toolchains.InProcess.InProcessHost.html",
    "title": "Class InProcessHost | BenchmarkDotNet",
    "keywords": "Class InProcessHost Host API for in-process benchmarks. Inheritance System.Object InProcessHost Implements IHost Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : BenchmarkDotNet.Toolchains.InProcess Assembly : BenchmarkDotNet.dll Syntax public sealed class InProcessHost : IHost Constructors InProcessHost(Benchmark, ILogger, IDiagnoser, IConfig) Creates a new instance of InProcessHost . Declaration public InProcessHost(Benchmark benchmark, ILogger logger, IDiagnoser diagnoser, IConfig config) Parameters Type Name Description Benchmark benchmark Current benchmark. ILogger logger Logger for informational output. IDiagnoser diagnoser Diagnosers, if attached. IConfig config Current config. Properties Config Current config Declaration public IConfig Config { get; set; } Property Value Type Description IConfig IsDiagnoserAttached True if there are diagnosers attached. Declaration public bool IsDiagnoserAttached { get; } Property Value Type Description System.Boolean True if there are diagnosers attached. RunResults Results of the run. Declaration public RunResults RunResults { get; } Property Value Type Description RunResults Results of the run. Methods ReportResults(RunResults) Submits run results to the host. Declaration public void ReportResults(RunResults runResults) Parameters Type Name Description RunResults runResults The run results. SendError(String) Declaration public void SendError(string message) Parameters Type Name Description System.String message SendSignal(HostSignal) Sends notification signal to the host. Declaration public void SendSignal(HostSignal hostSignal) Parameters Type Name Description HostSignal hostSignal The signal to send. Write(String) Passes text to the host. Declaration public void Write(string message) Parameters Type Name Description System.String message Text to write. WriteLine() Passes new line to the host. Declaration public void WriteLine() WriteLine(String) Passes text (new line appended) to the host. Declaration public void WriteLine(string message) Parameters Type Name Description System.String message Text to write. Implements IHost Extension Methods HostExtensions.WriteLine(IHost, String, Object[]) HostExtensions.BeforeAnythingElse(IHost) HostExtensions.BeforeMainRun(IHost) HostExtensions.AfterMainRun(IHost) HostExtensions.AfterAll(IHost) See Also IHost"
  },
  "api/BenchmarkDotNet.Validators.html": {
    "href": "api/BenchmarkDotNet.Validators.html",
    "title": "Namespace BenchmarkDotNet.Validators | BenchmarkDotNet",
    "keywords": "Namespace BenchmarkDotNet.Validators Classes BaselineValidator CompilationValidator ConfigValidator DiagnosersValidator ExecutionValidator ExecutionValidatorBase GenericBenchmarksValidator JitOptimizationsValidator ReturnValueValidator RunModeValidator SetupCleanupValidator ShadowCopyValidator ValidationError ValidationErrorReporter ValidationParameters Interfaces IValidator"
  }
}