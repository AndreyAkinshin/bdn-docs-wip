<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Exporters - BenchmarkDotNet Documentation</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">

    <!-- Google Analytics -->
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-41419012-6', 'auto');
      ga('send', 'pageview');

    </script>
    <!-- /Google Analytics -->
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript">
        (function (d, w, c) {
            (w[c] = w[c] || []).push(function() {
                try {
                    w.yaCounter40812449 = new Ya.Metrika({
                        id:40812449,
                        clickmap:true,
                        trackLinks:true,
                        accurateTrackBounce:true
                    });
                } catch(e) { }
            });

            var n = d.getElementsByTagName("script")[0],
                s = d.createElement("script"),
                f = function () { n.parentNode.insertBefore(s, n); };
            s.type = "text/javascript";
            s.async = true;
            s.src = "https://mc.yandex.ru/metrika/watch.js";

            if (w.opera == "[object Opera]") {
                d.addEventListener("DOMContentLoaded", f, false);
            } else { f(); }
        })(document, window, "yandex_metrika_callbacks");
    </script>
    <noscript><div><img src="https://mc.yandex.ru/watch/40812449" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
    <!-- /Yandex.Metrika counter -->
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../index.htm"><i class="fa fa-home"></i> BenchmarkDotNet Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../index.htm">Home</a>
</li>

<li class="tocentry"><a href="../Overview.htm">Overview</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Guides.htm">Guides</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../Configs.htm">Configs</a></span></li>
<li class="tocentry"><a href="../Configs/Configs.htm">Configs</a>
</li>
<li class="tocentry"><a href="../Configs/Jobs.htm">Jobs</a>
</li>
<li class="tocentry"><a href="../Configs/Columns.htm">Columns</a>
</li>
<li class="tocentry current"><a class="current" href="../Configs/Exporters.htm">Exporters</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#miscexporters">MiscExporters</a></li>
<li class="tocentry"><a href="#json">Json</a></li>
<li class="tocentry"><a href="#plots">Plots</a></li>
<li class="tocentry"><a href="#csv">CSV</a></li>
<li class="tocentry"><a href="#xml">XML</a></li>
</ul>
<li class="tocentry"><a href="../Configs/Loggers.htm">Loggers</a>
</li>
<li class="tocentry"><a href="../Configs/Diagnosers.htm">Diagnosers</a>
</li>
<li class="tocentry"><a href="../Configs/Toolchains.htm">Toolchains</a>
</li>
<li class="tocentry"><a href="../Configs/Analyzers.htm">Analyzers</a>
</li>
<li class="tocentry"><a href="../Configs/Validators.htm">Validators</a>
</li>
<li class="tocentry"><a href="../Configs/Filters.htm">Filters</a>
</li>
<li class="tocentry"><a href="../Configs/OrderProvider.htm">OrderProvider</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Advancedfeatures.htm">Advanced features</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Internals.htm">Internals</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Contributing.htm">Contributing</a></span>
</li>
<li class="tocentry"><a href="../FAQ.htm">FAQ</a>
</li>
<li class="tocentry"><a href="../Team.htm">Team</a>
</li>
<li class="tocentry"><a href="../license.htm">License</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">BenchmarkDotNet Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../index.htm">Home</a></li> / <li><a href="../Configs.htm">Configs</a></li> / <li><a href="../Configs/Exporters.htm">Exporters</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="exporters">Exporters<a class="headerlink" href="#exporters" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>An <em>exporter</em> allows you to export results of your benchmark in different formats. By default, files with results will be located in 
<code>.\BenchmarkDotNet.Artifacts\results</code> directory. Default exporters are: csv, html and markdown. 
Here is list of all available exporters:</p>
<h2 id="miscexporters">MiscExporters<a class="headerlink" href="#miscexporters" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>There are some predefined exporters. Examples:</p>
<pre><code class="cs">[AsciiDocExporter]
[CsvExporter]
[CsvMeasurementsExporter]
[HtmlExporter]
[MarkdownExporter]
[PlainExporter]
public class MyBenchmarkClass
</code></pre>

<h2 id="json">Json<a class="headerlink" href="#json" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>BenchmarkDotNet has a set of json exporters. You can customize the following properties of these exporters:</p>
<ul>
<li><code>fileNameSuffix</code>: a string which be placed in the end of target file name.</li>
<li><code>indentJson</code>=<code>false</code>/<code>true</code>: should we format json or not.</li>
<li><code>excludeMeasurements</code>=<code>false</code>/<code>true</code>: should we exclude detailed information about measurements or not (the final summary with statistics will be in the json file anyway).</li>
</ul>
<p>Also, there are a set of predefined json exporters. Example of usage:</p>
<pre><code class="cs">[JsonExporterAttribute.Brief]
[JsonExporterAttribute.Full]
[JsonExporterAttribute.BriefCompressed]
[JsonExporterAttribute.FullCompressed]
[JsonExporter(&quot;-custom&quot;, indentJson: true, excludeMeasurements: true)]
public class IntroJsonExport
{
    [Benchmark] public void Sleep10() =&gt; Thread.Sleep(10);
    [Benchmark] public void Sleep20() =&gt; Thread.Sleep(20);
}
</code></pre>

<pre><code class="cs">[Config(typeof(Config))]
public class IntroJsonExport2
{
    private class Config : ManualConfig
    {
        public Config()
        {
            Add(JsonExporter.Brief);
            Add(JsonExporter.Full);
            Add(JsonExporter.BriefCompressed);
            Add(JsonExporter.FullCompressed);
            Add(JsonExporter.Custom(&quot;-custom&quot;, indentJson: true, excludeMeasurements: true));
        }
    }
}
</code></pre>

<p>Example of <code>IntroJsonExport-report-brief.json</code>:</p>
<pre><code class="js">{
   &quot;Title&quot;:&quot;IntroJsonExport&quot;,
   &quot;HostEnvironmentInfo&quot;:{
      &quot;BenchmarkDotNetCaption&quot;:&quot;BenchmarkDotNet-Dev.Core&quot;,
      &quot;BenchmarkDotNetVersion&quot;:&quot;0.9.9.0&quot;,
      &quot;OsVersion&quot;:&quot;Microsoft Windows NT 6.2.9200.0&quot;,
      &quot;ProcessorName&quot;:{
         &quot;IsValueCreated&quot;:true,
         &quot;Value&quot;:&quot;Intel(R) Core(TM) i7-4702MQ CPU 2.20GHz&quot;
      },
      &quot;ProcessorCount&quot;:8,
      &quot;ClrVersion&quot;:&quot;MS.NET 4.0.30319.42000&quot;,
      &quot;Architecture&quot;:&quot;64-bit&quot;,
      &quot;HasAttachedDebugger&quot;:false,
      &quot;HasRyuJit&quot;:true,
      &quot;Configuration&quot;:&quot;RELEASE&quot;,
      &quot;JitModules&quot;:&quot;clrjit-v4.6.1586.0&quot;,
      &quot;DotNetCliVersion&quot;:&quot;1.0.0-preview2-003121&quot;,
      &quot;ChronometerFrequency&quot;:2143474,
      &quot;HardwareTimerKind&quot;:&quot;Tsc&quot;
   },
   &quot;Benchmarks&quot;:[
      {
         &quot;ShortInfo&quot;:&quot;IntroJsonExport_Sleep10&quot;,
         &quot;Namespace&quot;:&quot;BenchmarkDotNet.Samples.Intro&quot;,
         &quot;Type&quot;:&quot;IntroJsonExport&quot;,
         &quot;Method&quot;:&quot;Sleep10&quot;,
         &quot;MethodTitle&quot;:&quot;Sleep10&quot;,
         &quot;Parameters&quot;:&quot;&quot;,
         &quot;Properties&quot;:{
            &quot;Mode&quot;:&quot;Throughput&quot;,
            &quot;Platform&quot;:&quot;Host&quot;,
            &quot;Jit&quot;:&quot;Host&quot;,
            &quot;Runtime&quot;:&quot;Host&quot;,
            &quot;GcMode&quot;:&quot;Host&quot;,
            &quot;WarmupCount&quot;:&quot;Auto&quot;,
            &quot;TargetCount&quot;:&quot;Auto&quot;,
            &quot;LaunchCount&quot;:&quot;Auto&quot;,
            &quot;IterationTime&quot;:&quot;Auto&quot;,
            &quot;Affinity&quot;:&quot;Auto&quot;
         },
         &quot;Statistics&quot;:{
            &quot;N&quot;:20,
            &quot;Min&quot;:10265993.7209375,
            &quot;LowerFence&quot;:10255329.082734371,
            &quot;Q1&quot;:10337369.528437499,
            &quot;Median&quot;:10360382.6953125,
            &quot;Mean&quot;:10362283.085796878,
            &quot;Q3&quot;:10392063.158906251,
            &quot;UpperFence&quot;:10474103.60460938,
            &quot;Max&quot;:10436008.3209375,
            &quot;InterquartileRange&quot;:54693.630468752235,
            &quot;Outliers&quot;:[
               
            ],
            &quot;StandardError&quot;:10219.304338928456,
            &quot;Variance&quot;:2088683623.4328396,
            &quot;StandardDeviation&quot;:45702.118369205156,
            &quot;Skewness&quot;:-0.1242777170069375,
            &quot;Kurtosis&quot;:2.31980277935226,
            &quot;ConfidenceInterval&quot;:{
               &quot;Mean&quot;:10362283.085796878,
               &quot;Error&quot;:10219.304338928456,
               &quot;Level&quot;:6,
               &quot;Margin&quot;:20029.836504299772,
               &quot;Lower&quot;:10342253.249292579,
               &quot;Upper&quot;:10382312.922301177
            },
            &quot;Percentiles&quot;:{
               &quot;P0&quot;:10265993.7209375,
               &quot;P25&quot;:10338555.905625,
               &quot;P50&quot;:10360382.6953125,
               &quot;P67&quot;:10373496.555659376,
               &quot;P80&quot;:10400703.4841875,
               &quot;P85&quot;:10417280.326718749,
               &quot;P90&quot;:10424125.595812501,
               &quot;P95&quot;:10435620.51609375,
               &quot;P100&quot;:10436008.3209375
            }
         }
      },{
         &quot;ShortInfo&quot;:&quot;IntroJsonExport_Sleep20&quot;,
         &quot;Namespace&quot;:&quot;BenchmarkDotNet.Samples.Intro&quot;,
         &quot;Type&quot;:&quot;IntroJsonExport&quot;,
         &quot;Method&quot;:&quot;Sleep20&quot;,
         &quot;MethodTitle&quot;:&quot;Sleep20&quot;,
         &quot;Parameters&quot;:&quot;&quot;,
         &quot;Properties&quot;:{
            &quot;Mode&quot;:&quot;Throughput&quot;,
            &quot;Platform&quot;:&quot;Host&quot;,
            &quot;Jit&quot;:&quot;Host&quot;,
            &quot;Runtime&quot;:&quot;Host&quot;,
            &quot;GcMode&quot;:&quot;Host&quot;,
            &quot;WarmupCount&quot;:&quot;Auto&quot;,
            &quot;TargetCount&quot;:&quot;Auto&quot;,
            &quot;LaunchCount&quot;:&quot;Auto&quot;,
            &quot;IterationTime&quot;:&quot;Auto&quot;,
            &quot;Affinity&quot;:&quot;Auto&quot;
         },
         &quot;Statistics&quot;:{
            &quot;N&quot;:20,
            &quot;Min&quot;:20258672.37,
            &quot;LowerFence&quot;:20206333.269843742,
            &quot;Q1&quot;:20325342.761249997,
            &quot;Median&quot;:20362636.192500003,
            &quot;Mean&quot;:20360791.931687497,
            &quot;Q3&quot;:20404682.4221875,
            &quot;UpperFence&quot;:20523691.913593754,
            &quot;Max&quot;:20422396.073125,
            &quot;InterquartileRange&quot;:79339.66093750298,
            &quot;Outliers&quot;:[
               
            ],
            &quot;StandardError&quot;:10728.817907277158,
            &quot;Variance&quot;:2302150673.7502208,
            &quot;StandardDeviation&quot;:47980.732317777525,
            &quot;Skewness&quot;:-0.50826238372439869,
            &quot;Kurtosis&quot;:2.11050327966268,
            &quot;ConfidenceInterval&quot;:{
               &quot;Mean&quot;:20360791.931687497,
               &quot;Error&quot;:10728.817907277158,
               &quot;Level&quot;:6,
               &quot;Margin&quot;:21028.48309826323,
               &quot;Lower&quot;:20339763.448589232,
               &quot;Upper&quot;:20381820.414785761
            },
            &quot;Percentiles&quot;:{
               &quot;P0&quot;:20258672.37,
               &quot;P25&quot;:20327638.975312497,
               &quot;P50&quot;:20362636.192500003,
               &quot;P67&quot;:20391669.3762875,
               &quot;P80&quot;:20406370.68625,
               &quot;P85&quot;:20412542.034406248,
               &quot;P90&quot;:20414412.5376875,
               &quot;P95&quot;:20416606.697718751,
               &quot;P100&quot;:20422396.073125
            }
         }
      }
   ]
}
</code></pre>

<h2 id="plots">Plots<a class="headerlink" href="#plots" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>You can install <a href="https://www.r-project.org/" target="_blank">R</a> to automatically get nice plots of your benchmark results. First, make sure <code>Rscript.exe</code> or <code>Rscript</code> is in your path, or define an R_HOME environment variable pointing to the R installation directory (containing the <code>bin</code> directory). Use <code>RPlotExporter.Default</code> and <code>CsvMeasurementsExporter.Default</code> in your config, and the <code>BuildPlots.R</code> script in your bin directory will take care of the rest.</p>
<h3 id="examples">Examples<a class="headerlink" href="#examples" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre class="nocode">&lt;BenchmarkName&gt;-barplot.png
&lt;BenchmarkName&gt;-boxplot.png
&lt;BenchmarkName&gt;-&lt;MethodName&gt;-density.png
&lt;BenchmarkName&gt;-&lt;MethodName&gt;-facetTimeline.png
&lt;BenchmarkName&gt;-&lt;MethodName&gt;-facetTimelineSmooth.png
&lt;BenchmarkName&gt;-&lt;MethodName&gt;-&lt;JobName&gt;-timelineSmooth.png
&lt;BenchmarkName&gt;-&lt;MethodName&gt;-&lt;JobName&gt;-timelineSmooth.png
</pre><p>A config example:</p>
<pre><code class="cs">public class Config : ManualConfig
{
    public Config()
    {
        Add(CsvMeasurementsExporter.Default);
        Add(RPlotExporter.Default);
    }
}
</code></pre>

<h2 id="csv">CSV<a class="headerlink" href="#csv" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The CSV file format is often used to graph the output or to analyze the results programmatically. The CSV exporter may be configured to produce sanitized output, where cell values are numerals and their units are predefined.</p>
<p>The CSV exporter and other compatible exporters may consume an instance of <code>ISummaryStyle</code> that defines how the output should look like:</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Remarks</th>
	<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
	<td>PrintUnitsInHeader</td>
	<td>If true, units will be displayed in the header row</td>
	<td>false</td>
</tr>
<tr>
	<td>PrintUnitsInContent</td>
	<td>If true, units will be appended to the value</td>
	<td>true</td>
</tr>
<tr>
	<td>TimeUnit</td>
	<td>If null, unit will be automatically selected</td>
	<td>null</td>
</tr>
<tr>
	<td>SizeUnit</td>
	<td>If null, unit will be automatically selected</td>
	<td>null</td>
</tr>
</tbody>
</table>
<p>Example of CSV exporter configured to always use microseconds, kilobytes, and to render units only in column headers:</p>
<pre><code class="cs">var config = ManualConfig.Create(DefaultConfig.Instance);
config.Add(new CsvExporter(
    CsvSeparator.CurrentCulture,
    new BenchmarkDotNet.Reports.SummaryStyle
    {
        PrintUnitsInHeader = true,
        PrintUnitsInContent = false,
        TimeUnit = BenchmarkDotNet.Horology.TimeUnit.Microsecond,
        SizeUnit = BenchmarkDotNet.Columns.SizeUnit.KB
    }));
</code></pre>

<p>Excerpt from the resulting CSV file:</p>
<pre class="nocode">Method,...,Mean [us],Error [us],StdDev [us],Min [us],Max [us],Allocated [KB]
Benchmark,...,&quot;37,647.6&quot;,&quot;32,717.9&quot;,&quot;21,640.9&quot;,&quot;11,209.2&quot;,&quot;59,492.6&quot;,1.58
</pre><h2 id="xml">XML<a class="headerlink" href="#xml" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>BenchmarkDotNet has a set of XML exporters. You can customize the following properties of these exporters:</p>
<ul>
<li><code>fileNameSuffix</code>: a string which be placed in the end of target file name.</li>
<li><code>indentXml</code>=<code>false</code>/<code>true</code>: should we format xml or not.</li>
<li><code>excludeMeasurements</code>=<code>false</code>/<code>true</code>: should we exclude detailed information about measurements or not (the final summary with statistics will be in the XML file anyway).</li>
</ul>
<p>Also, there are a set of predefined XML exporters. Example of usage:</p>
<pre><code class="cs">[XmlExporterAttribute.Brief]
[XmlExporterAttribute.Full]
[XmlExporterAttribute.BriefCompressed]
[XmlExporterAttribute.FullCompressed]
[XmlExporter(&quot;-custom&quot;, indentXml: true, excludeMeasurements: true)]
public class IntroXmlExport
{
    [Benchmark] public void Sleep10() =&gt; Thread.Sleep(10);
    [Benchmark] public void Sleep20() =&gt; Thread.Sleep(20);
}
</code></pre>

<p>Example of <code>IntroXmlExport-report-brief.xml</code>:</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Summary&gt;
  &lt;Title&gt;IntroXmlExport&lt;/Title&gt;
  &lt;HostEnvironmentInfo&gt;
    &lt;BenchmarkDotNetCaption&gt;BenchmarkDotNet&lt;/BenchmarkDotNetCaption&gt;
    &lt;BenchmarkDotNetVersion&gt;0.10.9.20170805-develop&lt;/BenchmarkDotNetVersion&gt;
    &lt;OsVersion&gt;Windows 10 Redstone 2 (10.0.15063)&lt;/OsVersion&gt;
    &lt;ProcessorName&gt;Intel Core i7-3770K CPU 3.50GHz (Ivy Bridge)&lt;/ProcessorName&gt;
    &lt;ProcessorCount&gt;8&lt;/ProcessorCount&gt;
    &lt;RuntimeVersion&gt;.NET Framework 4.7 (CLR 4.0.30319.42000)&lt;/RuntimeVersion&gt;
    &lt;Architecture&gt;64bit&lt;/Architecture&gt;
    &lt;HasAttachedDebugger&gt;False&lt;/HasAttachedDebugger&gt;
    &lt;HasRyuJit&gt;True&lt;/HasRyuJit&gt;
    &lt;Configuration&gt;RELEASE&lt;/Configuration&gt;
    &lt;JitModules&gt;clrjit-v4.7.2101.1&lt;/JitModules&gt;
    &lt;DotNetSdkVersion&gt;1.0.4&lt;/DotNetSdkVersion&gt;
    &lt;ChronometerFrequency&gt;
      &lt;Hertz&gt;3410220&lt;/Hertz&gt;
    &lt;/ChronometerFrequency&gt;
    &lt;HardwareTimerKind&gt;Tsc&lt;/HardwareTimerKind&gt;
  &lt;/HostEnvironmentInfo&gt;
  &lt;Benchmarks&gt;
    &lt;Benchmark&gt;
      &lt;DisplayInfo&gt;IntroXmlExport.Sleep10: DefaultJob&lt;/DisplayInfo&gt;
      &lt;Namespace&gt;BenchmarkDotNet.Samples.Intro&lt;/Namespace&gt;
      &lt;Type&gt;IntroXmlExport&lt;/Type&gt;
      &lt;Method&gt;Sleep10&lt;/Method&gt;
      &lt;MethodTitle&gt;Sleep10&lt;/MethodTitle&gt;
      &lt;Statistics&gt;
        &lt;N&gt;15&lt;/N&gt;
        &lt;Min&gt;10989865.8785938&lt;/Min&gt;
        &lt;LowerFence&gt;10989836.0967969&lt;/LowerFence&gt;
        &lt;Q1&gt;10990942.6053125&lt;/Q1&gt;
        &lt;Median&gt;10991249.5870313&lt;/Median&gt;
        &lt;Mean&gt;10991270.0524583&lt;/Mean&gt;
        &lt;Q3&gt;10991680.2776563&lt;/Q3&gt;
        &lt;UpperFence&gt;10992786.7861719&lt;/UpperFence&gt;
        &lt;Max&gt;10992115.5501563&lt;/Max&gt;
        &lt;InterquartileRange&gt;737.672343749553&lt;/InterquartileRange&gt;
        &lt;StandardError&gt;148.484545262958&lt;/StandardError&gt;
        &lt;Variance&gt;330714.902729213&lt;/Variance&gt;
        &lt;StandardDeviation&gt;575.07817097262&lt;/StandardDeviation&gt;
        &lt;Skewness&gt;-0.67759778074187&lt;/Skewness&gt;
        &lt;Kurtosis&gt;3.14296703520386&lt;/Kurtosis&gt;
        &lt;ConfidenceInterval&gt;
          &lt;N&gt;15&lt;/N&gt;
          &lt;Mean&gt;10991270.0524583&lt;/Mean&gt;
          &lt;StandardError&gt;148.484545262958&lt;/StandardError&gt;
          &lt;Level&gt;L999&lt;/Level&gt;
          &lt;Margin&gt;614.793505974065&lt;/Margin&gt;
          &lt;Lower&gt;10990655.2589524&lt;/Lower&gt;
          &lt;Upper&gt;10991884.8459643&lt;/Upper&gt;
        &lt;/ConfidenceInterval&gt;
        &lt;Percentiles&gt;
          &lt;P0&gt;10989865.8785938&lt;/P0&gt;
          &lt;P25&gt;10991027.3689063&lt;/P25&gt;
          &lt;P50&gt;10991249.5870313&lt;/P50&gt;
          &lt;P67&gt;10991489.490875&lt;/P67&gt;
          &lt;P80&gt;10991696.7722187&lt;/P80&gt;
          &lt;P85&gt;10991754.5031875&lt;/P85&gt;
          &lt;P90&gt;10991933.1939688&lt;/P90&gt;
          &lt;P95&gt;10992067.441125&lt;/P95&gt;
          &lt;P100&gt;10992115.5501563&lt;/P100&gt;
        &lt;/Percentiles&gt;
      &lt;/Statistics&gt;
    &lt;/Benchmark&gt;
  &lt;/Benchmarks&gt;
&lt;/Summary&gt;
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
BenchmarkDotNet Documentation. &copy;2013-2018. <a href='https://github.com/dotnet/BenchmarkDotNet' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/packages/BenchmarkDotNet/' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>

</body>
</html>
