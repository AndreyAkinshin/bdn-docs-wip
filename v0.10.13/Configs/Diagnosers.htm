<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Diagnosers - BenchmarkDotNet Documentation</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">

    <!-- Google Analytics -->
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-41419012-6', 'auto');
      ga('send', 'pageview');

    </script>
    <!-- /Google Analytics -->
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript">
        (function (d, w, c) {
            (w[c] = w[c] || []).push(function() {
                try {
                    w.yaCounter40812449 = new Ya.Metrika({
                        id:40812449,
                        clickmap:true,
                        trackLinks:true,
                        accurateTrackBounce:true
                    });
                } catch(e) { }
            });

            var n = d.getElementsByTagName("script")[0],
                s = d.createElement("script"),
                f = function () { n.parentNode.insertBefore(s, n); };
            s.type = "text/javascript";
            s.async = true;
            s.src = "https://mc.yandex.ru/metrika/watch.js";

            if (w.opera == "[object Opera]") {
                d.addEventListener("DOMContentLoaded", f, false);
            } else { f(); }
        })(document, window, "yandex_metrika_callbacks");
    </script>
    <noscript><div><img src="https://mc.yandex.ru/watch/40812449" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
    <!-- /Yandex.Metrika counter -->
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../index.htm"><i class="fa fa-home"></i> BenchmarkDotNet Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../index.htm">Home</a>
</li>

<li class="tocentry"><a href="../Overview.htm">Overview</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Guides.htm">Guides</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../Configs.htm">Configs</a></span></li>
<li class="tocentry"><a href="../Configs/Configs.htm">Configs</a>
</li>
<li class="tocentry"><a href="../Configs/Jobs.htm">Jobs</a>
</li>
<li class="tocentry"><a href="../Configs/Columns.htm">Columns</a>
</li>
<li class="tocentry"><a href="../Configs/Exporters.htm">Exporters</a>
</li>
<li class="tocentry"><a href="../Configs/Loggers.htm">Loggers</a>
</li>
<li class="tocentry current"><a class="current" href="../Configs/Diagnosers.htm">Diagnosers</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#examples">Examples</a></li>
<li class="tocentry"><a href="#hardware-counters-diagnoser">Hardware Counters Diagnoser</a></li>
<li class="tocentry"><a href="#disassembly-diagnoser">Disassembly Diagnoser</a></li>
<li class="tocentry"><a href="#restrictions">Restrictions</a></li>
<li class="tocentry"><a href="#tailcall-diagnoser">Tailcall Diagnoser</a></li>
</ul>
<li class="tocentry"><a href="../Configs/Toolchains.htm">Toolchains</a>
</li>
<li class="tocentry"><a href="../Configs/Analyzers.htm">Analyzers</a>
</li>
<li class="tocentry"><a href="../Configs/Validators.htm">Validators</a>
</li>
<li class="tocentry"><a href="../Configs/Filters.htm">Filters</a>
</li>
<li class="tocentry"><a href="../Configs/OrderProvider.htm">OrderProvider</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Advancedfeatures.htm">Advanced features</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Internals.htm">Internals</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Contributing.htm">Contributing</a></span>
</li>
<li class="tocentry"><a href="../FAQ.htm">FAQ</a>
</li>
<li class="tocentry"><a href="../Team.htm">Team</a>
</li>
<li class="tocentry"><a href="../license.htm">License</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">BenchmarkDotNet Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../index.htm">Home</a></li> / <li><a href="../Configs.htm">Configs</a></li> / <li><a href="../Configs/Diagnosers.htm">Diagnosers</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="diagnosers">Diagnosers<a class="headerlink" href="#diagnosers" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>A <strong>diagnoser</strong> can attach to your benchmark and get some useful info.</p>
<p>The current Diagnosers are:</p>
<ul>
<li>GC and Memory Allocation (<code>MemoryDiagnoser</code>) which is cross platform, built-in and <strong>is not enabled by default anymore</strong>. Please see Adam Sitnik's <a href="http://adamsitnik.com/the-new-Memory-Diagnoser/" target="_blank">blog post</a> for all the details.</li>
<li>JIT Inlining Events (<code>InliningDiagnoser</code>). You can find this diagnoser in a separated package with diagnosers for Windows (<code>BenchmarkDotNet.Diagnostics.Windows</code>): <a href="https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/" target="_blank"><img src="https://img.shields.io/nuget/v/BenchmarkDotNet.svg" alt="NuGet" /></a></li>
<li>JIT Tail Call Events (<code>TailCallDiagnoser</code>). You can find this diagnoser as well as the (<code>InliningDiagnoser</code>) in a separated package with diagnosers for Windows (<code>BenchmarkDotNet.Diagnostics.Windows</code>): <a href="https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/" target="_blank"><img src="https://img.shields.io/nuget/v/BenchmarkDotNet.svg" alt="NuGet" /></a> Please see <a href="https://georgeplotnikov.github.io/articles/tale-tail-call-dotnet" target="_blank">this post</a> for all the details.</li>
<li>Hardware Counter Diagnoser. You can find this diagnoser in a separated package with diagnosers for Windows (<code>BenchmarkDotNet.Diagnostics.Windows</code>): <a href="https://www.nuget.org/packages/BenchmarkDotNet.Diagnostics.Windows/" target="_blank"><img src="https://img.shields.io/nuget/v/BenchmarkDotNet.svg" alt="NuGet" /></a>.  Please see Adam Sitnik's <a href="http://adamsitnik.com/Hardware-Counters-Diagnoser/" target="_blank">blog post</a> for all the details.</li>
<li>Disassembly Diagnoser. It allows you to disassemble the benchmarked code to asm, IL and C#/F#. Please see Adam Sitnik's <a href="http://adamsitnik.com/Disassembly-Diagnoser/" target="_blank">blog post</a> for all the details.</li>
</ul>
<h2 id="examples">Examples<a class="headerlink" href="#examples" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Below is a sample output from the <code>GC and Memory Allocation</code> diagnoser, note the extra columns on the right-hand side (&quot;Gen 0&quot;, &quot;Gen 1&quot;, &quot;Gen 2&quot; and &quot;Allocated&quot;):</p>
<pre class="nocode">           Method |        Mean |     StdErr |      StdDev |      Median |  Gen 0 | Allocated |
----------------- |------------ |----------- |------------ |------------ |------- |---------- |
 'new byte[10kB]' | 884.4896 ns | 46.3528 ns | 245.2762 ns | 776.4237 ns | 0.1183 |     10 kB |
</pre><p>A config example:</p>
<pre><code class="cs">private class Config : ManualConfig
{
    public Config()
    {
        Add(MemoryDiagnoser.Default);
        Add(new InliningDiagnoser());
    }
}
</code></pre>

<p>You can also use one of the following attributes (apply it on a class that contains Benchmarks):</p>
<pre><code class="cs">[MemoryDiagnoser]
[InliningDiagnoser]
[TailCallDiagnoser]
</code></pre>

<p>In BenchmarkDotNet, 1kB = 1024B, 1MB = 1024kB, and so on.</p>
<h2 id="hardware-counters-diagnoser">Hardware Counters Diagnoser<a class="headerlink" href="#hardware-counters-diagnoser" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>This diagnoser is not enabled in explicit way as the other diagnosers. You need to specify <code>[HardwareCounters]</code> and we choose the right diagnoser in the runtime.</p>
<pre><code class="cs">[HardwareCounters(HardwareCounter.BranchMispredictions, HardwareCounter.BranchInstructions)]
public class Cpu_BranchPerdictor
{
    private const int N = 32767;
    private readonly int[] sorted, unsorted;

    public Cpu_BranchPerdictor()
    {
        var random = new Random(0);
        unsorted = new int[N];
        sorted = new int[N];
        for (int i = 0; i &lt; N; i++)
            sorted[i] = unsorted[i] = random.Next(256);
        Array.Sort(sorted);
    }

    private static int Branch(int[] data)
    {
        int sum = 0;
        for (int i = 0; i &lt; N; i++)
            if (data[i] &gt;= 128)
                sum += data[i];
        return sum;
    }

    private static int Branchless(int[] data)
    {
        int sum = 0;
        for (int i = 0; i &lt; N; i++)
        {
            int t = (data[i] - 128) &gt;&gt; 31;
            sum += ~t &amp; data[i];
        }
        return sum;
    }

    [Benchmark]
    public int SortedBranch() =&gt; Branch(sorted);

    [Benchmark]
    public int UnsortedBranch() =&gt; Branch(unsorted);

    [Benchmark]
    public int SortedBranchless() =&gt; Branchless(sorted);

    [Benchmark]
    public int UnsortedBranchless() =&gt; Branchless(unsorted);
}
</code></pre>

<p>and the results:</p>
<pre class="nocode"> |             Method |        Mean | Mispredict rate | BranchInstructions/Op | BranchMispredictions/Op |
 |------------------- |------------ |---------------- |---------------------- |------------------------ |
 |       SortedBranch |  21.4539 us |           0,04% |                 70121 |                      24 |
 |     UnsortedBranch | 136.1139 us |          23,70% |                 68788 |                   16301 |
 |   SortedBranchless |  28.6705 us |           0,06% |                 35711 |                      22 |
 | UnsortedBranchless |  28.9336 us |           0,05% |                 35578 |                      17 |
</pre><h2 id="disassembly-diagnoser">Disassembly Diagnoser<a class="headerlink" href="#disassembly-diagnoser" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>You need to use the <code>DisassemblyDiagnoser</code> attribute to configure it. The available options are:</p>
<ul>
<li>printIL: IL will be printed. False by default.</li>
<li>printAsm: ASM will be printed. True by default.</li>
<li>printSource: C# source code will be printed. False by default.</li>
<li>printPrologAndEpilog: ASM for prolog and epilog will be printed. False by default.</li>
<li>recursiveDepth: Includes called methods to given level. 1 by default, indexed from 1. To print just benchmark set to 0</li>
</ul>
<h3 id="sample">Sample<a class="headerlink" href="#sample" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">[DisassemblyDiagnoser(printAsm: true, printSource: true)] // !!! use the new diagnoser!!
[RyuJitX64Job]
public class Simple
{
    int[] field = Enumerable.Range(0, 100).ToArray();

    [Benchmark]
    public int SumLocal()
    {
        var local = field; // we use local variable that points to the field

        int sum = 0;
        for (int i = 0; i &lt; local.Length; i++)
            sum += local[i];

        return sum;
    }

    [Benchmark]
    public int SumField()
    {
        int sum = 0;
        for (int i = 0; i &lt; field.Length; i++)
            sum += field[i];

        return sum;
    }
}
</code></pre>

<img src="../Images/disasmDemo.png" width="800px" />
<h3 id="all-jits">ALL JITs<a class="headerlink" href="#all-jits" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>You can use a single config to compare the generated assembly code for ALL JITs. </p>
<pre><code class="cs">public class MultipleJits : ManualConfig
{
    public MultipleJits()
    {
        Add(Job.ShortRun.With(new MonoRuntime(name: &quot;Mono x86&quot;, customPath: @&quot;C:\Program Files (x86)\Mono\bin\mono.exe&quot;)).With(Platform.X86));
        Add(Job.ShortRun.With(new MonoRuntime(name: &quot;Mono x64&quot;, customPath: @&quot;C:\Program Files\Mono\bin\mono.exe&quot;)).With(Platform.X64));

        Add(Job.ShortRun.With(Jit.LegacyJit).With(Platform.X86).With(Runtime.Clr));
        Add(Job.ShortRun.With(Jit.LegacyJit).With(Platform.X64).With(Runtime.Clr));

        Add(Job.ShortRun.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Clr));

        // RyuJit for .NET Core 1.1
        Add(Job.ShortRun.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Core).With(CsProjCoreToolchain.NetCoreApp11));

        // RyuJit for .NET Core 2.0
        Add(Job.ShortRun.With(Jit.RyuJit).With(Platform.X64).With(Runtime.Core).With(CsProjCoreToolchain.NetCoreApp20));

        Add(DisassemblyDiagnoser.Create(new DisassemblyDiagnoserConfig(printAsm: true, printPrologAndEpilog: true, recursiveDepth: 3)));
    }
}

[Config(typeof(MultipleJits))]
public class Jit_Devirtualization
{
    private Increment increment = new Increment();

    [Benchmark]
    public int CallVirtualMethod() =&gt; increment.OperateTwice(10);

    public abstract class Operation  // abstract unary integer operation
    {
        public abstract int Operate(int input);

        public int OperateTwice(int input) =&gt; Operate(Operate(input)); // two virtual calls to Operate
    }

    public sealed class Increment : Operation // concrete, sealed operation: increment by fixed amount
    {
        public readonly int Amount;
        public Increment(int amount = 1) { Amount = amount; }

        public override int Operate(int input) =&gt; input + Amount;
    }
}
</code></pre>

<p>The disassembly result can be obtained <a href="http://adamsitnik.com/files/disasm/Jit_Devirtualization-disassembly-report.html" target="_blank">here</a>. The file was too big to embed it in this doc page.</p>
<h2 id="restrictions">Restrictions<a class="headerlink" href="#restrictions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>In order to not affect main results we perform a separate run if any diagnoser is used. That's why it might take more time to execute benchmarks.</li>
<li>
MemoryDiagnoser:
<ul>
<li>Mono currently <a href="http://stackoverflow.com/questions/40234948/how-to-get-the-number-of-allocated-bytes-in-mono" target="_blank">does not</a> expose any api to get the number of allocated bytes. That's why our Mono users will get <code>?</code> in Allocated column.</li>
<li>In order to get the number of allocated bytes in cross platform way we are using <code>GC.GetAllocatedBytesForCurrentThread</code> which recently got <a href="https://github.com/dotnet/corefx/pull/12489" target="_blank">exposed</a> for netcoreapp1.1. That's why BenchmarkDotNet does not support netcoreapp1.0 from version 0.10.1.</li>
<li>MemoryDiagnoser is <code>99.5%</code> accurate about allocated memory when using default settings or Job.ShortRun (or any longer job than it).</li>
</ul>
</li>
<li>
HardwareCounters:
<ul>
<li>Windows 8+ only (we plan to add Unix support in the future)</li>
<li>No Hyper-V (Virtualization) support</li>
<li>Requires running as Admin (ETW Kernel Session)</li>
<li>No <code>InProcessToolchain</code> support (<a href="https://github.com/dotnet/BenchmarkDotNet/issues/394" target="_blank">#394</a>)</li>
</ul>
</li>
<li>
Disassembly Diagnoser:
<ul>
<li>.NET Core disassembler works only on Windows</li>
<li>Mono disassembler does not support recursive disassembling and produces output without IL and C#.</li>
<li>Indirect calls are not tracked.</li>
<li>To get the corresponding C#/F# code from disassembler you need to configure your project in following way:</li>
</ul>
</li>
</ul>
<pre><code class="xml">&lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
&lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
</code></pre>

<h2 id="tailcall-diagnoser">Tailcall Diagnoser<a class="headerlink" href="#tailcall-diagnoser" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>You need to use the <code>TailcallDiagnoser</code> attribute to configure it. The available options are:</p>
<ul>
<li>logFailuresOnly: Track only the methods that failed to get tail called. True by default.</li>
<li>filterByNamespace : Track only the methods from declaring type's namespace. Set to false if you want to see all Jit tail events. True by default.</li>
</ul>
<h3 id="sample-1">Sample<a class="headerlink" href="#sample-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">[Diagnostics.Windows.Configs.TailCallDiagnoser]
[LegacyJitX86Job, LegacyJitX64Job, RyuJitX64Job]
public class Jit_TailCalling
{
    [Benchmark]
    public long Calc()
        =&gt; FactorialWithoutTailing(7) - FactorialWithTailing(7);

    private static long FactorialWithoutTailing(int depth)
        =&gt; depth == 0 ? 1 : depth * FactorialWithoutTailing(depth - 1);

    private static long FactorialWithTailing(int pos, int depth)
        =&gt; pos == 0 ? depth : FactorialWithTailing(pos - 1, depth * pos);

    private static long FactorialWithTailing(int depth)
        =&gt; FactorialWithTailing(1, depth);
}
</code></pre>

<h3 id="the-result">The result<a class="headerlink" href="#the-result" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>The benchmark results were omitted for brevity.</p>
<pre class="nocode">// * Diagnostic Output - TailCallDiagnoser *
--------------------

--------------------
Jit_TailCalling.Calc: LegacyJitX64(Jit=LegacyJit, Platform=X64, Runtime=Clr)
--------------------

--------------------
Jit_TailCalling.Calc: LegacyJitX86(Jit=LegacyJit, Platform=X86, Runtime=Clr)
--------------------

--------------------
Jit_TailCalling.Calc: RyuJitX64(Jit=RyuJit, Platform=X64)
--------------------
Caller: &lt;null&gt;.&lt;null&gt; - &lt;null&gt;
Callee: BenchmarkDotNet.Samples.JIT.Jit_TailCalling.FactorialWithTailing - int64  (int32,int32)
Tail prefix: False
Tail call type: RecursiveLoop
-------------------
</pre><h3 id="restrictions-1">Restrictions<a class="headerlink" href="#restrictions-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<ul>
<li>Windows only</li>
<li>x64</li>
</ul>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
BenchmarkDotNet Documentation. &copy;2013-2018. <a href='https://github.com/dotnet/BenchmarkDotNet' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/packages/BenchmarkDotNet/' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>

</body>
</html>
